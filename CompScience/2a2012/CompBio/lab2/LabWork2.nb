(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    280268,       7710]
NotebookOptionsPosition[    260895,       7088]
NotebookOutlinePosition[    261461,       7112]
CellTagsIndexPosition[    261390,       7107]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 StyleBox["Notebook 2 : Performing Sequence Analysis with ",
  FontSize->28],
 StyleBox["Mathematica",
  FontSize->28,
  FontSlant->"Italic"]
}], "Title",
 Background->None],

Cell[TextData[{
 StyleBox["The aim of this lab notebook is to give users the ideas of how to \
perform sequence analysis using ",
  FontSlant->"Plain",
  FontVariations->{"CompatibilityType"->0}],
 StyleBox["Mathematica ",
  FontSlant->"Italic",
  FontVariations->{"CompatibilityType"->0}],
 StyleBox["so that they can further develop relevant skills (e.g., writing \
more complicated searching function) in their future research. ",
  FontSlant->"Plain",
  FontVariations->{"CompatibilityType"->0}]
}], "Author",
 Background->None],

Cell[TextData[{
 StyleBox["Note: The prerequsite knowledge about DNA structure can be found \
at : ",
  FontSlant->"Plain",
  FontVariations->{"CompatibilityType"->0}],
 ButtonBox["http://www.blc.arizona.edu/Molecular_Graphics/DNA_Structure/DNA_\
Tutorial.HTML\n",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://www.blc.arizona.edu/Molecular_Graphics/DNA_Structure/DNA_\
Tutorial.HTML"], None}],
 "and t",
 StyleBox["he prerequsite knowledge about mRNA, amino acids and genetic code \
can be found at : ",
  FontSlant->"Plain",
  FontVariations->{"CompatibilityType"->0}],
 " ",
 ButtonBox["http://users.rcn.com/jkimball.ma.ultranet/BiologyPages/C/Codons.\
html",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://users.rcn.com/jkimball.ma.ultranet/BiologyPages/C/Codons.\
html"], None}]
}], "Author",
 Background->None],

Cell[CellGroupData[{

Cell[TextData[{
 "1. Using the StringReplace and ",
 StyleBox["StringReverse",
  FontWeight->"Bold"],
 " function"
}], "Section",
 Background->None],

Cell[TextData[{
 "Consider the following string which we call ",
 StyleBox["nucstring",
  FontWeight->"Bold"]
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nucstring", "=", "\"\<acCtagGgCCTTAcga\>\""}]], "Input",
 Background->None],

Cell[BoxData["\<\"acCtagGgCCTTAcga\"\>"], "Output",
 CellChangeTimes->{3.538117020762041*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "The function ",
 StyleBox["StringReplace",
  FontWeight->"Bold"],
 " allows us to replace/modify characters in a string. The syntax for ",
 StyleBox["StringReplace",
  FontWeight->"Bold"],
 " can be found using the help menu (",
 ButtonBox["StringReplace",
  BaseStyle->"RefGuideLink"],
 "). In this example we want to replace the string characters \"",
 StyleBox["t",
  FontWeight->"Bold"],
 "\" and \"",
 StyleBox["g",
  FontWeight->"Bold"],
 "\" with their upper case counterpart"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplace", "[", 
  RowBox[{"nucstring", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<t\>\"", "\[Rule]", "\"\<T\>\""}], ",", 
     RowBox[{"\"\<g\>\"", "\[Rule]", "\"\<G\>\""}]}], "}"}]}], "]"}]], "Input",\

 Background->None],

Cell[BoxData["\<\"acCTaGGGCCTTAcGa\"\>"], "Output",
 CellChangeTimes->{3.538117023091785*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " the construct ",
 StyleBox["exp1\[Rule] exp2",
  FontSlant->"Italic"],
 " (where exp1 stands for any ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expression) represents a replacement rule. Note that in the second \
argument in ",
 StyleBox["StringReplace",
  FontWeight->"Bold"],
 " is a replacement rule or a list of replacement rules. In this case the \
replacement rule involves strings e,g. \"t\"\[Rule]\"T\" etc."
}], "Text",
 Background->None],

Cell[TextData[{
 " Let us expand on this example by first defining a new string which is a \
replicates  our original string. We call the new string ",
 StyleBox["nucstring2",
  FontWeight->"Bold"]
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nucstring2", "=", 
  "\"\<acCtagGgCCTTAcgaacCtagGgCCTTAcga\>\""}]], "Input",
 Background->None],

Cell[BoxData["\<\"acCtagGgCCTTAcgaacCtagGgCCTTAcga\"\>"], "Output",
 CellChangeTimes->{3.5381170248726273`*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "The following example shows that ",
 StyleBox["StringReplace",
  FontWeight->"Bold"],
 " searches through the complete string and makes replacements whenever there \
is a match."
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplace", "[", 
  RowBox[{"nucstring2", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<tag\>\"", "\[Rule]", "\"\<BGH\>\""}], "}"}]}], 
  "]"}]], "Input",
 Background->None],

Cell[BoxData["\<\"acCBGHGgCCTTAcgaacCBGHGgCCTTAcga\"\>"], "Output",
 CellChangeTimes->{3.538117027272251*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "If we are given a string we can reverse the order of the string using ",
 StyleBox["StringReverse",
  FontWeight->"Bold"],
 " function. Here is an example using our ",
 StyleBox["nucstring",
  FontWeight->"Bold"]
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"nucstring", ",", " ", 
   RowBox[{"StringReverse", "[", "nucstring", "]"}]}], "}"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"acCtagGgCCTTAcga\"\>", ",", "\<\"agcATTCCgGgatCca\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.5381170295894947`*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "One application of ",
 StyleBox["StringReverse",
  FontWeight->"Bold"],
 " is to explore properties of the  complement of a DNA sequence of bases. \
This is done in Example 2"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell["Example 1: Create RNA from  DNA sequence using StringReplace", \
"Subsection",
 Background->None],

Cell["\<\
Consider the following DNA sequence taken from a FASTA file, where the \
letters \"a\",\"g\",\"c\",\"t\" represent the bases in DNA\
\>", "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "myDNA", "=", 
   "\"\<agatggcggcgctgaggggtcttgggggctctaggccggccacctactggtttgcagcggagacgacgca\
tggggcctgcgcaataggagtacgctgcctgggaggcgtgactagaagcggaagtagttgtgggcgcctttgcaaccg\
cctgggacgccgccgagtggtctgtgcaggttcgcgggtcgctggcgggggtcgtgagggagtgcgccgggagcggag\
atatggagggagatggttcagacccagagcctccagatgccggggaggacagcaagtccgagaatggggagaatgcgc\
ccatctactgcatctgccgcaaaccggacatcaactgcttcatgatcgggtgtgacaactgcaatgagtggttccatg\
gggactgcatccggatcactgagaagatggccaaggccatccgggagtggtactgtcgggagtgcagagagaaagacc\
ccaagctagagattcgctatcggcacaagaagtcacgggagcgggatggcaatgagcgggacagcagtgagccccggg\
atgagggtggagggcgcaagaggcctgtccctgatccagacctgcagcgccgggcagggtcagggacaggggttgggg\
ccatgcttgctcggggctctgcttcgccccacaaatcctctccgcagcccttggtggccacacccagccagcatcacc\
agcagcagcagcagcagatcaaacggtcagcccgcatgtgtggtgagtgtgaggcatgtcggcgcactgaggactgtg\
gtcactgtgatttctgtcgggacatgaagaagttcgggggccccaacaagatccggcagaagtgccggctgcgccagt\
gccagctgcgggcccgggaatcgtacaagtacttcccttcctcgctctcaccagtgacgccctcagagtccctgccaa\
ggccccgccggccactgcccacccaacagcagccacagccatcacagaagttagggcgcatccgtgaagatgaggggg\
cagtggcgtcatcaacagtcaaggagcctcctgaggctacagccacacctgagccactctcagatgaggaccta\>\"\
"}], ";"}]], "Input",
 Background->None],

Cell[TextData[{
 "To generate RNA from this sequence we need to replace  every occurrence of \
the character \"t\" with  the charter \"u\". We can use ",
 StyleBox["StringReplace",
  FontWeight->"Bold"],
 " to do this operation"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myRNA", "=", 
  RowBox[{"StringReplace", "[", 
   RowBox[{"myDNA", ",", 
    RowBox[{"\"\<t\>\"", "->", "\"\<u\>\""}]}], "]"}]}]], "Input",
 Background->None],

Cell[BoxData["\<\"\
agauggcggcgcugaggggucuugggggcucuaggccggccaccuacugguuugcagcggagacgacgcauggggccu\
gcgcaauaggaguacgcugccugggaggcgugacuagaagcggaaguaguugugggcgccuuugcaaccgccugggac\
gccgccgaguggucugugcagguucgcgggucgcuggcgggggucgugagggagugcgccgggagcggagauauggag\
ggagaugguucagacccagagccuccagaugccggggaggacagcaaguccgagaauggggagaaugcgcccaucuac\
ugcaucugccgcaaaccggacaucaacugcuucaugaucgggugugacaacugcaaugagugguuccauggggacugc\
auccggaucacugagaagauggccaaggccauccgggagugguacugucgggagugcagagagaaagaccccaagcua\
gagauucgcuaucggcacaagaagucacgggagcgggauggcaaugagcgggacagcagugagccccgggaugagggu\
ggagggcgcaagaggccugucccugauccagaccugcagcgccgggcagggucagggacagggguuggggccaugcuu\
gcucggggcucugcuucgccccacaaauccucuccgcagcccuugguggccacacccagccagcaucaccagcagcag\
cagcagcagaucaaacggucagcccgcauguguggugagugugaggcaugucggcgcacugaggacuguggucacugu\
gauuucugucgggacaugaagaaguucgggggccccaacaagauccggcagaagugccggcugcgccagugccagcug\
cgggcccgggaaucguacaaguacuucccuuccucgcucucaccagugacgcccucagagucccugccaaggccccgc\
cggccacugcccacccaacagcagccacagccaucacagaaguuagggcgcauccgugaagaugagggggcaguggcg\
ucaucaacagucaaggagccuccugaggcuacagccacaccugagccacucucagaugaggaccua\"\>"], \
"Output",
 CellChangeTimes->{3.538117037578607*^9},
 Background->None]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2. Some basic functions for manipulating strings", "Section",
 Background->None],

Cell[TextData[{
 "In this section we introduce the reader to a few new functions that are \
useful for manipulation strings. If we are given a string and we want to \
break it down into a list of individual characters we can use the function ",
 StyleBox["Characters.",
  FontWeight->"Bold"],
 " Consider our previous example string called ",
 StyleBox["nucstring.",
  FontWeight->"Bold"],
 " Here are the individual characters of nucstring"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myListofChar", "=", 
  RowBox[{"Characters", "[", "nucstring", "]"}]}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"C\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"g\"\>", ",", "\<\"G\"\>", ",", "\<\"g\"\>", 
   ",", "\<\"C\"\>", ",", "\<\"C\"\>", ",", "\<\"T\"\>", ",", "\<\"T\"\>", 
   ",", "\<\"A\"\>", ",", "\<\"c\"\>", ",", "\<\"g\"\>", ",", "\<\"a\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.5381170084468193`*^9, 3.538117040393099*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "We now have a list of individual characters that we used to create ",
 StyleBox["nucstring. ",
  FontWeight->"Bold"],
 "We can reverse the process with the function ",
 StyleBox["StringJoin",
  FontWeight->"Bold"]
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", "myListofChar", "]"}]], "Input",
 Background->None],

Cell[BoxData["\<\"acCtagGgCCTTAcga\"\>"], "Output",
 CellChangeTimes->{3.5381170441944103`*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has numerous functions for manipulating lists. We will examine a few of \
them. Consider the function Partition This function allows one to partition a \
list into sublists with various degrees of overlap of the partitions. The \
following link describes the syntax for using the partition function ( ",
 ButtonBox["Partition",
  BaseStyle->"RefGuideLink"],
 " ). Here is a simple example that partitions our list of characters into \
sublist of three characters with no overlap of partitions"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mySublist1", "=", 
  RowBox[{"Partition", "[", 
   RowBox[{"myListofChar", ",", "3"}], "]"}]}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"t\"\>", ",", "\<\"a\"\>", ",", "\<\"g\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"G\"\>", ",", "\<\"g\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"T\"\>", ",", "\<\"T\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"A\"\>", ",", "\<\"c\"\>", ",", "\<\"g\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.538117046102365*^9},
 Background->None]
}, Open  ]],

Cell["\<\
Here is a partition in which the sublists are offset by one character\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mySublist2", "=", 
  RowBox[{"Partition", "[", 
   RowBox[{"myListofChar", ",", "3", ",", "1"}], "]"}]}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"C\"\>", ",", "\<\"t\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"t\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"t\"\>", ",", "\<\"a\"\>", ",", "\<\"g\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"g\"\>", ",", "\<\"G\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"g\"\>", ",", "\<\"G\"\>", ",", "\<\"g\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"G\"\>", ",", "\<\"g\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"g\"\>", ",", "\<\"C\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"C\"\>", ",", "\<\"T\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"T\"\>", ",", "\<\"T\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"T\"\>", ",", "\<\"T\"\>", ",", "\<\"A\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"T\"\>", ",", "\<\"A\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"A\"\>", ",", "\<\"c\"\>", ",", "\<\"g\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"g\"\>", ",", "\<\"a\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.538117047788476*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Suppose now we want to convert all the sublists into a unified string. We \
can devise a replacement rule that will do this operation that makes use of \
the function ",
 StyleBox["StringJoin",
  FontWeight->"Bold"]
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mySublist1", "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x_", ",", "y_", ",", "z_"}], "}"}], ":>", 
   RowBox[{"StringJoin", "[", 
    RowBox[{"x", ",", "y", ",", "z"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.5381172289339533`*^9, 3.538117233482101*^9}},
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"acC\"\>", ",", "\<\"tag\"\>", ",", "\<\"GgC\"\>", 
   ",", "\<\"CTT\"\>", ",", "\<\"Acg\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.538117233934719*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "The above statement contains several new notations: The operator ",
 Cell[BoxData[
  RowBox[{
   StyleBox["/.",
    FontWeight->"Bold"], " "}]]],
 "is the shorthand for ",
 ButtonBox["ReplaceAll",
  BaseStyle->"RefGuideLink"],
 " function and is used with replacement rules; the notation ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"{", 
    RowBox[{"x_", ",", "y_", ",", "z_"}], "}"}],
   FontWeight->"Bold"]]],
 " defines a named pattern; and the notation ",
 Cell[BoxData[
  StyleBox[":>",
   FontWeight->"Bold"]]],
 " is a delayed rule which means the RHS of the rule is not evaluated until \
the replacement is done. An alternative way of doing the same task is to use \
the ",
 ButtonBox["Map",
  BaseStyle->"RefGuideLink"],
 " function"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"StringJoin", "[", "#", "]"}], "&"}], ",", "mySublist1"}], 
  "]"}]], "Input",
 CellChangeTimes->{3.538117054676424*^9, 3.5381170863137627`*^9},
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"acC\"\>", ",", "\<\"tag\"\>", ",", "\<\"GgC\"\>", 
   ",", "\<\"CTT\"\>", ",", "\<\"Acg\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.538117053037013*^9, 3.5381170561151648`*^9}, 
   3.538117086836591*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "In this example the function StringJoin is mapped onto each sublist; the \
symbol ",
 ButtonBox["#",
  BaseStyle->"RefGuideLink"],
 " denotes the slot function and is used with a pure ",
 ButtonBox["Function",
  BaseStyle->"RefGuideLink"],
 " . During the Map operation the contents of each sublist is substituted \
into the slot. "
}], "Text",
 Background->None],

Cell[TextData[{
 "We can also use the ",
 ButtonBox["Apply",
  BaseStyle->"RefGuideLink"],
 "  function. In this operation the ",
 ButtonBox["Head",
  BaseStyle->"RefGuideLink"],
 " of each sublist which is ",
 StyleBox["List",
  FontWeight->"Bold"],
 " is replaced with ",
 Cell[BoxData[
  StyleBox["StringJoin",
   FontWeight->"Bold"]]],
 ". See the previous links for an explanation of the syntax for using  ",
 StyleBox["Map",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Apply",
  FontWeight->"Bold"],
 "; also check the ECH198 Introduction to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " for more details an examples using this functions)"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"StringJoin", ",", "mySublist1", ",", "2"}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"acC\"\>", ",", "\<\"tag\"\>", ",", "\<\"GgC\"\>", 
   ",", "\<\"CTT\"\>", ",", "\<\"Acg\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.5381170931240273`*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "This example illustrates that there are often several ways to do a task in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". The choice of method is usually one of  convenience, i.e. use the method \
the method you are most comfortable with. There are times, however , where \
the method of choice is based on computational efficiency."
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell["Example 2: Translating Codons to Amino Acids ", "Subsection",
 Background->None],

Cell[TextData[{
 "In this example we use our DNA string to create a sequence of amino acids. \
First we construct a set of rules for the codons. For the meaning of these \
rules, please see ",
 ButtonBox["http://molbio.info.nih.gov/molbio/gcode.html ",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://molbio.info.nih.gov/molbio/gcode.html"], None}],
 "\nand ",
 ButtonBox["http://users.rcn.com/jkimball.ma.ultranet/BiologyPages/C/Codons.\
html",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://users.rcn.com/jkimball.ma.ultranet/BiologyPages/C/Codons.\
html"], None}]
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CodonRules", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\"\<tca\>\"", "->", "\"\<S\>\""}], ",", 
    RowBox[{"\"\<tcc\>\"", "->", "\"\<S\>\""}], ",", 
    RowBox[{"\"\<tcg\>\"", "->", "\"\<S\>\""}], ",", 
    RowBox[{"\"\<tct\>\"", "->", "\"\<S\>\""}], ",", 
    RowBox[{"\"\<ttc\>\"", "->", "\"\<F\>\""}], ",", "   ", 
    RowBox[{"\"\<ttt\>\"", "->", "\"\<F\>\""}], ",", 
    RowBox[{"\"\<tta\>\"", "->", "\"\<L\>\""}], ",", 
    RowBox[{"\"\<ttg\>\"", "->", "\"\<L\>\""}], ",", 
    RowBox[{"\"\<tac\>\"", "->", "\"\<Y\>\""}], ",", 
    RowBox[{"\"\<tat\>\"", "->", "\"\<Y\>\""}], ",", 
    RowBox[{"\"\<taa\>\"", "->", "\"\<_\>\""}], ",", 
    RowBox[{"\"\<tag\>\"", "->", "\"\<_\>\""}], ",", 
    RowBox[{"\"\<tgc\>\"", "->", "\"\<C\>\""}], ",", 
    RowBox[{"\"\<tgt\>\"", "->", "\"\<C\>\""}], ",", 
    RowBox[{"\"\<tga\>\"", "->", "\"\<_\>\""}], ",", 
    RowBox[{"\"\<tgg\>\"", "->", "\"\<W\>\""}], ",", 
    RowBox[{"\"\<cta\>\"", "\[Rule]", "\"\<L\>\""}], ",", 
    RowBox[{"\"\<ctc\>\"", "->", "\"\<L\>\""}], ",", 
    RowBox[{"\"\<ctg\>\"", "->", "\"\<L\>\""}], ",", 
    RowBox[{"\"\<ctt\>\"", "->", "\"\<L\>\""}], ",", 
    RowBox[{"\"\<cca\>\"", "->", "\"\<P\>\""}], ",", 
    RowBox[{"\"\<ccc\>\"", "->", "\"\<P\>\""}], ",", 
    RowBox[{"\"\<ccg\>\"", "->", "\"\<P\>\""}], ",", 
    RowBox[{"\"\<cct\>\"", "->", "\"\<P\>\""}], ",", 
    RowBox[{"\"\<cac\>\"", "->", "\"\<H\>\""}], ",", 
    RowBox[{"\"\<cat\>\"", "->", "\"\<H\>\""}], ",", 
    RowBox[{"\"\<caa\>\"", "->", "\"\<Q\>\""}], ",", 
    RowBox[{"\"\<cag\>\"", "->", "\"\<Q\>\""}], ",", 
    RowBox[{"\"\<cga\>\"", "->", "\"\<R\>\""}], ",", 
    RowBox[{"\"\<cgc\>\"", "->", "\"\<R\>\""}], ",", 
    RowBox[{"\"\<cgg\>\"", "->", "\"\<R\>\""}], ",", 
    RowBox[{"\"\<cgt\>\"", "->", "\"\<R\>\""}], ",", 
    RowBox[{"\"\<ata\>\"", "->", "\"\<I\>\""}], ",", 
    RowBox[{"\"\<att\>\"", "->", "\"\<I\>\""}], ",", 
    RowBox[{"\"\<atc\>\"", "->", "\"\<I\>\""}], ",", 
    RowBox[{"\"\<atg\>\"", "->", "\"\<M\>\""}], ",", 
    RowBox[{"\"\<aca\>\"", "->", "\"\<T\>\""}], ",", 
    RowBox[{"\"\<acc\>\"", "->", "\"\<T\>\""}], ",", 
    RowBox[{"\"\<acg\>\"", "->", "\"\<T\>\""}], ",", 
    RowBox[{"\"\<act\>\"", "->", "\"\<T\>\""}], ",", 
    RowBox[{"\"\<aac\>\"", "->", "\"\<N\>\""}], ",", 
    RowBox[{"\"\<aat\>\"", "->", "\"\<N\>\""}], ",", 
    RowBox[{"\"\<aaa\>\"", "->", "\"\<K\>\""}], ",", 
    RowBox[{"\"\<aag\>\"", "->", "\"\<K\>\""}], ",", 
    RowBox[{"\"\<agc\>\"", "->", "\"\<S\>\""}], ",", 
    RowBox[{"\"\<agt\>\"", "->", "\"\<S\>\""}], ",", 
    RowBox[{"\"\<aga\>\"", "->", "\"\<R\>\""}], ",", 
    RowBox[{"\"\<agg\>\"", "->", "\"\<R\>\""}], ",", 
    RowBox[{"\"\<gta\>\"", "->", "\"\<V\>\""}], ",", 
    RowBox[{"\"\<gtc\>\"", "->", "\"\<V\>\""}], ",", 
    RowBox[{"\"\<gtg\>\"", "->", "\"\<V\>\""}], ",", 
    RowBox[{"\"\<gtt\>\"", "->", "\"\<V\>\""}], ",", 
    RowBox[{"\"\<gca\>\"", "->", "\"\<A\>\""}], ",", 
    RowBox[{"\"\<gcc\>\"", "->", "\"\<A\>\""}], ",", 
    RowBox[{"\"\<gcg\>\"", "->", "\"\<A\>\""}], ",", 
    RowBox[{"\"\<gct\>\"", "->", "\"\<A\>\""}], ",", 
    RowBox[{"\"\<gac\>\"", "->", "\"\<D\>\""}], ",", 
    RowBox[{"\"\<gat\>\"", "->", "\"\<D\>\""}], ",", 
    RowBox[{"\"\<gaa\>\"", "\[Rule]", "\"\<E\>\""}], ",", 
    RowBox[{"\"\<gag\>\"", "->", "\"\<E\>\""}], ",", 
    RowBox[{"\"\<gga\>\"", "->", "\"\<G\>\""}], ",", 
    RowBox[{"\"\<ggc\>\"", "->", "\"\<G\>\""}], ",", 
    RowBox[{"\"\<ggg\>\"", "->", "\"\<G\>\""}], ",", 
    RowBox[{"\"\<ggt\>\"", "->", "\"\<G\>\""}]}], "}"}]}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"tca\"\>", "\[Rule]", "\<\"S\"\>"}], ",", 
   RowBox[{"\<\"tcc\"\>", "\[Rule]", "\<\"S\"\>"}], ",", 
   RowBox[{"\<\"tcg\"\>", "\[Rule]", "\<\"S\"\>"}], ",", 
   RowBox[{"\<\"tct\"\>", "\[Rule]", "\<\"S\"\>"}], ",", 
   RowBox[{"\<\"ttc\"\>", "\[Rule]", "\<\"F\"\>"}], ",", 
   RowBox[{"\<\"ttt\"\>", "\[Rule]", "\<\"F\"\>"}], ",", 
   RowBox[{"\<\"tta\"\>", "\[Rule]", "\<\"L\"\>"}], ",", 
   RowBox[{"\<\"ttg\"\>", "\[Rule]", "\<\"L\"\>"}], ",", 
   RowBox[{"\<\"tac\"\>", "\[Rule]", "\<\"Y\"\>"}], ",", 
   RowBox[{"\<\"tat\"\>", "\[Rule]", "\<\"Y\"\>"}], ",", 
   RowBox[{"\<\"taa\"\>", "\[Rule]", "\<\"_\"\>"}], ",", 
   RowBox[{"\<\"tag\"\>", "\[Rule]", "\<\"_\"\>"}], ",", 
   RowBox[{"\<\"tgc\"\>", "\[Rule]", "\<\"C\"\>"}], ",", 
   RowBox[{"\<\"tgt\"\>", "\[Rule]", "\<\"C\"\>"}], ",", 
   RowBox[{"\<\"tga\"\>", "\[Rule]", "\<\"_\"\>"}], ",", 
   RowBox[{"\<\"tgg\"\>", "\[Rule]", "\<\"W\"\>"}], ",", 
   RowBox[{"\<\"cta\"\>", "\[Rule]", "\<\"L\"\>"}], ",", 
   RowBox[{"\<\"ctc\"\>", "\[Rule]", "\<\"L\"\>"}], ",", 
   RowBox[{"\<\"ctg\"\>", "\[Rule]", "\<\"L\"\>"}], ",", 
   RowBox[{"\<\"ctt\"\>", "\[Rule]", "\<\"L\"\>"}], ",", 
   RowBox[{"\<\"cca\"\>", "\[Rule]", "\<\"P\"\>"}], ",", 
   RowBox[{"\<\"ccc\"\>", "\[Rule]", "\<\"P\"\>"}], ",", 
   RowBox[{"\<\"ccg\"\>", "\[Rule]", "\<\"P\"\>"}], ",", 
   RowBox[{"\<\"cct\"\>", "\[Rule]", "\<\"P\"\>"}], ",", 
   RowBox[{"\<\"cac\"\>", "\[Rule]", "\<\"H\"\>"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", "\<\"H\"\>"}], ",", 
   RowBox[{"\<\"caa\"\>", "\[Rule]", "\<\"Q\"\>"}], ",", 
   RowBox[{"\<\"cag\"\>", "\[Rule]", "\<\"Q\"\>"}], ",", 
   RowBox[{"\<\"cga\"\>", "\[Rule]", "\<\"R\"\>"}], ",", 
   RowBox[{"\<\"cgc\"\>", "\[Rule]", "\<\"R\"\>"}], ",", 
   RowBox[{"\<\"cgg\"\>", "\[Rule]", "\<\"R\"\>"}], ",", 
   RowBox[{"\<\"cgt\"\>", "\[Rule]", "\<\"R\"\>"}], ",", 
   RowBox[{"\<\"ata\"\>", "\[Rule]", "\<\"I\"\>"}], ",", 
   RowBox[{"\<\"att\"\>", "\[Rule]", "\<\"I\"\>"}], ",", 
   RowBox[{"\<\"atc\"\>", "\[Rule]", "\<\"I\"\>"}], ",", 
   RowBox[{"\<\"atg\"\>", "\[Rule]", "\<\"M\"\>"}], ",", 
   RowBox[{"\<\"aca\"\>", "\[Rule]", "\<\"T\"\>"}], ",", 
   RowBox[{"\<\"acc\"\>", "\[Rule]", "\<\"T\"\>"}], ",", 
   RowBox[{"\<\"acg\"\>", "\[Rule]", "\<\"T\"\>"}], ",", 
   RowBox[{"\<\"act\"\>", "\[Rule]", "\<\"T\"\>"}], ",", 
   RowBox[{"\<\"aac\"\>", "\[Rule]", "\<\"N\"\>"}], ",", 
   RowBox[{"\<\"aat\"\>", "\[Rule]", "\<\"N\"\>"}], ",", 
   RowBox[{"\<\"aaa\"\>", "\[Rule]", "\<\"K\"\>"}], ",", 
   RowBox[{"\<\"aag\"\>", "\[Rule]", "\<\"K\"\>"}], ",", 
   RowBox[{"\<\"agc\"\>", "\[Rule]", "\<\"S\"\>"}], ",", 
   RowBox[{"\<\"agt\"\>", "\[Rule]", "\<\"S\"\>"}], ",", 
   RowBox[{"\<\"aga\"\>", "\[Rule]", "\<\"R\"\>"}], ",", 
   RowBox[{"\<\"agg\"\>", "\[Rule]", "\<\"R\"\>"}], ",", 
   RowBox[{"\<\"gta\"\>", "\[Rule]", "\<\"V\"\>"}], ",", 
   RowBox[{"\<\"gtc\"\>", "\[Rule]", "\<\"V\"\>"}], ",", 
   RowBox[{"\<\"gtg\"\>", "\[Rule]", "\<\"V\"\>"}], ",", 
   RowBox[{"\<\"gtt\"\>", "\[Rule]", "\<\"V\"\>"}], ",", 
   RowBox[{"\<\"gca\"\>", "\[Rule]", "\<\"A\"\>"}], ",", 
   RowBox[{"\<\"gcc\"\>", "\[Rule]", "\<\"A\"\>"}], ",", 
   RowBox[{"\<\"gcg\"\>", "\[Rule]", "\<\"A\"\>"}], ",", 
   RowBox[{"\<\"gct\"\>", "\[Rule]", "\<\"A\"\>"}], ",", 
   RowBox[{"\<\"gac\"\>", "\[Rule]", "\<\"D\"\>"}], ",", 
   RowBox[{"\<\"gat\"\>", "\[Rule]", "\<\"D\"\>"}], ",", 
   RowBox[{"\<\"gaa\"\>", "\[Rule]", "\<\"E\"\>"}], ",", 
   RowBox[{"\<\"gag\"\>", "\[Rule]", "\<\"E\"\>"}], ",", 
   RowBox[{"\<\"gga\"\>", "\[Rule]", "\<\"G\"\>"}], ",", 
   RowBox[{"\<\"ggc\"\>", "\[Rule]", "\<\"G\"\>"}], ",", 
   RowBox[{"\<\"ggg\"\>", "\[Rule]", "\<\"G\"\>"}], ",", 
   RowBox[{"\<\"ggt\"\>", "\[Rule]", "\<\"G\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5381171476300163`*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Note here we will operate directly on the DNA sample rather than first \
converting it to RNA as done in Example 1. The codon rules use \"t\" rather \
than \"u\". In order to apply the codon replacement rules, we first transform \
our DNA sequence into a list of characters using the ",
 StyleBox["Characters",
  FontWeight->"Bold"],
 " function and then ",
 StyleBox["Partition",
  FontWeight->"Bold"],
 " the list into sublists containing three amino acids."
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Partition", "[", 
   RowBox[{
    RowBox[{"Characters", "[", "myDNA", "]"}], ",", "3"}], "]"}], "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x_", ",", "y_", ",", "z_"}], "}"}], "\[RuleDelayed]", 
   RowBox[{"StringJoin", "[", 
    RowBox[{"x", ",", "y", ",", "z"}], "]"}]}]}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"aga\"\>", ",", "\<\"tgg\"\>", ",", "\<\"cgg\"\>", 
   ",", "\<\"cgc\"\>", ",", "\<\"tga\"\>", ",", "\<\"ggg\"\>", 
   ",", "\<\"gtc\"\>", ",", "\<\"ttg\"\>", ",", "\<\"ggg\"\>", 
   ",", "\<\"gct\"\>", ",", "\<\"cta\"\>", ",", "\<\"ggc\"\>", 
   ",", "\<\"cgg\"\>", ",", "\<\"cca\"\>", ",", "\<\"cct\"\>", 
   ",", "\<\"act\"\>", ",", "\<\"ggt\"\>", ",", "\<\"ttg\"\>", 
   ",", "\<\"cag\"\>", ",", "\<\"cgg\"\>", ",", "\<\"aga\"\>", 
   ",", "\<\"cga\"\>", ",", "\<\"cgc\"\>", ",", "\<\"atg\"\>", 
   ",", "\<\"ggg\"\>", ",", "\<\"cct\"\>", ",", "\<\"gcg\"\>", 
   ",", "\<\"caa\"\>", ",", "\<\"tag\"\>", ",", "\<\"gag\"\>", 
   ",", "\<\"tac\"\>", ",", "\<\"gct\"\>", ",", "\<\"gcc\"\>", 
   ",", "\<\"tgg\"\>", ",", "\<\"gag\"\>", ",", "\<\"gcg\"\>", 
   ",", "\<\"tga\"\>", ",", "\<\"cta\"\>", ",", "\<\"gaa\"\>", 
   ",", "\<\"gcg\"\>", ",", "\<\"gaa\"\>", ",", "\<\"gta\"\>", 
   ",", "\<\"gtt\"\>", ",", "\<\"gtg\"\>", ",", "\<\"ggc\"\>", 
   ",", "\<\"gcc\"\>", ",", "\<\"ttt\"\>", ",", "\<\"gca\"\>", 
   ",", "\<\"acc\"\>", ",", "\<\"gcc\"\>", ",", "\<\"tgg\"\>", 
   ",", "\<\"gac\"\>", ",", "\<\"gcc\"\>", ",", "\<\"gcc\"\>", 
   ",", "\<\"gag\"\>", ",", "\<\"tgg\"\>", ",", "\<\"tct\"\>", 
   ",", "\<\"gtg\"\>", ",", "\<\"cag\"\>", ",", "\<\"gtt\"\>", 
   ",", "\<\"cgc\"\>", ",", "\<\"ggg\"\>", ",", "\<\"tcg\"\>", 
   ",", "\<\"ctg\"\>", ",", "\<\"gcg\"\>", ",", "\<\"ggg\"\>", 
   ",", "\<\"gtc\"\>", ",", "\<\"gtg\"\>", ",", "\<\"agg\"\>", 
   ",", "\<\"gag\"\>", ",", "\<\"tgc\"\>", ",", "\<\"gcc\"\>", 
   ",", "\<\"ggg\"\>", ",", "\<\"agc\"\>", ",", "\<\"gga\"\>", 
   ",", "\<\"gat\"\>", ",", "\<\"atg\"\>", ",", "\<\"gag\"\>", 
   ",", "\<\"gga\"\>", ",", "\<\"gat\"\>", ",", "\<\"ggt\"\>", 
   ",", "\<\"tca\"\>", ",", "\<\"gac\"\>", ",", "\<\"cca\"\>", 
   ",", "\<\"gag\"\>", ",", "\<\"cct\"\>", ",", "\<\"cca\"\>", 
   ",", "\<\"gat\"\>", ",", "\<\"gcc\"\>", ",", "\<\"ggg\"\>", 
   ",", "\<\"gag\"\>", ",", "\<\"gac\"\>", ",", "\<\"agc\"\>", 
   ",", "\<\"aag\"\>", ",", "\<\"tcc\"\>", ",", "\<\"gag\"\>", 
   ",", "\<\"aat\"\>", ",", "\<\"ggg\"\>", ",", "\<\"gag\"\>", 
   ",", "\<\"aat\"\>", ",", "\<\"gcg\"\>", ",", "\<\"ccc\"\>", 
   ",", "\<\"atc\"\>", ",", "\<\"tac\"\>", ",", "\<\"tgc\"\>", 
   ",", "\<\"atc\"\>", ",", "\<\"tgc\"\>", ",", "\<\"cgc\"\>", 
   ",", "\<\"aaa\"\>", ",", "\<\"ccg\"\>", ",", "\<\"gac\"\>", 
   ",", "\<\"atc\"\>", ",", "\<\"aac\"\>", ",", "\<\"tgc\"\>", 
   ",", "\<\"ttc\"\>", ",", "\<\"atg\"\>", ",", "\<\"atc\"\>", 
   ",", "\<\"ggg\"\>", ",", "\<\"tgt\"\>", ",", "\<\"gac\"\>", 
   ",", "\<\"aac\"\>", ",", "\<\"tgc\"\>", ",", "\<\"aat\"\>", 
   ",", "\<\"gag\"\>", ",", "\<\"tgg\"\>", ",", "\<\"ttc\"\>", 
   ",", "\<\"cat\"\>", ",", "\<\"ggg\"\>", ",", "\<\"gac\"\>", 
   ",", "\<\"tgc\"\>", ",", "\<\"atc\"\>", ",", "\<\"cgg\"\>", 
   ",", "\<\"atc\"\>", ",", "\<\"act\"\>", ",", "\<\"gag\"\>", 
   ",", "\<\"aag\"\>", ",", "\<\"atg\"\>", ",", "\<\"gcc\"\>", 
   ",", "\<\"aag\"\>", ",", "\<\"gcc\"\>", ",", "\<\"atc\"\>", 
   ",", "\<\"cgg\"\>", ",", "\<\"gag\"\>", ",", "\<\"tgg\"\>", 
   ",", "\<\"tac\"\>", ",", "\<\"tgt\"\>", ",", "\<\"cgg\"\>", 
   ",", "\<\"gag\"\>", ",", "\<\"tgc\"\>", ",", "\<\"aga\"\>", 
   ",", "\<\"gag\"\>", ",", "\<\"aaa\"\>", ",", "\<\"gac\"\>", 
   ",", "\<\"ccc\"\>", ",", "\<\"aag\"\>", ",", "\<\"cta\"\>", 
   ",", "\<\"gag\"\>", ",", "\<\"att\"\>", ",", "\<\"cgc\"\>", 
   ",", "\<\"tat\"\>", ",", "\<\"cgg\"\>", ",", "\<\"cac\"\>", 
   ",", "\<\"aag\"\>", ",", "\<\"aag\"\>", ",", "\<\"tca\"\>", 
   ",", "\<\"cgg\"\>", ",", "\<\"gag\"\>", ",", "\<\"cgg\"\>", 
   ",", "\<\"gat\"\>", ",", "\<\"ggc\"\>", ",", "\<\"aat\"\>", 
   ",", "\<\"gag\"\>", ",", "\<\"cgg\"\>", ",", "\<\"gac\"\>", 
   ",", "\<\"agc\"\>", ",", "\<\"agt\"\>", ",", "\<\"gag\"\>", 
   ",", "\<\"ccc\"\>", ",", "\<\"cgg\"\>", ",", "\<\"gat\"\>", 
   ",", "\<\"gag\"\>", ",", "\<\"ggt\"\>", ",", "\<\"gga\"\>", 
   ",", "\<\"ggg\"\>", ",", "\<\"cgc\"\>", ",", "\<\"aag\"\>", 
   ",", "\<\"agg\"\>", ",", "\<\"cct\"\>", ",", "\<\"gtc\"\>", 
   ",", "\<\"cct\"\>", ",", "\<\"gat\"\>", ",", "\<\"cca\"\>", 
   ",", "\<\"gac\"\>", ",", "\<\"ctg\"\>", ",", "\<\"cag\"\>", 
   ",", "\<\"cgc\"\>", ",", "\<\"cgg\"\>", ",", "\<\"gca\"\>", 
   ",", "\<\"ggg\"\>", ",", "\<\"tca\"\>", ",", "\<\"ggg\"\>", 
   ",", "\<\"aca\"\>", ",", "\<\"ggg\"\>", ",", "\<\"gtt\"\>", 
   ",", "\<\"ggg\"\>", ",", "\<\"gcc\"\>", ",", "\<\"atg\"\>", 
   ",", "\<\"ctt\"\>", ",", "\<\"gct\"\>", ",", "\<\"cgg\"\>", 
   ",", "\<\"ggc\"\>", ",", "\<\"tct\"\>", ",", "\<\"gct\"\>", 
   ",", "\<\"tcg\"\>", ",", "\<\"ccc\"\>", ",", "\<\"cac\"\>", 
   ",", "\<\"aaa\"\>", ",", "\<\"tcc\"\>", ",", "\<\"tct\"\>", 
   ",", "\<\"ccg\"\>", ",", "\<\"cag\"\>", ",", "\<\"ccc\"\>", 
   ",", "\<\"ttg\"\>", ",", "\<\"gtg\"\>", ",", "\<\"gcc\"\>", 
   ",", "\<\"aca\"\>", ",", "\<\"ccc\"\>", ",", "\<\"agc\"\>", 
   ",", "\<\"cag\"\>", ",", "\<\"cat\"\>", ",", "\<\"cac\"\>", 
   ",", "\<\"cag\"\>", ",", "\<\"cag\"\>", ",", "\<\"cag\"\>", 
   ",", "\<\"cag\"\>", ",", "\<\"cag\"\>", ",", "\<\"cag\"\>", 
   ",", "\<\"atc\"\>", ",", "\<\"aaa\"\>", ",", "\<\"cgg\"\>", 
   ",", "\<\"tca\"\>", ",", "\<\"gcc\"\>", ",", "\<\"cgc\"\>", 
   ",", "\<\"atg\"\>", ",", "\<\"tgt\"\>", ",", "\<\"ggt\"\>", 
   ",", "\<\"gag\"\>", ",", "\<\"tgt\"\>", ",", "\<\"gag\"\>", 
   ",", "\<\"gca\"\>", ",", "\<\"tgt\"\>", ",", "\<\"cgg\"\>", 
   ",", "\<\"cgc\"\>", ",", "\<\"act\"\>", ",", "\<\"gag\"\>", 
   ",", "\<\"gac\"\>", ",", "\<\"tgt\"\>", ",", "\<\"ggt\"\>", 
   ",", "\<\"cac\"\>", ",", "\<\"tgt\"\>", ",", "\<\"gat\"\>", 
   ",", "\<\"ttc\"\>", ",", "\<\"tgt\"\>", ",", "\<\"cgg\"\>", 
   ",", "\<\"gac\"\>", ",", "\<\"atg\"\>", ",", "\<\"aag\"\>", 
   ",", "\<\"aag\"\>", ",", "\<\"ttc\"\>", ",", "\<\"ggg\"\>", 
   ",", "\<\"ggc\"\>", ",", "\<\"ccc\"\>", ",", "\<\"aac\"\>", 
   ",", "\<\"aag\"\>", ",", "\<\"atc\"\>", ",", "\<\"cgg\"\>", 
   ",", "\<\"cag\"\>", ",", "\<\"aag\"\>", ",", "\<\"tgc\"\>", 
   ",", "\<\"cgg\"\>", ",", "\<\"ctg\"\>", ",", "\<\"cgc\"\>", 
   ",", "\<\"cag\"\>", ",", "\<\"tgc\"\>", ",", "\<\"cag\"\>", 
   ",", "\<\"ctg\"\>", ",", "\<\"cgg\"\>", ",", "\<\"gcc\"\>", 
   ",", "\<\"cgg\"\>", ",", "\<\"gaa\"\>", ",", "\<\"tcg\"\>", 
   ",", "\<\"tac\"\>", ",", "\<\"aag\"\>", ",", "\<\"tac\"\>", 
   ",", "\<\"ttc\"\>", ",", "\<\"cct\"\>", ",", "\<\"tcc\"\>", 
   ",", "\<\"tcg\"\>", ",", "\<\"ctc\"\>", ",", "\<\"tca\"\>", 
   ",", "\<\"cca\"\>", ",", "\<\"gtg\"\>", ",", "\<\"acg\"\>", 
   ",", "\<\"ccc\"\>", ",", "\<\"tca\"\>", ",", "\<\"gag\"\>", 
   ",", "\<\"tcc\"\>", ",", "\<\"ctg\"\>", ",", "\<\"cca\"\>", 
   ",", "\<\"agg\"\>", ",", "\<\"ccc\"\>", ",", "\<\"cgc\"\>", 
   ",", "\<\"cgg\"\>", ",", "\<\"cca\"\>", ",", "\<\"ctg\"\>", 
   ",", "\<\"ccc\"\>", ",", "\<\"acc\"\>", ",", "\<\"caa\"\>", 
   ",", "\<\"cag\"\>", ",", "\<\"cag\"\>", ",", "\<\"cca\"\>", 
   ",", "\<\"cag\"\>", ",", "\<\"cca\"\>", ",", "\<\"tca\"\>", 
   ",", "\<\"cag\"\>", ",", "\<\"aag\"\>", ",", "\<\"tta\"\>", 
   ",", "\<\"ggg\"\>", ",", "\<\"cgc\"\>", ",", "\<\"atc\"\>", 
   ",", "\<\"cgt\"\>", ",", "\<\"gaa\"\>", ",", "\<\"gat\"\>", 
   ",", "\<\"gag\"\>", ",", "\<\"ggg\"\>", ",", "\<\"gca\"\>", 
   ",", "\<\"gtg\"\>", ",", "\<\"gcg\"\>", ",", "\<\"tca\"\>", 
   ",", "\<\"tca\"\>", ",", "\<\"aca\"\>", ",", "\<\"gtc\"\>", 
   ",", "\<\"aag\"\>", ",", "\<\"gag\"\>", ",", "\<\"cct\"\>", 
   ",", "\<\"cct\"\>", ",", "\<\"gag\"\>", ",", "\<\"gct\"\>", 
   ",", "\<\"aca\"\>", ",", "\<\"gcc\"\>", ",", "\<\"aca\"\>", 
   ",", "\<\"cct\"\>", ",", "\<\"gag\"\>", ",", "\<\"cca\"\>", 
   ",", "\<\"ctc\"\>", ",", "\<\"tca\"\>", ",", "\<\"gat\"\>", 
   ",", "\<\"gag\"\>", ",", "\<\"gac\"\>", ",", "\<\"cta\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.538117184034667*^9},
 Background->None]
}, Open  ]],

Cell["\<\
We can then apply the list of codonRules and then wrap the expression with \
StringJoin\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"Characters", "[", "myDNA", "]"}], ",", "3"}], "]"}], "/.", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x_", ",", "y_", ",", "z_"}], "}"}], "\[RuleDelayed]", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"x", ",", "y", ",", "z"}], "]"}]}]}], "/.", "CodonRules"}], 
  "]"}]], "Input",
 Background->None],

Cell[BoxData["\<\"RWRR_GVLGALGRPPTGLQRRRRMGPAQ_EYAAWEA_\
LEAEVVVGAFATAWDAAEWSVQVRGSLAGVVRECAGSGDMEGDGSDPEPPDAGEDSKSENGENAPIYCICRKPDINCF\
MIGCDNCNEWFHGDCIRITEKMAKAIREWYCRECREKDPKLEIRYRHKKSRERDGNERDSSEPRDEGGGRKRPVPDPD\
LQRRAGSGTGVGAMLARGSASPHKSSPQPLVATPSQHHQQQQQQIKRSARMCGECEACRRTEDCGHCDFCRDMKKFGG\
PNKIRQKCRLRQCQLRARESYKYFPSSLSPVTPSESLPRPRRPLPTQQQPQPSQKLGRIREDEGAVASSTVKEPPEAT\
ATPEPLSDEDL\"\>"], "Output",
 CellChangeTimes->{3.538117256689177*^9},
 Background->None]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["3. Counting bases in a sequence", "Section",
 Background->None],

Cell[TextData[{
 "Suppose we are given a sequence and we would like to determine the \
occurrence frequency of a particular base. We can readily do this calculation \
using the function ",
 ButtonBox["Select",
  BaseStyle->"RefGuideLink"],
 ". ",
 StyleBox["Select",
  FontWeight->"Bold"],
 " takes a list as its first argument and then returns elements in that list \
that match a given criterion. Let us consider a simple example. Suppose we \
are given the list \"attcgta\" and we want to determine the number of times \
the base \"t\" occurs. Our strategy is to first convert the string into a \
list of characters using ",
 StyleBox["Characters",
  FontWeight->"Bold"],
 ", then select out the character \"",
 StyleBox["t",
  FontWeight->"Bold"],
 "\" using the criterion defined as a pure function ",
 Cell[BoxData[
  StyleBox[
   RowBox[{" ", Cell["(#==\"t\")&"]}],
   FontWeight->"Bold"]]],
 ". The number of occurrences is then determined with the function ",
 StyleBox["Length",
  FontWeight->"Bold"],
 " which gives the length of the list returned by ",
 StyleBox["Select",
  FontWeight->"Bold"],
 ". Let us see how this works"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Characters", "[", "\"\<attcgta\>\"", "]"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"#", "\[Equal]", "\"\<t\>\""}], ")"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.538117398033142*^9, 3.538117401313068*^9}},
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"t\"\>", ",", "\<\"t\"\>", ",", "\<\"t\"\>"}], "}"}]], "Output",\

 CellChangeTimes->{{3.5381173946147013`*^9, 3.538117401830941*^9}},
 Background->None]
}, Open  ]],

Cell["\<\
If we wrap the above expression with length we get the number of occurrences \
of the base\"t\"\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Characters", "[", "\"\<attcgta\>\"", "]"}], ",", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#", "\[Equal]", "\"\<t\>\""}], ")"}], "&"}]}], "]"}], 
  "]"}]], "Input",
 Background->None],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.538117447723033*^9},
 Background->None]
}, Open  ]],

Cell["\<\
We can use these ideas to construct a simple function that does the desired \
task\
\>", "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{"numOfOcc", "[", 
   RowBox[{"sequence_String", ",", "base_String"}], "]"}], ":=", 
  RowBox[{"Length", "[", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"Characters", "[", "sequence", "]"}], ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"#", "\[Equal]", "base"}], ")"}], "&"}]}], "]"}], 
   "]"}]}]], "Input",
 Background->None],

Cell["\<\
Let us apply this function to our DNA sequence used earlier to determine the \
number of occurrences of the base \"a\"\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numOfOcc", "[", 
  RowBox[{"myDNA", ",", "\"\<a\>\""}], "]"}]], "Input",
 Background->None],

Cell[BoxData["230"], "Output",
 CellChangeTimes->{3.538117452302507*^9},
 Background->None]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 3: Frequency distribution of bases in a sequence ", "Subsection",
 Background->None],

Cell["\<\
In this example we consider a DNA sequence and then determine the frequency \
distribution of the bases in the sequence. We will make use of the graphical \
tools in the Graphics`Graphics` package. To use these tools we need to load \
the package. This is done with the following command\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"<<", "Graphics`Graphics`"}], ";"}]], "Input",
 CellChangeTimes->{3.538117520181252*^9},
 Background->None],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "obspkg"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(\\\"Graphics`Graphics`\\\"\\)\[NoBreak] is now \
obsolete. The legacy version being loaded may conflict with current \
Mathematica functionality. See the Compatibility Guide for updating \
information. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:Compatibility/Tutorials/Graphics/Graphics\\\", \
ButtonNote -> \\\"General::obspkg\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.538117514921846*^9, 3.53811752065884*^9}},
 Background->None]
}, Open  ]],

Cell["\<\
Next we will make use of our function numOfOcc to determine the frequency of \
the bases in our DNA sequence. We will make this function onto a list of the \
4 bases. This generates the number of occurrences for the individual bases.\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"numOfOcc", "[", 
     RowBox[{"myDNA", ",", "#"}], "]"}], "&"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\""}], 
    "}"}]}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"230", ",", "175", ",", "302", ",", "373"}], "}"}]], "Output",
 CellChangeTimes->{3.5381175126122723`*^9},
 Background->None]
}, Open  ]],

Cell["\<\
To show these results graphically , we can use a Bar Chart. The first \
argument is the list of occurrences\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"numOfOcc", "[", 
       RowBox[{"myDNA", ",", "#"}], "]"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<a\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\""}], 
      "}"}]}], "]"}], ",", 
   RowBox[{"BarLabels", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<a\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{3.538117535371582*^9},
 Background->None],

Cell[BoxData[
 GraphicsBox[{{
    {Hue[0], RectangleBox[{0.6, 0}, {1.4, 230}]}, 
    {GrayLevel[0], 
     LineBox[{{0.6, 0}, {0.6, 230}, {1.4, 230}, {1.4, 0}, {0.6, 0}}]}}, {
    {Hue[0], RectangleBox[{1.6, 0}, {2.4, 175}]}, 
    {GrayLevel[0], 
     LineBox[{{1.6, 0}, {1.6, 175}, {2.4, 175}, {2.4, 0}, {1.6, 0}}]}}, {
    {Hue[0], RectangleBox[{2.6, 0}, {3.4, 302}]}, 
    {GrayLevel[0], 
     LineBox[{{2.6, 0}, {2.6, 302}, {3.4, 302}, {3.4, 0}, {2.6, 0}}]}}, {
    {Hue[0], RectangleBox[{3.6, 0}, {4.4, 373}]}, 
    {GrayLevel[0], 
     LineBox[{{3.6, 0}, {3.6, 373}, {4.4, 373}, {4.4, 0}, {3.6, 0}}]}}},
  AlignmentPoint->Center,
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->None,
  AxesOrigin->{0.39999999999999997`, 0},
  AxesStyle->{},
  Background->None,
  BaseStyle->{},
  BaselinePosition->Automatic,
  ColorOutput->Automatic,
  ContentSelectable->Automatic,
  CoordinatesToolOptions:>Automatic,
  DisplayFunction:>$DisplayFunction,
  Epilog->{},
  FormatType:>TraditionalForm,
  Frame->False,
  FrameLabel->None,
  FrameStyle->{},
  FrameTicks->{{{1., 
      FormBox["\"a\"", TraditionalForm], 0}, {2., 
      FormBox["\"t\"", TraditionalForm], 0}, {3., 
      FormBox["\"c\"", TraditionalForm], 0}, {4., 
      FormBox["\"g\"", TraditionalForm], 0}}, Automatic},
  FrameTicksStyle->{},
  GridLines->None,
  GridLinesStyle->{},
  ImageMargins->0.,
  ImagePadding->All,
  ImageSize->Automatic,
  ImageSizeRaw->Automatic,
  LabelStyle->{},
  Method->Automatic,
  PlotLabel->None,
  PlotRange->{{0.39999999999999997`, 4.6000000000000005`}, All},
  PlotRangeClipping->True,
  PlotRangePadding->Automatic,
  PlotRegion->Automatic,
  PreserveImageOptions->Automatic,
  Prolog->{},
  RotateLabel->True,
  Ticks->{{{1., 
      FormBox["\"a\"", TraditionalForm], 0}, {2., 
      FormBox["\"t\"", TraditionalForm], 0}, {3., 
      FormBox["\"c\"", TraditionalForm], 0}, {4., 
      FormBox["\"g\"", TraditionalForm], 0}}, Automatic},
  TicksStyle->{}]], "Output",
 CellChangeTimes->{3.538117536134268*^9},
 Background->None,
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXetXU1cWPxDkpYO2Ix3EdkoXLpyxaumiqCB5kAQSDJeXQRwBGUahgOMC
FS0tKq+uGW0ZlXGmlA4IGKCElzwSQBRsREAIrwB53LVmPnS+zJ8waz4xuQ9C
iAkxkKu55LBWzr2cu+/ev73P457zu5uAZBbmZF3MLMw9lxkguJxZkJN77kpA
dP5lfRXDBQCXHADAPwMAdr6sPyWLZYCiaC5WYDX6wxH83F1fLuQ9LUltjE9I
akpA4rMyKvpc5nToISPRMPyc4Ypqlbebz/MDi58sAfK6AD94YpeKpFdE8uNs
4UMkPq4KOftldcXvftsdzEv+zaUBlZAwFrjw5FZXWhS/ix8l7BbyeDfE+fe2
D87rYvDLHtt18/3f/OW8oIfL5ffyucx2pjCNdaNpDKj1VwlLHvpSe3iu90+P
Uvm8rqgobmdkdEbB9a+YYQnS2bWgPAKXnhTXH0964DqlRbHbPpnt+XoRCTq4
79rQEhAa1M3VtouZgTf0Pulr9I7MHxlub/EYW0RJGdy5+w/TjiSk/l0BllBM
F7pDOzfwxf3CC3uqX2hIc+9olY0jqUczfesmNFiNr2aiDk0N2BPObZ0xQfae
Zry6P5516d3mKVwUa4Tr8oKofcUGZAx9qexsiI71aZlBQSxRtwtVSoaEx8vd
nmlW6jzYSokwO7z8GR4kQtdS/tPisHDRK2bxIMz0VP6QdypOgsQlPjh5Mn6S
f/jTfV+smnVBdVNddVGIz4+vmK3Azboa5Bb3jw8qXFVaQ9uwpptiMpi3FEBj
gKK+MHwz3BgK2RO8NapZF7UOF9OrUtZIUqL9745qLKPwxMSqms6GJp+uGnFZ
JG4NWBq5PcENzvKSqdDVZpCMpB9N9/t+TI3V+KnHvv/XqQ/8zDQDhk88+tfs
NkSINCYkxEvi45BLSV+2u05rjfvbQu7T0lP/Dt+zVxoRgzQhCNKAJGZ+UPnT
EjhByHjrVEO3750X9nK53Ec8vuBeQsZFeRb799sfza/o8cJif3BOdqs7gxfZ
G8nldDN56Ze/Kgp+HvCZ8GhW2zTQ6aU+JuB9ZyYIc1YvvTLCzZy/Q0Rff7sq
u79cLONwBP3RLNbn4jK5i0qHupFdD/tByTbEbxetuT1APVL6I1t0x21Ug7qh
GkX7N0LmRyXDamu37yIaUl9qTr+4w4oSPpjC3UZRnWCyTpDCuvsC6zqM11KD
SS0WDV7hHMyVqVZ65SFVX04R58ogWCQlTPXsIHu0Uqnk19fXYx/AxEtGREtL
i6nc7pcvX5rKHZNKpaZyfmNjY6Zyn3V2dprKva9QKEzlgru7uw1yPhtwEZ/g
43A3jUOc8uIuK1pYtxriqTrBKfY9iyEmIWJhGI0gnxsReMn49c8A/Ozv749L
/IKQE9XU1MhEa+UOLQCwEBQUZCx3prKysvnMWrmIUQBGQ0JCjOVyS0tLv8td
KyeSAaDvoxxcYqdpHyyTsmIq3Z7jffB5W6WQHVA2YrYP0sszbHBmDVQk93Ei
hX3CSE5WcsWApcFJE8/20hw6jpxOgGkcawgdQoeDE0KH0CF0OK84SawhdAh9
yw5OT/zgge3r8vpLUnsFXG4nL1rQIRAIk/9QNQwW0BVWzSZihl7e60vt+yrF
uOsCTsai21C1oqEqMSLo2uPFFe9t4ZVo4j0hvv3IbLs4l1U6QpK069Jf6/FW
9HDXna2UiPKOl6y4a+CwbGTpHN1bL/zgvXfpeXXYXek45q2Pdqaj/yqL+2HF
MzXpjnXvt2G+e9PJ553M6WZuS3BswsOE+LhGJOFsWIl0yoj2X5d8pH+TMyKm
W2KPJUtn8d+2GWavrcZIEt66s6ab2IP7mSewdx/Ypw4Rf+5bO6ExemhBwtKh
oNNpeUT3WEPoELqzQIfzCoQOoTsodDg4IXQI3UGh02lw4selM4rKzKYkBJGL
2Psm/Q7zmmIRpCz5QqurUruStmeWq9zCXCZJXHyi6jmfwysbxuktos4id7l1
qU1zwSC8xZLQ1qc4N5ABSPuomMvmc19DBm5dppTqqNCJQbUybtZlTrduWif+
lwiaE2M/FCYW/603RNFlCM7qBGuWXnVd/zKNJ1g8JKi7bmnsdMedS90pvEMX
Qm4ah8QS8Qp5WQjdqRewdI81hA6hw8EJoUPoWwE6HJwQOoQOoTvzvGKdUnbS
9FjLbJCzpsyai4gHXuc0abSWQ+AsqbWW37Q4V7qt5Tg4bQquNabYWZJzrdLD
MG2XbtDptKKje6whdAgdDk4I3fGgL5NigImXDANsI32OBD3NuSDZNA84WWwg
JJpCcoRODRheqEqmO/fRu737uSLgiu1ZgPfjmIigcEHrzEq4LHGAFFKEVPmL
UTq6/arBP/elRKYFVj5RYVv1ozNtKaHpHXPWGD4KCUCK/CUQu72nGa+T5XB4
7HwJzlc4QM4oRQ4TkDx3aOd6GkoSo8MLWqeBFl0haEyIqjeWCkqRs0SHw74L
tU9WyDm5+x8vtaaOvpn0Tkr9260v1bnDpazQlI450r+3lrJJ5bw02yKNDQ3N
65jFQHuiC0Od5dHcD79+pgZWEi4pzMek0l/0V+qxOklBHFvG5LAVx0K5SVn3
iW97tkKXUcimwTUIjA2EBCHBcQYhQUi2deplsJZEM4DAPqlvLjZt0JTjmsIt
0d8X68TJeslVGyBOqPIDO1omRAjrdk2JosgRC0yHvbKYKEJNmHIzpSvcibBu
NvGIItBkq66hHQhIdkoUaqUUNzCmEwgg9k/soWq4vg5PsOlsHCrBW9302zGF
hv6Pma30yISmYGeApmBngKZob4rKfgc8XFHt9MX26+ktcbFIQ3xiYmv8CTHn
qmQSX2xZ2To50M4KW+1o/OdHp1f+TaR+qfa462aU8YLZnq+aKV3tYy/hFi8P
FfEP5MsXSJN2f3dMqQcev9RMSuR/ZKfualbqSJN2/24gSje3XtjWu/7bpOD/
+O/+9OBVmYqMqx1f+FK08yJC5Yv1geD57mu1TLHERal7vd3VJndfy2AtKWlw
Afvs2MCQ1vqrRn9ym9XgGny1E9XyGPa32K6Kgre0/9vIlMOdaCyuPSsWS07G
CXo43NMfl8nm8cjZ/62qjfjMPaY2ogLX8JZsbxkVMIiOoQK2w1sKIti57kIT
XZ/C38jfR9sMEKy3giS02pWbtxHgKqG6ujQkqOvNE+4bg7JmjWcnFt1GJITa
bWbXanZlyf9rGy7yVQMwWYNRRYBvZOlibWm1aWKbkvWUHQlr55qAHQi+Y6ig
IIjqAwDUZGMq8JIxILRJxQG5XJ5dXl6OfQATLxnC2tpag5yPZRXLWCmy4Tp+
2bgWP88lx6LL/wFK0gst\
\>"]]
}, Open  ]],

Cell[TextData[{
 "If we wanted, we could make a function that generates a graphical \
representation for given DNA sequence. In this example we make use of the ",
 ButtonBox["Module",
  BaseStyle->"RefGuideLink"],
 " function to construct a self-contained function that generates a bar chart \
for a DNA sequence:"
}], "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"seqBarChart", "[", "sequence_String", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "base", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Get", "[", "\"\<Graphics`Graphics`\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"numOfOcc", "[", "base_", "]"}], ":=", 
       RowBox[{"Length", "[", 
        RowBox[{"Select", "[", 
         RowBox[{
          RowBox[{"Characters", "[", "sequence", "]"}], ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"#", "\[Equal]", "base"}], ")"}], "&"}]}], "]"}], "]"}]}],
       ";", 
      RowBox[{"BarChart", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"numOfOcc", "[", "#", "]"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<a\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", ",", 
            "\"\<g\>\""}], "}"}]}], "]"}], ",", 
        RowBox[{"BarLabels", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<a\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\""}],
           "}"}]}]}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5381176002823477`*^9, 3.538117603069374*^9}},
 Background->None],

Cell["\<\
To use this function we simply supply the DNA sequence (it must be a string) \
as an argument. There are many ways to embellish this plot ,but for \
simplicity I have given the bare essentials.\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"seqBarChart", "[", "myDNA", "]"}]], "Input",
 CellChangeTimes->{3.538117644581244*^9},
 Background->None],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "obspkg"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(\\\"Graphics`Graphics`\\\"\\)\[NoBreak] is now \
obsolete. The legacy version being loaded may conflict with current \
Mathematica functionality. See the Compatibility Guide for updating \
information. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:Compatibility/Tutorials/Graphics/Graphics\\\", \
ButtonNote -> \\\"General::obspkg\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.5381176411350937`*^9, 3.5381176451543493`*^9}},
 Background->None],

Cell[BoxData[
 GraphicsBox[{{
    {Hue[0], RectangleBox[{0.6, 0}, {1.4, 230}]}, 
    {GrayLevel[0], 
     LineBox[{{0.6, 0}, {0.6, 230}, {1.4, 230}, {1.4, 0}, {0.6, 0}}]}}, {
    {Hue[0], RectangleBox[{1.6, 0}, {2.4, 175}]}, 
    {GrayLevel[0], 
     LineBox[{{1.6, 0}, {1.6, 175}, {2.4, 175}, {2.4, 0}, {1.6, 0}}]}}, {
    {Hue[0], RectangleBox[{2.6, 0}, {3.4, 302}]}, 
    {GrayLevel[0], 
     LineBox[{{2.6, 0}, {2.6, 302}, {3.4, 302}, {3.4, 0}, {2.6, 0}}]}}, {
    {Hue[0], RectangleBox[{3.6, 0}, {4.4, 373}]}, 
    {GrayLevel[0], 
     LineBox[{{3.6, 0}, {3.6, 373}, {4.4, 373}, {4.4, 0}, {3.6, 0}}]}}},
  AlignmentPoint->Center,
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->None,
  AxesOrigin->{0.39999999999999997`, 0},
  AxesStyle->{},
  Background->None,
  BaseStyle->{},
  BaselinePosition->Automatic,
  ColorOutput->Automatic,
  ContentSelectable->Automatic,
  CoordinatesToolOptions:>Automatic,
  DisplayFunction:>$DisplayFunction,
  Epilog->{},
  FormatType:>TraditionalForm,
  Frame->False,
  FrameLabel->None,
  FrameStyle->{},
  FrameTicks->{{{1., 
      FormBox["\"a\"", TraditionalForm], 0}, {2., 
      FormBox["\"t\"", TraditionalForm], 0}, {3., 
      FormBox["\"c\"", TraditionalForm], 0}, {4., 
      FormBox["\"g\"", TraditionalForm], 0}}, Automatic},
  FrameTicksStyle->{},
  GridLines->None,
  GridLinesStyle->{},
  ImageMargins->0.,
  ImagePadding->All,
  ImageSize->Automatic,
  ImageSizeRaw->Automatic,
  LabelStyle->{},
  Method->Automatic,
  PlotLabel->None,
  PlotRange->{{0.39999999999999997`, 4.6000000000000005`}, All},
  PlotRangeClipping->True,
  PlotRangePadding->Automatic,
  PlotRegion->Automatic,
  PreserveImageOptions->Automatic,
  Prolog->{},
  RotateLabel->True,
  Ticks->{{{1., 
      FormBox["\"a\"", TraditionalForm], 0}, {2., 
      FormBox["\"t\"", TraditionalForm], 0}, {3., 
      FormBox["\"c\"", TraditionalForm], 0}, {4., 
      FormBox["\"g\"", TraditionalForm], 0}}, Automatic},
  TicksStyle->{}]], "Output",
 CellChangeTimes->{3.5381176452563887`*^9},
 Background->None,
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXetXU1cWPxDkpYO2Ix3EdkoXLpyxaumiqCB5kAQSDJeXQRwBGUahgOMC
FS0tKq+uGW0ZlXGmlA4IGKCElzwSQBRsREAIrwB53LVmPnS+zJ8waz4xuQ9C
iAkxkKu55LBWzr2cu+/ev73P457zu5uAZBbmZF3MLMw9lxkguJxZkJN77kpA
dP5lfRXDBQCXHADAPwMAdr6sPyWLZYCiaC5WYDX6wxH83F1fLuQ9LUltjE9I
akpA4rMyKvpc5nToISPRMPyc4Ypqlbebz/MDi58sAfK6AD94YpeKpFdE8uNs
4UMkPq4KOftldcXvftsdzEv+zaUBlZAwFrjw5FZXWhS/ix8l7BbyeDfE+fe2
D87rYvDLHtt18/3f/OW8oIfL5ffyucx2pjCNdaNpDKj1VwlLHvpSe3iu90+P
Uvm8rqgobmdkdEbB9a+YYQnS2bWgPAKXnhTXH0964DqlRbHbPpnt+XoRCTq4
79rQEhAa1M3VtouZgTf0Pulr9I7MHxlub/EYW0RJGdy5+w/TjiSk/l0BllBM
F7pDOzfwxf3CC3uqX2hIc+9olY0jqUczfesmNFiNr2aiDk0N2BPObZ0xQfae
Zry6P5516d3mKVwUa4Tr8oKofcUGZAx9qexsiI71aZlBQSxRtwtVSoaEx8vd
nmlW6jzYSokwO7z8GR4kQtdS/tPisHDRK2bxIMz0VP6QdypOgsQlPjh5Mn6S
f/jTfV+smnVBdVNddVGIz4+vmK3Azboa5Bb3jw8qXFVaQ9uwpptiMpi3FEBj
gKK+MHwz3BgK2RO8NapZF7UOF9OrUtZIUqL9745qLKPwxMSqms6GJp+uGnFZ
JG4NWBq5PcENzvKSqdDVZpCMpB9N9/t+TI3V+KnHvv/XqQ/8zDQDhk88+tfs
NkSINCYkxEvi45BLSV+2u05rjfvbQu7T0lP/Dt+zVxoRgzQhCNKAJGZ+UPnT
EjhByHjrVEO3750X9nK53Ec8vuBeQsZFeRb799sfza/o8cJif3BOdqs7gxfZ
G8nldDN56Ze/Kgp+HvCZ8GhW2zTQ6aU+JuB9ZyYIc1YvvTLCzZy/Q0Rff7sq
u79cLONwBP3RLNbn4jK5i0qHupFdD/tByTbEbxetuT1APVL6I1t0x21Ug7qh
GkX7N0LmRyXDamu37yIaUl9qTr+4w4oSPpjC3UZRnWCyTpDCuvsC6zqM11KD
SS0WDV7hHMyVqVZ65SFVX04R58ogWCQlTPXsIHu0Uqnk19fXYx/AxEtGREtL
i6nc7pcvX5rKHZNKpaZyfmNjY6Zyn3V2dprKva9QKEzlgru7uw1yPhtwEZ/g
43A3jUOc8uIuK1pYtxriqTrBKfY9iyEmIWJhGI0gnxsReMn49c8A/Ozv749L
/IKQE9XU1MhEa+UOLQCwEBQUZCx3prKysvnMWrmIUQBGQ0JCjOVyS0tLv8td
KyeSAaDvoxxcYqdpHyyTsmIq3Z7jffB5W6WQHVA2YrYP0sszbHBmDVQk93Ei
hX3CSE5WcsWApcFJE8/20hw6jpxOgGkcawgdQoeDE0KH0CF0OK84SawhdAh9
yw5OT/zgge3r8vpLUnsFXG4nL1rQIRAIk/9QNQwW0BVWzSZihl7e60vt+yrF
uOsCTsai21C1oqEqMSLo2uPFFe9t4ZVo4j0hvv3IbLs4l1U6QpK069Jf6/FW
9HDXna2UiPKOl6y4a+CwbGTpHN1bL/zgvXfpeXXYXek45q2Pdqaj/yqL+2HF
MzXpjnXvt2G+e9PJ553M6WZuS3BswsOE+LhGJOFsWIl0yoj2X5d8pH+TMyKm
W2KPJUtn8d+2GWavrcZIEt66s6ab2IP7mSewdx/Ypw4Rf+5bO6ExemhBwtKh
oNNpeUT3WEPoELqzQIfzCoQOoTsodDg4IXQI3UGh02lw4selM4rKzKYkBJGL
2Psm/Q7zmmIRpCz5QqurUruStmeWq9zCXCZJXHyi6jmfwysbxuktos4id7l1
qU1zwSC8xZLQ1qc4N5ABSPuomMvmc19DBm5dppTqqNCJQbUybtZlTrduWif+
lwiaE2M/FCYW/603RNFlCM7qBGuWXnVd/zKNJ1g8JKi7bmnsdMedS90pvEMX
Qm4ah8QS8Qp5WQjdqRewdI81hA6hw8EJoUPoWwE6HJwQOoQOoTvzvGKdUnbS
9FjLbJCzpsyai4gHXuc0abSWQ+AsqbWW37Q4V7qt5Tg4bQquNabYWZJzrdLD
MG2XbtDptKKje6whdAgdDk4I3fGgL5NigImXDANsI32OBD3NuSDZNA84WWwg
JJpCcoRODRheqEqmO/fRu737uSLgiu1ZgPfjmIigcEHrzEq4LHGAFFKEVPmL
UTq6/arBP/elRKYFVj5RYVv1ozNtKaHpHXPWGD4KCUCK/CUQu72nGa+T5XB4
7HwJzlc4QM4oRQ4TkDx3aOd6GkoSo8MLWqeBFl0haEyIqjeWCkqRs0SHw74L
tU9WyDm5+x8vtaaOvpn0Tkr9260v1bnDpazQlI450r+3lrJJ5bw02yKNDQ3N
65jFQHuiC0Od5dHcD79+pgZWEi4pzMek0l/0V+qxOklBHFvG5LAVx0K5SVn3
iW97tkKXUcimwTUIjA2EBCHBcQYhQUi2deplsJZEM4DAPqlvLjZt0JTjmsIt
0d8X68TJeslVGyBOqPIDO1omRAjrdk2JosgRC0yHvbKYKEJNmHIzpSvcibBu
NvGIItBkq66hHQhIdkoUaqUUNzCmEwgg9k/soWq4vg5PsOlsHCrBW9302zGF
hv6Pma30yISmYGeApmBngKZob4rKfgc8XFHt9MX26+ktcbFIQ3xiYmv8CTHn
qmQSX2xZ2To50M4KW+1o/OdHp1f+TaR+qfa462aU8YLZnq+aKV3tYy/hFi8P
FfEP5MsXSJN2f3dMqQcev9RMSuR/ZKfualbqSJN2/24gSje3XtjWu/7bpOD/
+O/+9OBVmYqMqx1f+FK08yJC5Yv1geD57mu1TLHERal7vd3VJndfy2AtKWlw
Afvs2MCQ1vqrRn9ym9XgGny1E9XyGPa32K6Kgre0/9vIlMOdaCyuPSsWS07G
CXo43NMfl8nm8cjZ/62qjfjMPaY2ogLX8JZsbxkVMIiOoQK2w1sKIti57kIT
XZ/C38jfR9sMEKy3giS02pWbtxHgKqG6ujQkqOvNE+4bg7JmjWcnFt1GJITa
bWbXanZlyf9rGy7yVQMwWYNRRYBvZOlibWm1aWKbkvWUHQlr55qAHQi+Y6ig
IIjqAwDUZGMq8JIxILRJxQG5XJ5dXl6OfQATLxnC2tpag5yPZRXLWCmy4Tp+
2bgWP88lx6LL/wFK0gst\
\>"]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4. More functions for manipulating strings", "Section",
 Background->None],

Cell[TextData[{
 "If we are given a sequence that contains both upper case letters and lower \
case letters , there is a simple function that can convert the sequence to a \
desired  form. The functions are ",
 ButtonBox["ToUpperCase",
  BaseStyle->"RefGuideLink"],
 " and ToLowerCase . Let's demonstrate how these functions work on our string \
",
 StyleBox["nucstring ",
  FontWeight->"Bold"]
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"ToUpperCase", "[", "nucstring", "]"}], ",", 
   RowBox[{"ToLowerCase", "[", "nucstring", "]"}]}], "}"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"ACCTAGGGCCTTACGA\"\>", ",", "\<\"acctagggccttacga\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.538117655859373*^9},
 Background->None]
}, Open  ]],

Cell["\<\
Note that these functions are Listable. That is, they can be thread over \
lists of Characters as shown below\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToUpperCase", "[", 
  RowBox[{"Characters", "[", "nucstring", "]"}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"A\"\>", ",", "\<\"C\"\>", ",", "\<\"C\"\>", ",", "\<\"T\"\>", 
   ",", "\<\"A\"\>", ",", "\<\"G\"\>", ",", "\<\"G\"\>", ",", "\<\"G\"\>", 
   ",", "\<\"C\"\>", ",", "\<\"C\"\>", ",", "\<\"T\"\>", ",", "\<\"T\"\>", 
   ",", "\<\"A\"\>", ",", "\<\"C\"\>", ",", "\<\"G\"\>", ",", "\<\"A\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.5381176579406776`*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Suppose we want to determine the positions of a particular character in a \
string. The appropriate function is called ",
 ButtonBox["StringPosition",
  BaseStyle->"RefGuideLink"],
 ". The first argument of ",
 StyleBox["StringPosition",
  FontWeight->"Bold"],
 " is the string under investigation, the second argument is the sublist you \
are seeking. Here is an example for the character \"a in nucstring. The \
output is a list of sublists that give the starting and end position of the \
sublist"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringPosition", "[", 
  RowBox[{"nucstring", ",", "\"\<a\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.538117746086442*^9, 3.53811776210524*^9}},
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"16", ",", "16"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.5381176813523397`*^9, {3.538117748067038*^9, 3.538117762902945*^9}},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Since our sublist is a single character, the output is a sublist with \
identical indices. If we want the beginning position we can  Map the function \
",
 ButtonBox["First",
  BaseStyle->"RefGuideLink"],
 " onto each sublist"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"First", "[", "#", "]"}], "&"}], ",", 
   RowBox[{"StringPosition", "[", 
    RowBox[{"nucstring", ",", "\"\<a\>\""}], "]"}]}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "5", ",", "16"}], "}"}]], "Output",
 CellChangeTimes->{3.538117878292729*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Alternatively, we can ",
 ButtonBox["Flatten",
  BaseStyle->"RefGuideLink"],
 " all sublists and then use ",
 ButtonBox["Union",
  BaseStyle->"RefGuideLink"],
 " to pick out the common elements"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{"Flatten", "[", 
   RowBox[{"StringPosition", "[", 
    RowBox[{"nucstring", ",", "\"\<a\>\""}], "]"}], "]"}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "5", ",", "16"}], "}"}]], "Output",
 CellChangeTimes->{3.538117886777294*^9},
 Background->None]
}, Open  ]],

Cell["We can also devise a replacement rule to do the task:", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringPosition", "[", 
   RowBox[{"nucstring", ",", "\"\<a\>\""}], "]"}], "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x_", ",", "y_"}], "}"}], "\[Rule]", "x"}]}]], "Input",
 CellChangeTimes->{{3.5381179344104967`*^9, 3.5381179405971193`*^9}},
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "5", ",", "16"}], "}"}]], "Output",
 CellChangeTimes->{{3.538117912827713*^9, 3.5381179412773438`*^9}},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "The last three examples illustrate once again that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " allows one to solve the problem in  a variety of ways."
}], "Text",
 Background->None],

Cell[TextData[{
 "Suppose we want to remove improper characters from a sequence. If we know \
the location we can use the function ",
 ButtonBox["StringDrop",
  BaseStyle->"RefGuideLink"],
 " to accomplish the task. Consider our protein sequence"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"proteinString", "=", 
  "\"\<CLKJLDiCXLklJDMXLKJdLmxLEIKXMDLKJcMDLKJXMeNNlB\>\""}]], "Input",
 Background->None],

Cell[BoxData["\<\"CLKJLDiCXLklJDMXLKJdLmxLEIKXMDLKJcMDLKJXMeNNlB\"\>"], \
"Output",
 CellChangeTimes->{3.538117974540609*^9},
 Background->None]
}, Open  ]],

Cell["Let us assume that the improper characters are ", "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{"improperChar", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<B\>\"", ",", "\"\<J\>\"", ",", "\"\<N\>\"", ",", "\"\<O\>\"", ",", 
     "\"\<U\>\"", ",", "\"\<b\>\"", ",", "\"\<j\>\"", ",", "\"\<n\>\"", ",", 
     "\"\<o\>\"", ",", "\"\<u\>\""}], "}"}]}], ";"}]], "Input",
 Background->None],

Cell[TextData[{
 "We can use ",
 StyleBox["StringPosition",
  FontWeight->"Bold"],
 " to find their location. Since any given character may appear more than \
once in the string, we need to flatten the sublists at level 1. This gives \
then the positions for the rogue characters"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loc", "=", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"StringPosition", "[", 
        RowBox[{"proteinString", ",", "#"}], "]"}], "&"}], ",", 
      "improperChar"}], "]"}], ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5381180219432993`*^9, 3.538118064982677*^9}},
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"46", ",", "46"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"19", ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"33", ",", "33"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"39", ",", "39"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"43", ",", "43"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"44", ",", "44"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5381180196502542`*^9, 3.5381180303237753`*^9}, 
   3.5381180654453487`*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Then we can use ",
 ButtonBox["StringReplacePart",
  BaseStyle->"RefGuideLink"],
 ", using and empty character as the second argument."
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplacePart", "[", 
  RowBox[{"proteinString", ",", "\"\<\>\"", ",", "loc"}], "]"}]], "Input",
 Background->None],

Cell[BoxData["\<\"CLKLDiCXLklDMXLKdLmxLEIKXMDLKcMDLKXMel\"\>"], "Output",
 CellChangeTimes->{3.538118163147031*^9},
 Background->None]
}, Open  ]],

Cell["\<\
We can insert \"gaps into the sequence by using a Null character\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplacePart", "[", 
  RowBox[{"proteinString", ",", "\"\< \>\"", ",", "loc"}], "]"}]], "Input",
 Background->None],

Cell[BoxData["\<\"CLK LDiCXLkl DMXLK dLmxLEIKXMDLK cMDLK XMe  l \"\>"], \
"Output",
 CellChangeTimes->{3.538118167788453*^9},
 Background->None]
}, Open  ]],

Cell["For comparison, here is the original protein sequence", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData["proteinString"], "Input",
 Background->None],

Cell[BoxData["\<\"CLKJLDiCXLklJDMXLKJdLmxLEIKXMDLKJcMDLKJXMeNNlB\"\>"], \
"Output",
 CellChangeTimes->{3.538118184558278*^9},
 Background->None]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 4 : Application of ToUpperCase", "Subsection",
 Background->None],

Cell["\<\
In this example we have a string consisting of UpperCase and LowerCase \
characters. We would like to reverse the character case: change UpperCase to \
LowerCase and LowerCase to UpperCase. Here is the string\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myString", "=", 
  "\"\<VRNrIAelslrrFMVALILdIKrTPgNKPriacmICDIDtYIvEa\>\""}]], "Input",
 Background->None],

Cell[BoxData["\<\"VRNrIAelslrrFMVALILdIKrTPgNKPriacmICDIDtYIvEa\"\>"], \
"Output",
 CellChangeTimes->{3.538118188513164*^9},
 Background->None]
}, Open  ]],

Cell["\<\
If we attempt to use the function ToUpperCase, then we lose all reference to \
what were the initial LowerCase characters\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myStringUC", "=", 
  RowBox[{"ToUpperCase", "[", "myString", "]"}]}]], "Input",
 Background->None],

Cell[BoxData["\<\"VRNRIAELSLRRFMVALILDIKRTPGNKPRIACMICDIDTYIVEA\"\>"], \
"Output",
 CellChangeTimes->{3.538118319712902*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "One way to avoid this problem is to define a set of replacement rules and \
then use the ",
 StyleBox["StringReplace",
  FontWeight->"Bold"],
 " function. The function ",
 ButtonBox["CharacterRange",
  BaseStyle->"RefGuideLink"],
 " defines a sequence of characters. Thus all the UpperCase characters in the \
alphabet are"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CharacterRange", "[", 
  RowBox[{"\"\<A\>\"", ",", "\"\<Z\>\""}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"A\"\>", ",", "\<\"B\"\>", ",", "\<\"C\"\>", ",", "\<\"D\"\>", 
   ",", "\<\"E\"\>", ",", "\<\"F\"\>", ",", "\<\"G\"\>", ",", "\<\"H\"\>", 
   ",", "\<\"I\"\>", ",", "\<\"J\"\>", ",", "\<\"K\"\>", ",", "\<\"L\"\>", 
   ",", "\<\"M\"\>", ",", "\<\"N\"\>", ",", "\<\"O\"\>", ",", "\<\"P\"\>", 
   ",", "\<\"Q\"\>", ",", "\<\"R\"\>", ",", "\<\"S\"\>", ",", "\<\"T\"\>", 
   ",", "\<\"U\"\>", ",", "\<\"V\"\>", ",", "\<\"W\"\>", ",", "\<\"X\"\>", 
   ",", "\<\"Y\"\>", ",", "\<\"Z\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.538118325003734*^9},
 Background->None]
}, Open  ]],

Cell["Likewise the LowerCase characters are", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CharacterRange", "[", 
  RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", ",", "\<\"h\"\>", 
   ",", "\<\"i\"\>", ",", "\<\"j\"\>", ",", "\<\"k\"\>", ",", "\<\"l\"\>", 
   ",", "\<\"m\"\>", ",", "\<\"n\"\>", ",", "\<\"o\"\>", ",", "\<\"p\"\>", 
   ",", "\<\"q\"\>", ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"v\"\>", ",", "\<\"w\"\>", ",", "\<\"x\"\>", 
   ",", "\<\"y\"\>", ",", "\<\"z\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.5381183287899513`*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Here is a rule that replaces UpperCase characters with LowerCase \
characters. We have made use of the function ",
 ButtonBox["Thread",
  BaseStyle->"RefGuideLink"],
 " to construct the sequence of rules."
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UCtoLCRule", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<A\>\"", ",", "\"\<Z\>\""}], "]"}], "->", 
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}]}], "]"}]}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"A\"\>", "\[Rule]", "\<\"a\"\>"}], ",", 
   RowBox[{"\<\"B\"\>", "\[Rule]", "\<\"b\"\>"}], ",", 
   RowBox[{"\<\"C\"\>", "\[Rule]", "\<\"c\"\>"}], ",", 
   RowBox[{"\<\"D\"\>", "\[Rule]", "\<\"d\"\>"}], ",", 
   RowBox[{"\<\"E\"\>", "\[Rule]", "\<\"e\"\>"}], ",", 
   RowBox[{"\<\"F\"\>", "\[Rule]", "\<\"f\"\>"}], ",", 
   RowBox[{"\<\"G\"\>", "\[Rule]", "\<\"g\"\>"}], ",", 
   RowBox[{"\<\"H\"\>", "\[Rule]", "\<\"h\"\>"}], ",", 
   RowBox[{"\<\"I\"\>", "\[Rule]", "\<\"i\"\>"}], ",", 
   RowBox[{"\<\"J\"\>", "\[Rule]", "\<\"j\"\>"}], ",", 
   RowBox[{"\<\"K\"\>", "\[Rule]", "\<\"k\"\>"}], ",", 
   RowBox[{"\<\"L\"\>", "\[Rule]", "\<\"l\"\>"}], ",", 
   RowBox[{"\<\"M\"\>", "\[Rule]", "\<\"m\"\>"}], ",", 
   RowBox[{"\<\"N\"\>", "\[Rule]", "\<\"n\"\>"}], ",", 
   RowBox[{"\<\"O\"\>", "\[Rule]", "\<\"o\"\>"}], ",", 
   RowBox[{"\<\"P\"\>", "\[Rule]", "\<\"p\"\>"}], ",", 
   RowBox[{"\<\"Q\"\>", "\[Rule]", "\<\"q\"\>"}], ",", 
   RowBox[{"\<\"R\"\>", "\[Rule]", "\<\"r\"\>"}], ",", 
   RowBox[{"\<\"S\"\>", "\[Rule]", "\<\"s\"\>"}], ",", 
   RowBox[{"\<\"T\"\>", "\[Rule]", "\<\"t\"\>"}], ",", 
   RowBox[{"\<\"U\"\>", "\[Rule]", "\<\"u\"\>"}], ",", 
   RowBox[{"\<\"V\"\>", "\[Rule]", "\<\"v\"\>"}], ",", 
   RowBox[{"\<\"W\"\>", "\[Rule]", "\<\"w\"\>"}], ",", 
   RowBox[{"\<\"X\"\>", "\[Rule]", "\<\"x\"\>"}], ",", 
   RowBox[{"\<\"Y\"\>", "\[Rule]", "\<\"y\"\>"}], ",", 
   RowBox[{"\<\"Z\"\>", "\[Rule]", "\<\"z\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.538118336522303*^9},
 Background->None]
}, Open  ]],

Cell["Here is a similar rule that does the reverse", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LCtoUCRule", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}], "->", 
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<A\>\"", ",", "\"\<Z\>\""}], "]"}]}], "]"}]}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "\<\"A\"\>"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "\<\"B\"\>"}], ",", 
   RowBox[{"\<\"c\"\>", "\[Rule]", "\<\"C\"\>"}], ",", 
   RowBox[{"\<\"d\"\>", "\[Rule]", "\<\"D\"\>"}], ",", 
   RowBox[{"\<\"e\"\>", "\[Rule]", "\<\"E\"\>"}], ",", 
   RowBox[{"\<\"f\"\>", "\[Rule]", "\<\"F\"\>"}], ",", 
   RowBox[{"\<\"g\"\>", "\[Rule]", "\<\"G\"\>"}], ",", 
   RowBox[{"\<\"h\"\>", "\[Rule]", "\<\"H\"\>"}], ",", 
   RowBox[{"\<\"i\"\>", "\[Rule]", "\<\"I\"\>"}], ",", 
   RowBox[{"\<\"j\"\>", "\[Rule]", "\<\"J\"\>"}], ",", 
   RowBox[{"\<\"k\"\>", "\[Rule]", "\<\"K\"\>"}], ",", 
   RowBox[{"\<\"l\"\>", "\[Rule]", "\<\"L\"\>"}], ",", 
   RowBox[{"\<\"m\"\>", "\[Rule]", "\<\"M\"\>"}], ",", 
   RowBox[{"\<\"n\"\>", "\[Rule]", "\<\"N\"\>"}], ",", 
   RowBox[{"\<\"o\"\>", "\[Rule]", "\<\"O\"\>"}], ",", 
   RowBox[{"\<\"p\"\>", "\[Rule]", "\<\"P\"\>"}], ",", 
   RowBox[{"\<\"q\"\>", "\[Rule]", "\<\"Q\"\>"}], ",", 
   RowBox[{"\<\"r\"\>", "\[Rule]", "\<\"R\"\>"}], ",", 
   RowBox[{"\<\"s\"\>", "\[Rule]", "\<\"S\"\>"}], ",", 
   RowBox[{"\<\"t\"\>", "\[Rule]", "\<\"T\"\>"}], ",", 
   RowBox[{"\<\"u\"\>", "\[Rule]", "\<\"U\"\>"}], ",", 
   RowBox[{"\<\"v\"\>", "\[Rule]", "\<\"V\"\>"}], ",", 
   RowBox[{"\<\"w\"\>", "\[Rule]", "\<\"W\"\>"}], ",", 
   RowBox[{"\<\"x\"\>", "\[Rule]", "\<\"X\"\>"}], ",", 
   RowBox[{"\<\"y\"\>", "\[Rule]", "\<\"Y\"\>"}], ",", 
   RowBox[{"\<\"z\"\>", "\[Rule]", "\<\"Z\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.538118340874185*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Next we use the ",
 StyleBox["StringReplace",
  FontWeight->"Bold"],
 " function and as the second argument we ",
 StyleBox["Join",
  FontWeight->"Bold"],
 " the two sets of rules:"
}], "Text",
 CellChangeTimes->{{3.5381183469384527`*^9, 3.538118350947618*^9}},
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplace", "[", 
  RowBox[{"myString", ",", 
   RowBox[{"Join", "[", 
    RowBox[{"UCtoLCRule", ",", "LCtoUCRule"}], "]"}]}], "]"}]], "Input",
 Background->None],

Cell[BoxData["\<\"vrnRiaELSLRRfmvalilDikRtpGnkpRIACMicdidTyiVeA\"\>"], \
"Output",
 CellChangeTimes->{3.538118353585886*^9},
 Background->None]
}, Open  ]],

Cell["\<\
If we compare with the original string it is clear we have achieved the \
desired result.\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData["myString"], "Input",
 Background->None],

Cell[BoxData["\<\"VRNrIAelslrrFMVALILdIKrTPgNKPriacmICDIDtYIvEa\"\>"], \
"Output",
 CellChangeTimes->{3.538118434618865*^9},
 Background->None]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["5. Generating a random nucleotide", "Section",
 Background->None],

Cell["Consider the following set of bases", "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{"bases", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\"", ",", "\"\<t\>\""}], 
    "}"}]}], ";"}]], "Input",
 Background->None],

Cell[TextData[{
 "We can use ",
 ButtonBox["Random",
  BaseStyle->"RefGuideLink"],
 " to generate a random integer between 1 and 4 as follows"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Random", "[", 
  RowBox[{"Integer", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}]}], "]"}]], "Input",
 Background->None],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.538118451682452*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Then we use the ",
 ButtonBox["Part",
  BaseStyle->"RefGuideLink"],
 " ([[]] function to extract a base from a base list"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bases", "[", 
  RowBox[{"[", 
   RowBox[{"Random", "[", 
    RowBox[{"Integer", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}], "]"}]], "Input",
 Background->None],

Cell[BoxData["\<\"t\"\>"], "Output",
 CellChangeTimes->{3.538118456844516*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Suppose we want a sequence with 10 bases. We use ",
 StyleBox["Table",
  FontWeight->"Bold"],
 " to generate 10 random copies, Please review the syntax we used for ",
 ButtonBox["Table",
  BaseStyle->"RefGuideLink"],
 " to generate copies."
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"bases", "[", 
    RowBox[{"[", 
     RowBox[{"Random", "[", 
      RowBox[{"Integer", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}], "]"}], ",", 
   RowBox[{"{", "10", "}"}]}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"t\"\>", ",", "\<\"g\"\>", ",", "\<\"t\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"c\"\>", ",", "\<\"t\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"c\"\>", ",", "\<\"c\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.538118461934167*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "If we wrap the above with ",
 StyleBox["StringJoin",
  FontWeight->"Bold"],
 " we have our sequence"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"bases", "[", 
     RowBox[{"[", 
      RowBox[{"Random", "[", 
       RowBox[{"Integer", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}], "]"}], ",", 
    RowBox[{"{", "10", "}"}]}], "]"}], "]"}]], "Input",
 Background->None],

Cell[BoxData["\<\"accccactca\"\>"], "Output",
 CellChangeTimes->{3.538118470453352*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Finally, we can construct a function (using the above expression) that \
takes an integer as an argument. Note that the variable ",
 StyleBox["n",
  FontWeight->"Bold"],
 " is pattern matched and our function will only work if the input is an \
integer."
}], "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomDNA", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"StringJoin", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"bases", "[", 
      RowBox[{"[", 
       RowBox[{"Random", "[", 
        RowBox[{"Integer", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"{", "n", "}"}]}], "]"}], "]"}]}]], "Input",
 Background->None],

Cell["\<\
Let us test out our function by generating a sequence with 50 randomly \
selected bases\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randomDNA", "[", "50", "]"}]], "Input",
 Background->None],

Cell[BoxData["\<\"agtcattagggcgcttcacggaaacgtagataaaaccgattagaaagtct\"\>"], \
"Output",
 CellChangeTimes->{3.538118489867811*^9},
 Background->None]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 5: Statistics on DNA sequences", "Subsection",
 Background->None],

Cell[TextData[{
 "In this section we consider a set of DNA sequences and then ask how do \
these sequences differ from each other, and then quantify that difference. \
Let us first generate a set of random DNA sequences using our previous \
function. The sequences will be called ",
 StyleBox["DNAsequence[i]",
  FontWeight->"Bold"],
 ", i=1,2,\[Ellipsis]4"
}], "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{"bases", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\"", ",", "\"\<t\>\""}], 
    "}"}]}], ";", 
  RowBox[{
   RowBox[{"randomDNA", "[", "n_Integer", "]"}], ":=", 
   RowBox[{"StringJoin", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"bases", "[", 
       RowBox[{"[", 
        RowBox[{"Random", "[", 
         RowBox[{"Integer", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"{", "n", "}"}]}], "]"}], "]"}]}]}]], "Input",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"DNAsequence", "[", "i", "]"}], "=", 
    RowBox[{"randomDNA", "[", "20", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "4"}], "}"}]}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"gtgtcattgatctgagaact\"\>", ",", "\<\"cagtccttgtacgagttagt\"\>",
    ",", "\<\"cgcggacattggccagtgtc\"\>", 
   ",", "\<\"caatacgatgagtcctacgt\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.5381185790686007`*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "We can readily pick out an base from a given sequence using ",
 StyleBox["StringTake",
  FontWeight->"Bold"]
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringTake", "[", 
  RowBox[{
   RowBox[{"DNAsequence", "[", "1", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}]}], "]"}]], "Input",
 Background->None],

Cell[BoxData["\<\"g\"\>"], "Output",
 CellChangeTimes->{3.538118605464148*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "To determine the number of bases at a given position that are equal in a \
given pair of DNA sequences, we use ",
 ButtonBox["Table",
  BaseStyle->"RefGuideLink"],
 " to loop through all possible positions and use an ",
 StyleBox["If",
  FontWeight->"Bold"],
 " statement to check for equality. If two bases at the same position are \
equal we update our ",
 StyleBox["count",
  FontWeight->"Bold"],
 " variable. Here is the code that compares DNAsequence[1] with DNAsequence[4]"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"count", "=", "0"}], ";", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"StringTake", "[", 
        RowBox[{
         RowBox[{"DNAsequence", "[", "1", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "j"}], "}"}]}], "]"}], "==", 
       RowBox[{"StringTake", "[", 
        RowBox[{
         RowBox[{"DNAsequence", "[", "4", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "j"}], "}"}]}], "]"}]}], ",", 
      RowBox[{"count", "++"}], ",", "0"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "1", ",", 
      RowBox[{"StringLength", "[", 
       RowBox[{"DNAsequence", "[", "1", "]"}], "]"}]}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", "count"}], "Input",
 Background->None],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.5381192594998693`*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Now let us write a function that does the same task but also reports on \
some statistics. The function has two arguments: the number of DNA sequences \
and the length of the sequence ( all sequences have equal length). The \
sequences are generated at random and the first sequences is compared with \
all other sequences. The function returns the average fraction of positions \
that are the same between two sequences in a set of ",
 StyleBox["n",
  FontWeight->"Bold"],
 " sequences."
}], "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{"DNACompare", "[", 
   RowBox[{"numberOfSequences_", ",", "lengthOfSequence_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bases", ",", "randomDNA", ",", "DNAsequence", ",", "count"}], 
     "}"}], ",", 
    RowBox[{
     RowBox[{"bases", "=", 
      RowBox[{"{", 
       RowBox[{
       "\"\<a\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\"", ",", "\"\<t\>\""}], 
       "}"}]}], ";", 
     RowBox[{
      RowBox[{"randomDNA", "[", "n_Integer", "]"}], ":=", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"bases", "[", 
          RowBox[{"[", 
           RowBox[{"Random", "[", 
            RowBox[{"Integer", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}], "]"}], ",", 
         RowBox[{"{", "n", "}"}]}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"DNAsequence", "[", "i", "]"}], "=", 
        RowBox[{"randomDNA", "[", "lengthOfSequence", "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "numberOfSequences"}], "}"}]}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"count", "[", "p", "]"}], "=", "0"}], ",", 
       RowBox[{"{", 
        RowBox[{"p", ",", "2", ",", "numberOfSequences"}], "}"}]}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"StringTake", "[", 
             RowBox[{
              RowBox[{"DNAsequence", "[", "1", "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"j", ",", "j"}], "}"}]}], "]"}], "==", 
            RowBox[{"StringTake", "[", 
             RowBox[{
              RowBox[{"DNAsequence", "[", "p", "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"j", ",", "j"}], "}"}]}], "]"}]}], ",", 
           RowBox[{
            RowBox[{"count", "[", "p", "]"}], "++"}], ",", "0"}], "]"}], ",", 
         
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", 
           RowBox[{"StringLength", "[", 
            RowBox[{"DNAsequence", "[", "1", "]"}], "]"}]}], "}"}]}], "]"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"p", ",", "2", ",", "numberOfSequences"}], "}"}]}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"average", "=", 
      RowBox[{"N", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Apply", "[", 
           RowBox[{"Plus", ",", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"count", "[", "p", "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"p", ",", "2", ",", "numberOfSequences"}], "}"}]}], 
             "]"}]}], "]"}], "/", 
          RowBox[{"(", 
           RowBox[{"numberOfSequences", "-", "1"}], ")"}]}], ")"}], "/", 
        "lengthOfSequence"}], "]"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5381196107029333`*^9, 3.538119621026713*^9}},
 Background->None],

Cell["Here is the result for 20 sequences each with 20 bases.", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DNACompare", "[", 
  RowBox[{"20", ",", "20"}], "]"}]], "Input",
 Background->None],

Cell[BoxData["0.21842105263157896`"], "Output",
 CellChangeTimes->{
  3.53811942640236*^9, {3.5381196138324738`*^9, 3.538119623500772*^9}},
 Background->None]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["6. Generating cartoons of DNA strands", "Section",
 Background->None],

Cell[TextData[{
 "We show in this section how to generate a DNA strand that shows the base \
pairing. A simple way to do this is to use a ",
 ButtonBox["GridBox",
  BaseStyle->"RefGuideLink"],
 ". Suppose we had the DNA sequence \"c a a g t\" and we want to show its \
pairing with the complementary bases \"g t t c a\". Here is  a graphical way \
of doing it. Make use of ",
 ButtonBox["CellPrint",
  BaseStyle->"RefGuideLink"],
 ", ",
 ButtonBox["Cell",
  BaseStyle->"RefGuideLink"],
 ",  ",
 ButtonBox["RowBox",
  BaseStyle->"RefGuideLink"],
 ", and ",
 StyleBox["GridBox",
  FontWeight->"Bold"]
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CellPrint", "[", 
  RowBox[{"Cell", "[", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"GridBox", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<c\>\"", ",", "\"\<a\>\"", ",", "\"\<a\>\"", ",", "\"\<g\>\"", 
            ",", "\"\<t\>\""}], "}"}], ",", 
          RowBox[{"Table", "[", 
           RowBox[{"\"\<|\>\"", ",", 
            RowBox[{"{", "5", "}"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<g\>\"", ",", "\"\<t\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", 
            ",", "\"\<a\>\""}], "}"}]}], "}"}], ",", 
        RowBox[{"GridBaseline", "\[Rule]", "Bottom"}]}], "]"}], "}"}], "]"}], 
    ",", "\"\<Output\>\""}], "]"}], "]"}]], "Input",
 Background->None],

Cell[BoxData[GridBox[{
   {"c", "a", "a", "g", "t"},
   {"|", "|", "|", "|", "|"},
   {"g", "t", "t", "c", "a"}
  },
  BaselinePosition->Bottom]], "Output",
 CellChangeTimes->{3.538119914688098*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Here is a simpler method that makes use of ",
 ButtonBox["DisplayForm",
  BaseStyle->"RefGuideLink"],
 " and ",
 StyleBox["GridBox",
  FontWeight->"Bold"]
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DisplayForm", "[", 
  RowBox[{"GridBox", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<c\>\"", ",", "\"\<a\>\"", ",", "\"\<a\>\"", ",", "\"\<g\>\"", 
        ",", "\"\<t\>\""}], "}"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{"\"\<|\>\"", ",", 
        RowBox[{"{", "5", "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<g\>\"", ",", "\"\<t\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", 
        ",", "\"\<a\>\""}], "}"}]}], "}"}], ",", 
    RowBox[{"GridBaseline", "\[Rule]", "Bottom"}]}], "]"}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 TagBox[GridBox[{
    {"c", "a", "a", "g", "t"},
    {"|", "|", "|", "|", "|"},
    {"g", "t", "t", "c", "a"}
   },
   BaselinePosition->Bottom],
  DisplayForm]], "Output",
 CellChangeTimes->{3.538119917192882*^9},
 Background->None]
}, Open  ]],

Cell["\<\
Here is a function that takes an integer as its argument Length of the DNA \
strand and then generates the corresponding DNA strand,\
\>", "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{"DNAstrand", "[", "x_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "bases", ",", "randomDNA", ",", "complementRule", ",", "sequence2"}], 
     "}"}], ",", 
    RowBox[{
     RowBox[{"bases", "=", 
      RowBox[{"{", 
       RowBox[{
       "\"\<a\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\"", ",", "\"\<t\>\""}], 
       "}"}]}], ";", 
     RowBox[{
      RowBox[{"randomDNA", "[", "n_Integer", "]"}], ":=", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"bases", "[", 
          RowBox[{"[", 
           RowBox[{"Random", "[", 
            RowBox[{"Integer", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}], "]"}], ",", 
         RowBox[{"{", "n", "}"}]}], "]"}], "]"}]}], ";", 
     RowBox[{"sequence", "=", 
      RowBox[{"randomDNA", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"complementRule", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<t\>\""}], ",", 
        RowBox[{"\"\<t\>\"", "->", "\"\<a\>\""}], ",", 
        RowBox[{"\"\<g\>\"", "->", "\"\<c\>\""}], ",", 
        RowBox[{"\"\<c\>\"", "->", "\"\<g\>\""}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"sequence2", "=", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"sequence", ",", "complementRule"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"DisplayForm", "[", 
      RowBox[{"GridBox", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Characters", "[", "sequence", "]"}], ",", 
          RowBox[{"Table", "[", 
           RowBox[{"\"\<|\>\"", ",", 
            RowBox[{"{", "x", "}"}]}], "]"}], ",", 
          RowBox[{"Characters", "[", "sequence2", "]"}]}], "}"}], ",", 
        RowBox[{"GridBaseline", "\[Rule]", "Bottom"}]}], "]"}], "]"}]}]}], 
   "]"}]}]], "Input",
 Background->None],

Cell["Here is an example", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DNAstrand", "[", "30", "]"}]], "Input",
 Background->None],

Cell[BoxData[
 TagBox[GridBox[{
    {"a", "c", "c", "t", "t", "a", "g", "a", "c", "t", "a", "c", "c", "g", 
     "c", "t", "c", "c", "g", "t", "g", "a", "t", "a", "c", "t", "g", "t", 
     "a", "a"},
    {"|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", 
     "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", 
     "|", "|"},
    {"t", "g", "g", "a", "a", "t", "c", "t", "g", "a", "t", "g", "g", "c", 
     "g", "a", "g", "g", "c", "a", "c", "t", "a", "t", "g", "a", "c", "a", 
     "t", "t"}
   },
   BaselinePosition->Bottom],
  DisplayForm]], "Output",
 CellChangeTimes->{3.538119959271434*^9},
 Background->None]
}, Open  ]],

Cell["\<\
One difficulty with this method is that as the DNA sequence gets longer, the \
DNA cartoon does not wrap on the page. Thus we need a more general method for \
creating a cartoon. The following method was suggested by David Park of the \
Mathgroup. In this example we use symbols instead of strings for the bases. \
The function makes use of several functions which are described below\
\>", "Text",
 Background->None],

Cell[TextData[{
 "First we generate a random nucliotide using the ",
 ButtonBox["Switch",
  BaseStyle->"RefGuideLink"],
 " function.  The advantage of the using the ",
 StyleBox["Switch",
  FontWeight->"Bold"],
 " function is that we can specify more general statistics for the \
distribution of bases. The function is given below where the bases have equal \
probability"
}], "Text",
 Background->None],

Cell[BoxData[
 RowBox[{"randomnucl", ":=", 
  RowBox[{"Switch", "[", 
   RowBox[{
    RowBox[{"Random", "[", "]"}], ",", 
    RowBox[{"_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"#", "<", "0.25"}], "&"}], ")"}]}], ",", "a", ",", 
    RowBox[{"_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"#", "<", "0.5"}], "&"}], ")"}]}], ",", "t", ",", 
    RowBox[{"_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"#", "<", "0.75"}], "&"}], ")"}]}], ",", "c", ",", "_", ",", 
    "g"}], "]"}]}]], "Input",
 Background->None],

Cell[TextData[{
 "We can now use ",
 StyleBox["Table",
  FontWeight->"Bold"],
 " to generate the bases in the nucliotide chain. Here is a chain with 10 \
bases"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mydata", "=", 
  RowBox[{"Table", "[", 
   RowBox[{"randomnucl", ",", 
    RowBox[{"{", "10", "}"}]}], "]"}]}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "c", ",", "a", ",", "t", ",", "c", ",", "c", ",", "t", ",", "t", ",", "t", 
   ",", "t", ",", "t"}], "}"}]], "Output",
 CellChangeTimes->{3.53812011992953*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Note that in the above function we are working with symbols not strings! We \
will also need a function called ",
 StyleBox["basepair",
  FontWeight->"Bold"],
 " that swops that bases to generate the DNA sequence"
}], "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{"basepair", "[", "n_", "]"}], ":=", 
  RowBox[{"Switch", "[", 
   RowBox[{
   "n", ",", "a", ",", "t", ",", "t", ",", "a", ",", "c", ",", "g", ",", "g", 
    ",", "c", ",", "_", ",", "\"\<\>\""}], "]"}]}]], "Input",
 Background->None],

Cell[TextData[{
 "We can then map this function onto ",
 StyleBox["mydata",
  FontWeight->"Bold"],
 " to generate the complementary bases"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"basepair", ",", "mydata"}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "g", ",", "t", ",", "a", ",", "g", ",", "g", ",", "a", ",", "a", ",", "a", 
   ",", "a", ",", "a"}], "}"}]], "Output",
 CellChangeTimes->{3.53812015306605*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "To generate a cartoon of the paired bases we can proceed as follows. We use \
the function ",
 ButtonBox["ToBoxes",
  BaseStyle->"RefGuideLink"],
 " function but this is not needed as shown later"
}], "Text",
 CellChangeTimes->{{3.538120161566306*^9, 3.538120165066127*^9}},
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DisplayForm", "[", " ", 
  RowBox[{"GridBox", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{"ToBoxes", ",", "mydata"}], "]"}], ",", " ", 
      RowBox[{"Table", "[", 
       RowBox[{"\"\<|\>\"", ",", " ", 
        RowBox[{"{", 
         RowBox[{"Length", "[", "mydata", "]"}], "}"}]}], "]"}], ",", "\n", 
      "           ", 
      RowBox[{"Map", "[", " ", 
       RowBox[{"ToBoxes", " ", ",", 
        RowBox[{"Map", "[", 
         RowBox[{"basepair", ",", "mydata"}], "]"}]}], "]"}]}], "}"}], ",", 
    " ", 
    RowBox[{"GridBaseline", " ", "->", " ", "Bottom"}]}], "]"}], 
  "]"}]], "Input",
 Background->None],

Cell[BoxData[
 TagBox[GridBox[{
    {"c", "a", "t", "c", "c", "t", "t", "t", "t", "t"},
    {"|", "|", "|", "|", "|", "|", "|", "|", "|", "|"},
    {"g", "t", "a", "g", "g", "a", "a", "a", "a", "a"}
   },
   BaselinePosition->Bottom],
  DisplayForm]], "Output",
 CellChangeTimes->{3.5381201668708353`*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Note this will also work without using the ",
 StyleBox["ToBoxes",
  FontWeight->"Bold"],
 " function"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DisplayForm", "[", " ", 
  RowBox[{"GridBox", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"mydata", ",", " ", 
      RowBox[{"Table", "[", 
       RowBox[{"\"\<|\>\"", ",", " ", 
        RowBox[{"{", 
         RowBox[{"Length", "[", "mydata", "]"}], "}"}]}], "]"}], ",", "\n", 
      "           ", 
      RowBox[{"Map", "[", 
       RowBox[{"basepair", ",", "mydata"}], "]"}]}], "}"}], ",", " ", 
    RowBox[{"GridBaseline", " ", "->", " ", "Bottom"}]}], "]"}], 
  "]"}]], "Input",
 Background->None],

Cell[BoxData[
 TagBox[GridBox[{
    {"c", "a", "t", "c", "c", "t", "t", "t", "t", "t"},
    {"|", "|", "|", "|", "|", "|", "|", "|", "|", "|"},
    {"g", "t", "a", "g", "g", "a", "a", "a", "a", "a"}
   },
   BaselinePosition->Bottom],
  DisplayForm]], "Output",
 CellChangeTimes->{3.538120169878611*^9},
 Background->None]
}, Open  ]],

Cell["\<\
We will need to display a sequences that wrap on the page. This can be done \
by using GridBoxes as follows. Here is a single cartoon\
\>", "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{"sub1", "=", " ", 
   RowBox[{"GridBox", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mydata", ",", " ", 
       RowBox[{"Table", "[", 
        RowBox[{"\"\<|\>\"", ",", " ", 
         RowBox[{"{", 
          RowBox[{"Length", "[", "mydata", "]"}], "}"}]}], "]"}], ",", "\n", 
       "           ", 
       RowBox[{"Map", "[", 
        RowBox[{"basepair", ",", "mydata"}], "]"}]}], "}"}], ",", " ", 
     RowBox[{"GridBaseline", " ", "->", " ", "Bottom"}]}], "]"}]}], 
  ";"}]], "Input",
 Background->None],

Cell["\<\
If we take this DNA cartoon and use it in Gridboxes as follows, we get a \
stacking of DNA cartoons\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DisplayForm", "[", 
  RowBox[{"FrameBox", "[", 
   RowBox[{"GridBox", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "sub1", "}"}], ",", 
       RowBox[{"{", "sub1", "}"}]}], "}"}], ",", 
     RowBox[{"RowLines", " ", "->", " ", "True"}]}], "]"}], "]"}], 
  "]"}]], "Input",
 Background->None],

Cell[BoxData[
 TagBox[
  FrameBox[GridBox[{
     {GridBox[{
        {"c", "a", "t", "c", "c", "t", "t", "t", "t", "t"},
        {"|", "|", "|", "|", "|", "|", "|", "|", "|", "|"},
        {"g", "t", "a", "g", "g", "a", "a", "a", "a", "a"}
       },
       BaselinePosition->Bottom]},
     {GridBox[{
        {"c", "a", "t", "c", "c", "t", "t", "t", "t", "t"},
        {"|", "|", "|", "|", "|", "|", "|", "|", "|", "|"},
        {"g", "t", "a", "g", "g", "a", "a", "a", "a", "a"}
       },
       BaselinePosition->Bottom]}
    },
    GridBoxDividers->{
     "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, {True}, False}, "RowsIndexed" -> {}}]],
  DisplayForm]], "Output",
 CellChangeTimes->{3.538120372645194*^9},
 Background->None]
}, Open  ]],

Cell["\<\
These ideas are included in the the folloing function which generates the \
display of the sequence. The function takes several arguments: The first \
argument defines the length of the DNA sequence; the second argument, called \
start, defines where in the sequence we want to start displaying; the third \
argument is the length of the row (i.e the number of base pairs displayed in \
a row); the third argument is the number of rows.\
\>", "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{"DNAstrand2", "[", 
   RowBox[{"x_", ",", "start_", ",", "rowlength_", ",", "rows_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "randomnucl", ",", "basepair", ",", "data", ",", "subdata", ",", " ", 
      "rowgrid"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"randomnucl", ":=", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"Random", "[", "]"}], ",", 
        RowBox[{"_", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "<", "0.25"}], "&"}], ")"}]}], ",", "a", ",", 
        RowBox[{"_", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "<", "0.5"}], "&"}], ")"}]}], ",", "t", ",", 
        RowBox[{"_", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "<", "0.75"}], "&"}], ")"}]}], ",", "c", ",", "_", 
        ",", "g"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"data", "=", 
      RowBox[{"Table", "[", 
       RowBox[{"randomnucl", ",", 
        RowBox[{"{", "x", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"basepair", "[", "n_", "]"}], ":=", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "n", ",", "a", ",", "t", ",", "t", ",", "a", ",", "c", ",", "g", ",", 
        "g", ",", "c", ",", "_", ",", "\"\<\>\""}], "]"}]}], ";", "\n", 
     "    ", 
     RowBox[{
      RowBox[{"rowgrid", "[", "subdata_", "]"}], " ", ":=", "\n", "      ", 
      RowBox[{"GridBox", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{"ToBoxes", ",", "subdata"}], "]"}], ",", " ", 
          RowBox[{"Table", "[", 
           RowBox[{"\"\<|\>\"", ",", " ", 
            RowBox[{"{", "rowlength", "}"}]}], "]"}], ",", "\n", 
          "            ", 
          RowBox[{"Map", "[", 
           RowBox[{"ToBoxes", " ", ",", 
            RowBox[{"Map", "[", 
             RowBox[{"basepair", ",", " ", "subdata"}], "]"}]}], "]"}]}], 
         "}"}], ",", " ", 
        RowBox[{"GridBaseline", " ", "->", " ", "Bottom"}]}], "]"}]}], ";", 
     "\n", "    ", 
     RowBox[{"subdata", " ", "=", "\n", "      ", 
      RowBox[{"Take", "[", 
       RowBox[{"data", ",", " ", 
        RowBox[{"{", 
         RowBox[{"start", ",", " ", 
          RowBox[{"Min", "[", 
           RowBox[{
            RowBox[{"start", " ", "+", " ", 
             RowBox[{"rows", " ", "rowlength"}], " ", "-", " ", "1"}], ",", 
            " ", 
            RowBox[{"Length", "[", "data", "]"}]}], "]"}]}], "}"}]}], "]"}]}],
      ";", "\n", "    ", 
     RowBox[{"subdata", " ", "=", " ", 
      RowBox[{"Partition", "[", 
       RowBox[{
       "subdata", ",", " ", "rowlength", ",", " ", "rowlength", ",", " ", 
        RowBox[{"{", 
         RowBox[{"1", ",", " ", "1"}], "}"}], ",", " ", "\"\< \>\""}], 
       "]"}]}], ";", "\n", "    ", 
     RowBox[{"subdata", " ", "=", 
      RowBox[{"Map", "[", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"rowgrid", "[", "#", "]"}], "}"}], " ", "&"}], " ", ",", 
        "subdata"}], "]"}]}], ";", "\n", "    ", 
     RowBox[{"DisplayForm", "[", 
      RowBox[{"FrameBox", "[", 
       RowBox[{"GridBox", "[", 
        RowBox[{"subdata", ",", " ", 
         RowBox[{"RowLines", " ", "->", " ", "True"}]}], "]"}], "]"}], 
      "]"}]}]}], "]"}]}]], "Input",
 Background->None],

Cell["Let us illustrate how this function works", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DNAstrand2", "[", 
  RowBox[{"200", ",", "5", ",", "30", ",", "6"}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 TagBox[
  FrameBox[GridBox[{
     {GridBox[{
        {"a", "g", "t", "g", "a", "a", "g", "c", "g", "a", "t", "c", "c", "t",
          "g", "a", "t", "a", "t", "g", "a", "g", "g", "c", "g", "g", "c", 
         "g", "g", "g"},
        {"|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|",
          "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", 
         "|", "|", "|"},
        {"t", "c", "a", "c", "t", "t", "c", "g", "c", "t", "a", "g", "g", "a",
          "c", "t", "a", "t", "a", "c", "t", "c", "c", "g", "c", "c", "g", 
         "c", "c", "c"}
       },
       BaselinePosition->Bottom]},
     {GridBox[{
        {"g", "t", "g", "g", "t", "g", "t", "t", "c", "c", "g", "t", "t", "c",
          "g", "t", "t", "g", "g", "t", "g", "a", "a", "c", "a", "c", "a", 
         "g", "c", "g"},
        {"|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|",
          "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", 
         "|", "|", "|"},
        {"c", "a", "c", "c", "a", "c", "a", "a", "g", "g", "c", "a", "a", "g",
          "c", "a", "a", "c", "c", "a", "c", "t", "t", "g", "t", "g", "t", 
         "c", "g", "c"}
       },
       BaselinePosition->Bottom]},
     {GridBox[{
        {"g", "t", "g", "t", "g", "a", "c", "g", "g", "c", "a", "g", "a", "t",
          "t", "g", "a", "c", "t", "a", "a", "g", "g", "a", "a", "t", "g", 
         "c", "t", "a"},
        {"|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|",
          "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", 
         "|", "|", "|"},
        {"c", "a", "c", "a", "c", "t", "g", "c", "c", "g", "t", "c", "t", "a",
          "a", "c", "t", "g", "a", "t", "t", "c", "c", "t", "t", "a", "c", 
         "g", "a", "t"}
       },
       BaselinePosition->Bottom]},
     {GridBox[{
        {"t", "g", "t", "t", "a", "a", "a", "a", "g", "a", "a", "c", "t", "a",
          "a", "c", "c", "g", "g", "t", "g", "t", "t", "a", "t", "t", "a", 
         "c", "t", "t"},
        {"|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|",
          "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", 
         "|", "|", "|"},
        {"a", "c", "a", "a", "t", "t", "t", "t", "c", "t", "t", "g", "a", "t",
          "t", "g", "g", "c", "c", "a", "c", "a", "a", "t", "a", "a", "t", 
         "g", "a", "a"}
       },
       BaselinePosition->Bottom]},
     {GridBox[{
        {"g", "t", "t", "a", "c", "g", "g", "g", "c", "a", "t", "g", "g", "g",
          "t", "c", "t", "c", "a", "t", "t", "g", "c", "a", "c", "c", "t", 
         "g", "g", "c"},
        {"|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|",
          "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", 
         "|", "|", "|"},
        {"c", "a", "a", "t", "g", "c", "c", "c", "g", "t", "a", "c", "c", "c",
          "a", "g", "a", "g", "t", "a", "a", "c", "g", "t", "g", "g", "a", 
         "c", "c", "g"}
       },
       BaselinePosition->Bottom]},
     {GridBox[{
        {"t", "a", "a", "c", "g", "a", "t", "c", "c", "t", "a", "a", "c", "a",
          "c", "a", "g", "a", "a", "c", "c", "a", "t", "g", "t", "a", "a", 
         "t", "t", "g"},
        {"|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|",
          "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", 
         "|", "|", "|"},
        {"a", "t", "t", "g", "c", "t", "a", "g", "g", "a", "t", "t", "g", "t",
          "g", "t", "c", "t", "t", "g", "g", "t", "a", "c", "a", "t", "t", 
         "a", "a", "c"}
       },
       BaselinePosition->Bottom]}
    },
    GridBoxDividers->{
     "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, {True}, False}, "RowsIndexed" -> {}}]],
  DisplayForm]], "Output",
 CellChangeTimes->{3.538120408350897*^9},
 Background->None]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["7. Adding color to sequences", "Section",
 Background->None],

Cell[TextData[{
 "Suppose we had a string and we wanted to print it in the notebook  with a \
specified color . We can use the ",
 ButtonBox["StyleForm",
  BaseStyle->"RefGuideLink"],
 " wrapper, and then specify the ",
 ButtonBox["FontColor",
  BaseStyle->"RefGuideLink"],
 " option, as shown below"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myString", "=", 
  RowBox[{"StyleForm", "[", 
   RowBox[{"\"\<abcdefg\>\"", ",", 
    RowBox[{"FontColor", "\[Rule]", 
     RowBox[{"RGBColor", "[", 
      RowBox[{"0", ",", "0", ",", "1"}], "]"}]}]}], "]"}]}]], "Input",
 Background->None],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"abcdefg\"\>",
   FontColor->RGBColor[0, 0, 1]],
  StyleForm[#, FontColor -> RGBColor[0, 0, 1]]& ]], "Output",
 CellChangeTimes->{3.538120413368155*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Another way of doing this is at the cell level using a ",
 ButtonBox["StyleBox",
  BaseStyle->"RefGuideLink"]
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CellPrint", "[", 
  RowBox[{"Cell", "[", 
   RowBox[{
    RowBox[{"BoxData", "[", 
     RowBox[{"StyleBox", "[", 
      RowBox[{"\"\<abcdefg\>\"", ",", 
       RowBox[{"FontColor", "\[Rule]", 
        RowBox[{"RGBColor", "[", 
         RowBox[{"0", ",", "0", ",", "1"}], "]"}]}]}], "]"}], "]"}], ",", 
    "\"\<Output\>\""}], "]"}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 StyleBox["abcdefg",
  FontColor->RGBColor[0, 0, 1]]], "Output",
 CellChangeTimes->{3.538120419546895*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Now if we have a string and we want to color certain characters (say the \
UpperCase characters), we can proceed as follows. For each UpperCase \
character we add a ",
 StyleBox["StyleBox",
  FontWeight->"Bold"],
 " with the appropriate ",
 StyleBox["FontColor",
  FontWeight->"Bold"],
 " option. Consider the following string"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myString", "=", "\"\<abFGec\>\""}]], "Input",
 Background->None],

Cell[BoxData["\<\"abFGec\"\>"], "Output",
 CellChangeTimes->{3.538120422886939*^9},
 Background->None]
}, Open  ]],

Cell["\<\
Next we devise a rule that adds the color info to the UpperCase characters. \
We first break up the string into its individual characters, and then use our \
replacement rule\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Characters", "[", "myString", "]"}], "/.", 
  RowBox[{
   RowBox[{"x_String", "?", "UpperCaseQ"}], ":>", 
   RowBox[{"StyleBox", "[", 
    RowBox[{"x", ",", 
     RowBox[{"FontColor", "\[Rule]", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"1", ",", "0", ",", "0"}], "]"}]}]}], "]"}]}]}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", 
   RowBox[{"StyleBox", "[", 
    RowBox[{"\<\"F\"\>", ",", 
     RowBox[{"FontColor", "\[Rule]", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"1", ",", "0", ",", "0"}], "]"}]}]}], "]"}], ",", 
   RowBox[{"StyleBox", "[", 
    RowBox[{"\<\"G\"\>", ",", 
     RowBox[{"FontColor", "\[Rule]", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"1", ",", "0", ",", "0"}], "]"}]}]}], "]"}], ",", "\<\"e\"\>", 
   ",", "\<\"c\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.538120437815238*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "We then wrap this output with ",
 StyleBox["RowBox",
  FontWeight->"Bold"],
 ", ",
 ButtonBox["BoxData",
  BaseStyle->"RefGuideLink"],
 ", ",
 StyleBox["Cell",
  FontWeight->"Bold"],
 ", and ",
 StyleBox["CellPrint",
  FontWeight->"Bold"]
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CellPrint", "[", 
  RowBox[{"Cell", "[", 
   RowBox[{
    RowBox[{"BoxData", "[", 
     RowBox[{"RowBox", "[", 
      RowBox[{
       RowBox[{"Characters", "[", "myString", "]"}], "/.", 
       RowBox[{
        RowBox[{"x_String", "?", "UpperCaseQ"}], ":>", 
        RowBox[{"StyleBox", "[", 
         RowBox[{"x", ",", 
          RowBox[{"FontColor", "\[Rule]", 
           RowBox[{"RGBColor", "[", 
            RowBox[{"1", ",", "0", ",", "0"}], "]"}]}]}], "]"}]}]}], "]"}], 
     "]"}], ",", "\"\<Output\>\""}], "]"}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"a", "b", 
  StyleBox["F",
   FontColor->RGBColor[1, 0, 0]], 
  StyleBox["G",
   FontColor->RGBColor[1, 0, 0]], "e", "c"}]], "Output",
 CellChangeTimes->{3.538120441728799*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "We see that the characters are spaced apart. If instead of ",
 StyleBox["RowBox",
  FontWeight->"Bold"],
 " we use ",
 StyleBox["GridBox",
  FontWeight->"Bold"],
 " then we can use the ",
 ButtonBox["ColumnSpacings",
  BaseStyle->"RefGuideLink"],
 " option to close up the characters, as shown below"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CellPrint", "[", 
  RowBox[{"Cell", "[", 
   RowBox[{
    RowBox[{"BoxData", "[", 
     RowBox[{"GridBox", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Characters", "[", "myString", "]"}], "/.", 
         RowBox[{
          RowBox[{"x_String", "?", "UpperCaseQ"}], ":>", 
          RowBox[{"StyleBox", "[", 
           RowBox[{"x", ",", 
            RowBox[{"FontColor", "\[Rule]", 
             RowBox[{"RGBColor", "[", 
              RowBox[{"1", ",", "0", ",", "0"}], "]"}]}]}], "]"}]}]}], "}"}], 
       ",", 
       RowBox[{"ColumnSpacings", "\[Rule]", "0"}]}], "]"}], "]"}], ",", 
    "\"\<Output\>\""}], "]"}], "]"}]], "Input",
 Background->None],

Cell[BoxData[GridBox[{
   {"a", "b", 
    StyleBox["F",
     FontColor->RGBColor[1, 0, 0]], 
    StyleBox["G",
     FontColor->RGBColor[1, 0, 0]], "e", "c"}
  },
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.4]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.538120445120924*^9},
 Background->None]
}, Open  ]],

Cell["\<\
Let us use our randomDNA function to generate a sequence and then mutate it \
and show the mutation as red characters. Here is our randomDNA function\
\>", "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{"bases", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\"", ",", "\"\<t\>\""}], 
    "}"}]}], ";", 
  RowBox[{
   RowBox[{"randomDNA", "[", "n_Integer", "]"}], ":=", 
   RowBox[{"StringJoin", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"bases", "[", 
       RowBox[{"[", 
        RowBox[{"Random", "[", 
         RowBox[{"Integer", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"{", "n", "}"}]}], "]"}], "]"}]}]}]], "Input",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myDNA", "=", 
  RowBox[{"randomDNA", "[", "50", "]"}]}]], "Input",
 Background->None],

Cell[BoxData["\<\"caatttacttcgtgccaacagctttgccggaaagtaggttagatgtcttg\"\>"], \
"Output",
 CellChangeTimes->{3.538120449826816*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "The function that mutates our DNA strand is  shown below. The function that \
colors the characters that are mutated is called ",
 StyleBox["colorfunc",
  FontWeight->"Bold"],
 ". Note since we are tagging the mutated bases in red we can forgo using \
UpperCase to identify the changes"
}], "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{"mutateDNA3", "[", 
   RowBox[{"sequence_", ",", "numberOfMutations_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "bases", ",", "selectBaseForMutation", ",", "x", ",", "tempString", ",", 
      "mutatedSequence", ",", "i", ",", "candPosForMutation", ",", 
      "mutatePosition", ",", "mutatePositionFlag", ",", "mutatedBase", ",", 
      "colorfunc"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"colorfunc", "[", "p_", "]"}], ":=", 
      RowBox[{"CellPrint", "[", 
       RowBox[{"Cell", "[", 
        RowBox[{
         RowBox[{"BoxData", "[", 
          RowBox[{"GridBox", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Characters", "[", "p", "]"}], "/.", 
              RowBox[{
               RowBox[{"x_String", "?", "UpperCaseQ"}], ":>", 
               RowBox[{"StyleBox", "[", 
                RowBox[{
                 RowBox[{"ToLowerCase", "[", "x", "]"}], ",", 
                 RowBox[{"FontColor", "\[Rule]", 
                  RowBox[{"RGBColor", "[", 
                   RowBox[{"1", ",", "0", ",", "0"}], "]"}]}]}], "]"}]}]}], 
             "}"}], ",", 
            RowBox[{"ColumnSpacings", "\[Rule]", "0"}]}], "]"}], "]"}], ",", 
         "\"\<Output\>\""}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"bases", "=", 
      RowBox[{"{", 
       RowBox[{
       "\"\<a\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\"", ",", "\"\<t\>\""}], 
       "}"}]}], ";", 
     RowBox[{"selectBaseForMutation", ":=", 
      RowBox[{"ToUpperCase", "[", 
       RowBox[{"bases", "[", 
        RowBox[{"[", 
         RowBox[{"Random", "[", 
          RowBox[{"Integer", ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}], "]"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"tempString", "=", "sequence"}], ";", "\[IndentingNewLine]", 
     RowBox[{"i", "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"i", "<", 
        RowBox[{"numberOfMutations", "+", "1"}]}], ",", 
       RowBox[{
        RowBox[{"candPosForMutation", "=", 
         RowBox[{
          RowBox[{"StringPosition", "[", 
           RowBox[{"tempString", ",", "bases"}], "]"}], "/.", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"x_", "?", "IntegerQ"}], ",", 
             RowBox[{"y_", "?", "IntegerQ"}]}], "}"}], "\[Rule]", "x"}]}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"mutatePosition", "=", 
         RowBox[{"Random", "[", 
          RowBox[{"Integer", ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"StringLength", "[", "sequence", "]"}]}], "}"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"mutatePositionFlag", "=", 
         RowBox[{"Length", "[", 
          RowBox[{"Intersection", "[", 
           RowBox[{"candPosForMutation", ",", 
            RowBox[{"{", "mutatePosition", "}"}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mutatedBase", "=", "selectBaseForMutation"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mutatedSequence", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"mutatePositionFlag", "\[Equal]", "1"}], "&&", 
            RowBox[{
             RowBox[{"ToUpperCase", "[", 
              RowBox[{"StringTake", "[", 
               RowBox[{"tempString", ",", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"x", ",", "x"}], "}"}], "/.", 
                 RowBox[{"x", "\[Rule]", "mutatePosition"}]}]}], "]"}], "]"}],
              "!=", "mutatedBase"}]}], ",", 
           RowBox[{
            RowBox[{"i", "=", 
             RowBox[{"i", "+", "1"}]}], ";", 
            RowBox[{"StringReplacePart", "[", 
             RowBox[{"tempString", ",", "mutatedBase", ",", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"x", ",", "x"}], "}"}], "/.", 
               RowBox[{"x", "\[Rule]", "mutatePosition"}]}]}], "]"}]}], ",", 
           "tempString"}], "]"}]}], ";", 
        RowBox[{"tempString", "=", "mutatedSequence"}]}]}], "]"}], ";", 
     "mutatedSequence", ";", 
     RowBox[{"colorfunc", "[", "mutatedSequence", "]"}]}]}], "]"}]}]], "Input",\

 Background->None],

Cell["Let us apply the mutation to our sequence", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mutateDNA3", "[", 
  RowBox[{"myDNA", ",", "20"}], "]"}]], "Input",
 Background->None],

Cell[BoxData[GridBox[{
   {"c", 
    StyleBox["t",
     FontColor->RGBColor[1, 0, 0]], "a", "t", 
    StyleBox["a",
     FontColor->RGBColor[1, 0, 0]], 
    StyleBox["g",
     FontColor->RGBColor[1, 0, 0]], "a", "c", "t", "t", 
    StyleBox["t",
     FontColor->RGBColor[1, 0, 0]], "g", "t", "g", "c", 
    StyleBox["t",
     FontColor->RGBColor[1, 0, 0]], "a", 
    StyleBox["g",
     FontColor->RGBColor[1, 0, 0]], 
    StyleBox["g",
     FontColor->RGBColor[1, 0, 0]], 
    StyleBox["t",
     FontColor->RGBColor[1, 0, 0]], 
    StyleBox["a",
     FontColor->RGBColor[1, 0, 0]], 
    StyleBox["g",
     FontColor->RGBColor[1, 0, 0]], 
    StyleBox["c",
     FontColor->RGBColor[1, 0, 0]], 
    StyleBox["g",
     FontColor->RGBColor[1, 0, 0]], "t", "g", "c", "c", "g", "g", "a", 
    StyleBox["c",
     FontColor->RGBColor[1, 0, 0]], 
    StyleBox["g",
     FontColor->RGBColor[1, 0, 0]], "g", 
    StyleBox["c",
     FontColor->RGBColor[1, 0, 0]], 
    StyleBox["c",
     FontColor->RGBColor[1, 0, 0]], "g", 
    StyleBox["a",
     FontColor->RGBColor[1, 0, 0]], "t", "t", "a", 
    StyleBox["t",
     FontColor->RGBColor[1, 0, 0]], "a", "t", 
    StyleBox["c",
     FontColor->RGBColor[1, 0, 0]], "t", 
    StyleBox["a",
     FontColor->RGBColor[1, 0, 0]], "t", "t", "g"}
  },
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.4]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.538120463184463*^9},
 Background->None]
}, Open  ]],

Cell["Compare this with the original sequence", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData["myDNA"], "Input",
 Background->None],

Cell[BoxData["\<\"caatttacttcgtgccaacagctttgccggaaagtaggttagatgtcttg\"\>"], \
"Output",
 CellChangeTimes->{3.5381204654623823`*^9},
 Background->None]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["8. Pattern Searching in Strings", "Section",
 Background->None],

Cell["\<\
Suppose we are given a string and we want to determine whether the string \
contains a certain string pattern or \" motif\". Consider the following \
simple example:\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mystring1", "=", 
  "\"\<MNIDDKLETVELFLKCGGIDEMQSSRTQESEMRQQDMISHDELMVHEETVKNDEEQMETHERLPQ\>\""}\
]], "Input",
 Background->None],

Cell[BoxData["\<\"\
MNIDDKLETVELFLKCGGIDEMQSSRTQESEMRQQDMISHDELMVHEETVKNDEEQMETHERLPQ\"\>"], \
"Output",
 CellChangeTimes->{3.538120468514039*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Now suppose we are interested in determining whether the motif \"MRQ\" \
exists in the string. We can use the ",
 Cell[BoxData[
  StyleBox["StringMatchQ",
   FontWeight->"Bold"]]],
 " function. If a  match is found then ",
 Cell[BoxData[
  StyleBox["StringMatchQ",
   FontWeight->"Bold"]]],
 " returns ",
 StyleBox["True",
  FontWeight->"Bold"],
 ", otherwise it returns ",
 StyleBox["False",
  FontWeight->"Bold"]
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["StringMatchQ", "Text"], "[", 
  RowBox[{"mystring1", ",", "\"\<*MRQ*\>\""}], "]"}]], "Input",
 Background->None],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.538120471894302*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "We can determine the location of this motif using the  ",
 Cell[BoxData[
  StyleBox["StringPosition",
   FontWeight->"Bold"]]],
 " function"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["StringPosition", "Text"], "[", 
  RowBox[{"mystring1", ",", "\"\<MRQ\>\""}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"32", ",", "34"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.538120475181284*^9},
 Background->None]
}, Open  ]],

Cell["\<\
In this example the motif appeared only once. Suppose we look for the motif \
\"ETV\"\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["StringPosition", "Text"], "[", 
  RowBox[{"mystring1", ",", "\"\<ETV\>\""}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"8", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"48", ",", "50"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.538120478146081*^9},
 Background->None]
}, Open  ]],

Cell["\<\
In this case the motif appears twice.  We can write our own function to \
determine the number of occurrences of our motif.\
\>", "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{"numOccMotif", "[", 
   RowBox[{"str_String", ",", "motif_String"}], "]"}], ":=", 
  RowBox[{"Length", "[", 
   RowBox[{"StringPosition", "[", 
    RowBox[{"str", ",", "motif"}], "]"}], "]"}]}]], "Input",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numOccMotif", "[", 
  RowBox[{"mystring1", ",", "\"\<ETV\>\""}], "]"}]], "Input",
 Background->None],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.5381204889481707`*^9},
 Background->None]
}, Open  ]],

Cell["\<\
Sometimes it is convenient to know the beginning string position of the \
motif. In the above example this occurred at  positions 8 and 48. We can \
write a simple function that does the task:\
\>", "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{"positionOfMotif", "[", 
   RowBox[{"str_String", ",", "motif_String"}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"First", "[", "#", "]"}], "&"}], ",", 
    RowBox[{"StringPosition", "[", 
     RowBox[{"str", ",", "motif"}], "]"}]}], "]"}]}]], "Input",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"positionOfMotif", "[", 
  RowBox[{"mystring1", ",", "\"\<ETV\>\""}], "]"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"8", ",", "48"}], "}"}]], "Output",
 CellChangeTimes->{3.538120505105509*^9},
 Background->None]
}, Open  ]],

Cell["\<\
In biology one normally is interested in determining whether short segments \
of DNA or protein exist in the parent structure. These motifs are rarely a \
fixed structure, as discussed in the examples above. More often the motif is \
of variable length and in certain locations the base or amino acid is of no \
importance, or belongs to a certain class. Thus the search procedures we used \
in the above example are of not applicable .\
\>", "Text",
 Background->None]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "9. Reading in the PDB file into ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " "
}], "Section",
 Background->None],

Cell[TextData[{
 "In this section we are going to investigate how we can use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to manipulate GenBank (Genetic Sequence Data Bank) files. The data bank \
can be found at the following URL:\n\t\t\t\t",
 ButtonBox["http://www.ncbi.nlm.nih.gov/Genbank/index.html",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://www.ncbi.nlm.nih.gov/Genbank/index.html"], None}],
 "\nOur first task is to download a GenBank file. For this purpose we are \
going to work with the file for the ",
 StyleBox["Homo Sapiens mRNA for AIRE Protein.",
  FontFamily->"Times New Roman"],
 StyleBox[".",
  FontFamily->"Courier New",
  FontSize->13],
 StyleBox[" ",
  FontSize->13],
 "The nucleotide ID for  file is Z97990. Use the above link to connect to the \
web site and then paste in the nucleotide ID given above into the query box. \
Select \"Nucleotide\" in the Search box  Click on \"Go\".  The web page \
should then have  a link Z97990 that gives details of the  file. Open that \
data file and try to obtain a text copy file of the data.  Save your file to \
an appropriate folder on your computer. You can name it anything you like but \
for the purpose of this tutorial I will be referring to the file as \
\"Z97990.txt\"."
}], "Text",
 Background->None],

Cell[TextData[{
 "We are going to make use of the ",
 StyleBox["ReadList",
  FontWeight->"Bold"],
 " function. The first argument to ",
 StyleBox["ReadList",
  FontWeight->"Bold"],
 " is the PATH to your file, expressed as a String. A convenient way of \
obtaining the PATH to your file is to use the ",
 StyleBox["FileBrowse",
  FontWeight->"Bold"],
 " function which is located in the Experimental context. When evaluated, the \
",
 StyleBox["FileBrowse",
  FontWeight->"Bold"],
 " function generates a browse window on your desktop which you can use to \
find your data file that you downloaded from the PDB web site. The second \
argument of ",
 StyleBox["ReadList",
  FontWeight->"Bold"],
 " is the type of objects you want to read. For our purposes ",
 StyleBox["Word",
  FontWeight->"Bold"],
 " will suffice. For later manipulations we want to break up the data file as \
a sequence of lines, such that each line of the file is considered a record \
and represented as a String. We can achieve this by using the ",
 StyleBox["WordSeparators",
  FontWeight->"Bold"],
 " function and select the appropriate separator for your file. In most cases \
this will be \"\\r\" or \"\\n\" which represent  a carriage return or new \
line character. Since the file is quite large we will suppress the output \
using the \";\" command . More details on how to use ReadList can be found by \
clicking on ",
 ButtonBox["ReadList",
  BaseStyle->"RefGuideLink"],
 " . To see the complete file remove the \";\" at the end of the following \
statement:"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"myGenBankfile", "=", 
   RowBox[{"ReadList", "[", 
    RowBox[{
     RowBox[{"Experimental`FileBrowse", "[", "False", "]"}], ",", "Word", ",",
      " ", 
     RowBox[{"WordSeparators", "\[Rule]", 
      RowBox[{"{", "\"\<\\r\>\"", "}"}]}]}], "]"}]}], ";"}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Experimental`FileBrowse", "::", "obs"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(Experimental`FileBrowse\\)\[NoBreak] has been \
superseded by \[NoBreak]\\!\\(SystemDialogInput\\)\[NoBreak], and is now \
obsolete. It will not be included in future versions of Mathematica.\"\>"}]], \
"Message", "MSG",
 CellChangeTimes->{3.538120717170033*^9},
 Background->None]
}, Open  ]],

Cell["Here is what the first 10 lines of the file look like", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"myGenBankfile", "[", 
     RowBox[{"[", "i", "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}], "//", 
  "TableForm"}]], "Input",
 Background->None],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"LOCUS       HSAPECED                2245 bp    mRNA    linear   \
PRI 18-APR-2005\"\>"},
     {"\<\"DEFINITION  Homo Sapiens mRNA for AIRE protein.\"\>"},
     {"\<\"ACCESSION   Z97990\"\>"},
     {"\<\"VERSION     Z97990.1  GI:2665370\"\>"},
     {"\<\"KEYWORDS    Aire protein.\"\>"},
     {"\<\"SOURCE      Homo sapiens (human)\"\>"},
     {"\<\"  ORGANISM  Homo sapiens\"\>"},
     {"\<\"            Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; \
Euteleostomi;\"\>"},
     {"\<\"            Mammalia; Eutheria; Euarchontoglires; Primates; \
Catarrhini;\"\>"},
     {"\<\"            Hominidae; Homo.\"\>"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.53812074426213*^9},
 Background->None]
}, Open  ]],

Cell["\<\
 In the above output we have a LOCUS, DEFINITION, ACCESSION, etc record \
types. But there are also lines without a record type, e.g. the line \
containing the string

\t\t\"Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi;\"\
\>", "Text",
 Background->None],

Cell["\<\
Note also that each record of the file is a string with lots of white space.\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"myGenBankfile", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "//", "FullForm"}]], "Input",
 Background->None],

Cell[BoxData[
 TagBox[
  StyleBox[
   "\"\<LOCUS       HSAPECED                2245 bp    mRNA    linear   PRI \
18-APR-2005\>\"",
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.538120778319376*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "The number of records in this file can be determined using the ",
 StyleBox["Length",
  FontWeight->"Bold"],
 " function"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "myGenBankfile", "]"}]], "Input",
 Background->None],

Cell[BoxData["111"], "Output",
 CellChangeTimes->{3.5381207815671577`*^9},
 Background->None]
}, Open  ]],

Cell["\<\
If we look at the full file structure and we are interested in getting the \
DNA sequence data, we see it is not possible to select the DNA rows from this \
list by record type as the DNA rows have no record type\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData["myGenBankfile"], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"LOCUS       HSAPECED                2245 bp    mRNA    linear  \
 PRI 18-APR-2005\"\>", 
   ",", "\<\"DEFINITION  Homo Sapiens mRNA for AIRE protein.\"\>", 
   ",", "\<\"ACCESSION   Z97990\"\>", 
   ",", "\<\"VERSION     Z97990.1  GI:2665370\"\>", 
   ",", "\<\"KEYWORDS    Aire protein.\"\>", 
   ",", "\<\"SOURCE      Homo sapiens (human)\"\>", 
   ",", "\<\"  ORGANISM  Homo sapiens\"\>", 
   ",", "\<\"            Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; \
Euteleostomi;\"\>", 
   ",", "\<\"            Mammalia; Eutheria; Euarchontoglires; Primates; \
Catarrhini;\"\>", ",", "\<\"            Hominidae; Homo.\"\>", 
   ",", "\<\"REFERENCE   1\"\>", 
   ",", "\<\"  AUTHORS   Aaltonen,J., Bjrses,P., Perheentupa,J., \
Horelli-Kuitunen,N.,\"\>", 
   ",", "\<\"            Paloti,A., Peltonen,L., Lee,Y.S., Francis,F., \
Hennig,S., Thiel,C.,\"\>", 
   ",", "\<\"            Lehrach,H. and Yaspo,M.L.\"\>", 
   ",", "\<\"  TITLE     An autoimmune disease, APECED, caused by mutations \
in a novel gene\"\>", 
   ",", "\<\"            featuring two PHD-type zinc-finger domains. The \
Finnish-German\"\>", ",", "\<\"            APECED Consortium. Autoimmune\"\>",
    ",", "\<\"            Polyendocrinopathy-Candidiasis-Ectodermal Dystrophy\
\"\>", ",", "\<\"  JOURNAL   Nat. Genet. 17 (4), 399-403 (1997)\"\>", 
   ",", "\<\"   PUBMED   9398840\"\>", 
   ",", "\<\"REFERENCE   2  (bases 1 to 2245)\"\>", 
   ",", "\<\"  AUTHORS   Yaspo,M.L.\"\>", 
   ",", "\<\"  TITLE     Direct Submission\"\>", 
   ",", "\<\"  JOURNAL   Submitted (21-JUL-1997) Max Planck Institut fur \
Molekulare Genetik,\"\>", 
   ",", "\<\"            Ihnestrasse 73, Berlin D-14195, Germany\"\>", 
   ",", "\<\"  REMARK    revised by submitter 24-SEP-1997\"\>", 
   ",", "\<\"FEATURES             Location/Qualifiers\"\>", 
   ",", "\<\"     source          1..2245\"\>", 
   ",", "\<\"                     /organism=\\\"Homo sapiens\\\"\"\>", 
   ",", "\<\"                     /mol_type=\\\"mRNA\\\"\"\>", 
   ",", "\<\"                     /db_xref=\\\"taxon:9606\\\"\"\>", 
   ",", "\<\"                     /chromosome=\\\"21\\\"\"\>", 
   ",", "\<\"                     /tissue_type=\\\"thymus\\\"\"\>", 
   ",", "\<\"     source          1..1810\"\>", 
   ",", "\<\"                     /organism=\\\"Homo sapiens\\\"\"\>", 
   ",", "\<\"                     /mol_type=\\\"mRNA\\\"\"\>", 
   ",", "\<\"                     /db_xref=\\\"taxon:9606\\\"\"\>", 
   ",", "\<\"                     /chromosome=\\\"21\\\"\"\>", 
   ",", "\<\"                     /clone=\\\"B1-1\\\"\"\>", 
   ",", "\<\"                     /tissue_type=\\\"thymus\\\"\"\>", 
   ",", "\<\"                     /clone_lib=\\\"lambda GT11 from Clontech \
(cat# hl5010B)\\\"\"\>", ",", "\<\"     source          1811..2180\"\>", 
   ",", "\<\"                     /organism=\\\"Homo sapiens\\\"\"\>", 
   ",", "\<\"                     /mol_type=\\\"mRNA\\\"\"\>", 
   ",", "\<\"                     /db_xref=\\\"taxon:9606\\\"\"\>", 
   ",", "\<\"                     /chromosome=\\\"21\\\"\"\>", 
   ",", "\<\"                     /clone=\\\"D1-1\\\"\"\>", 
   ",", "\<\"                     /tissue_type=\\\"thymus\\\"\"\>", 
   ",", "\<\"                     /clone_lib=\\\"lambda GT11 from Clontech \
(cat# hl5010B)\\\"\"\>", ",", "\<\"     CDS             121..1758\"\>", 
   ",", "\<\"                     /codon_start=1\"\>", 
   ",", "\<\"                     /product=\\\"AIRE protein\\\"\"\>", 
   ",", "\<\"                     /protein_id=\\\"CAB10790.1\\\"\"\>", 
   ",", "\<\"                     /db_xref=\\\"GI:2665371\\\"\"\>", 
   ",", "\<\"                     /db_xref=\\\"GOA:O43918\\\"\"\>", 
   ",", "\<\"                     /db_xref=\\\"InterPro:IPR000770\\\"\"\>", 
   ",", "\<\"                     /db_xref=\\\"InterPro:IPR001965\\\"\"\>", 
   ",", "\<\"                     /db_xref=\\\"InterPro:IPR004865\\\"\"\>", 
   ",", "\<\"                     /db_xref=\\\"InterPro:IPR008087\\\"\"\>", 
   ",", "\<\"                     /db_xref=\\\"InterPro:IPR010919\\\"\"\>", 
   ",", "\<\"                     /db_xref=\\\"InterPro:IPR011011\\\"\"\>", 
   ",", "\<\"                     \
/db_xref=\\\"UniProtKB/Swiss-Prot:O43918\\\"\"\>", 
   ",", "\<\"                     \
/translation=\\\"MATDAALRRLLRLHRTEIAVAVDSAFPLLHALADHDVVPEDKFQ\"\>", 
   ",", "\<\"                     \
ETLHLKEKEGCPQAFHALLSWLLTQDSTAILDFWRVLFKDYNLERYGRLQPILDSFPK\"\>", 
   ",", "\<\"                     \
DVDLSQPRKGRKPPAVPKALVPPPRLPTKRKASEEARAAAPAALTPRGTASPGSQLKA\"\>", 
   ",", "\<\"                     \
KPPKKPESSAEQQRLPLGNGIQTMSASVQRAVAMSSGDVPGARGAVEGILIQQVFESG\"\>", 
   ",", "\<\"                     \
GSKKCIQVGGEFYTPSKFEDSGSGKNKARSSSGPKPLVRAKGAQGAAPGGGEARLGQQ\"\>", 
   ",", "\<\"                     \
GSVPAPLALPSDPQLHQKNEDECAVCRDGGELICCDGCPRAFHLACLSPPLREIPSGT\"\>", 
   ",", "\<\"                     \
WRCSSCLQATVQEVQPRAEEPRPQEPPVETPLPPGLRSAGEEVRGPPGEPLAGMDTTL\"\>", 
   ",", "\<\"                     \
VYKHLPAPPSAAPLPGLDSSALHPLLCVGPEGQQNLAPGARCGVCGDGTDVLRCTHCA\"\>", 
   ",", "\<\"                     \
AAFHWRCHFPAGTSRPGTGLRCRSCSGDVTPAPVEGVLAPSPARLAPGPAKDDTASHE\"\>", 
   ",", "\<\"                     PALHRDDLESLLSEHTFDGILQWAIQSMARPAAPFPS\\\"\"\
\>", ",", "\<\"ORIGIN      \"\>", 
   ",", "\<\"        1 cgggcgcaca gccggcgcgg aggccccaca gccccgccgg gacccgaggc \
caagcgaggg\"\>", 
   ",", "\<\"       61 gctgccagtg tcccgggacc caccgcgtcc gccccagccc cgggtccccg \
cgcccacccc\"\>", 
   ",", "\<\"      121 atggcgacgg acgcggcgct acgccggctt ctgaggctgc accgcacgga \
gatcgcggtg\"\>", 
   ",", "\<\"      181 gccgtggaca gcgccttccc actgctgcac gcgctggctg accacgacgt \
ggtccccgag\"\>", 
   ",", "\<\"      241 gacaagtttc aggagacgct tcatctgaag gaaaaggagg gctgccccca \
ggccttccac\"\>", 
   ",", "\<\"      301 gccctcctgt cctggctgct gacccaggac tccacagcca tcctggactt \
ctggagggtg\"\>", 
   ",", "\<\"      361 ctgttcaagg actacaacct ggagcgctat ggccggctgc agcccatcct \
ggacagcttc\"\>", 
   ",", "\<\"      421 cccaaagatg tggacctcag ccagccccgg aaggggagga agcccccggc \
cgtccccaag\"\>", 
   ",", "\<\"      481 gctttggtac cgccacccag actccccacc aagaggaagg cctcagaaga \
ggctcgagct\"\>", 
   ",", "\<\"      541 gccgcgccag cagccctgac tccaaggggc accgccagcc caggctctca \
actgaaggcc\"\>", 
   ",", "\<\"      601 aagcccccca agaagccgga gagcagcgca gagcagcagc gccttccact \
cgggaacggg\"\>", 
   ",", "\<\"      661 attcagacca tgtcagcttc agtccagaga gctgtggcca tgtcctccgg \
ggacgtcccg\"\>", 
   ",", "\<\"      721 ggagcccgag gggccgtgga ggggatcctc atccagcagg tgtttgagtc \
aggcggctcc\"\>", 
   ",", "\<\"      781 aagaagtgca tccaggttgg tggggagttc tacactccca gcaagttcga \
agactccggc\"\>", 
   ",", "\<\"      841 agtgggaaga acaaggcccg cagcagcagt ggcccgaagc ctctggttcg \
agccaaggga\"\>", 
   ",", "\<\"      901 gcccagggcg ctgcccccgg tggaggtgag gctaggctgg gccagcaggg \
cagcgttccc\"\>", 
   ",", "\<\"      961 gcccctctgg ccctccccag tgacccccag ctccaccaga agaatgagga \
cgagtgtgcc\"\>", 
   ",", "\<\"     1021 gtgtgtcggg acggcgggga gctcatctgc tgtgacggct gccctcgggc \
cttccacctg\"\>", 
   ",", "\<\"     1081 gcctgcctgt cccctccgct ccgggagatc cccagtggga cctggaggtg \
ctccagctgc\"\>", 
   ",", "\<\"     1141 ctgcaggcaa cagtccagga ggtgcagccc cgggcagagg agccccggcc \
ccaggagcca\"\>", 
   ",", "\<\"     1201 cccgtggaga ccccgctccc cccggggctt aggtcggcgg gagaggaggt \
aagaggtcca\"\>", 
   ",", "\<\"     1261 cctggggaac ccctagccgg catggacacg actcttgtct acaagcacct \
gccggctccg\"\>", 
   ",", "\<\"     1321 ccttctgcag ccccgctgcc agggctggac tcctcggccc tgcaccccct \
actgtgtgtg\"\>", 
   ",", "\<\"     1381 ggtcctgagg gtcagcagaa cctggctcct ggtgcgcgtt gcggggtgtg \
cggagatggt\"\>", 
   ",", "\<\"     1441 acggacgtgc tgcggtgtac tcactgcgcc gctgccttcc actggcgctg \
ccacttccca\"\>", 
   ",", "\<\"     1501 gccggcacct cccggcccgg gacgggcctg cgctgcagat cctgctcagg \
agacgtgacc\"\>", 
   ",", "\<\"     1561 ccagcccctg tggagggggt gctggccccc agccccgccc gcctggcccc \
tgggcctgcc\"\>", 
   ",", "\<\"     1621 aaggatgaca ctgccagtca cgagcccgct ctgcacaggg atgacctgga \
gtcccttctg\"\>", 
   ",", "\<\"     1681 agcgagcaca ccttcgatgg catcctgcag tgggccatcc agagcatggc \
ccgtccggcg\"\>", 
   ",", "\<\"     1741 gcccccttcc cctcctgacc ccagatggcc gggacatgca gctctgatga \
gagagtgctg\"\>", 
   ",", "\<\"     1801 agaaggacac ctccttcctc agtcctggaa gccggccggc tgggatcaag \
aaggggacag\"\>", 
   ",", "\<\"     1861 cgccacctct tgtcagtgct cggctgtaaa cagctctgtg tttctgggga \
caccagccat\"\>", 
   ",", "\<\"     1921 catgtgcctg gaaattaaac cctgccccac ttctctactc tggaagtccc \
cgggagcctc\"\>", 
   ",", "\<\"     1981 tccttgcctg gtgacctact aaaaatataa aaattagctg ggtgtggtgg \
tgggtgcctg\"\>", 
   ",", "\<\"     2041 taatcccagc tacatgggag cctgaggcat gagaatcact tgaactcggg \
aggtggaggt\"\>", 
   ",", "\<\"     2101 tgcagtgagc tgagattgcg ccactgcact ccagtctggt cggcaagagt \
gagactccgt\"\>", 
   ",", "\<\"     2161 ctcaaaaaca aaacaaaaaa accacataac ataaatttat catctcgacc \
acttttcagt\"\>", ",", "\<\"     2221 tcagtggcat tcacatctca tgtaa\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.538120795126741*^9},
 Background->None]
}, Open  ]],

Cell["\<\
We observe however  that the DNA sequence begins after the row with the \
record type  ORIGIN. Hence if we can determine the row position that contains \
ORIGIN, we can readily select all the remaining rows. To find the row \
containing ORIGIN, we use Select with StringMatchQ to select the contents of \
that row, and then use the contents as a string pattern that can be used with \
Position\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pat1", "=", 
  RowBox[{"First", "[", 
   RowBox[{"Select", "[", 
    RowBox[{"myGenBankfile", ",", 
     RowBox[{
      RowBox[{"StringMatchQ", "[", 
       RowBox[{"#", ",", "\"\<ORIGIN*\>\""}], "]"}], "&"}]}], "]"}], 
   "]"}]}]], "Input",
 Background->None],

Cell[BoxData["\<\"ORIGIN      \"\>"], "Output",
 CellChangeTimes->{3.538120806771947*^9},
 Background->None]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OriginRowNumber", "=", 
  RowBox[{"First", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Position", "[", 
     RowBox[{"myGenBankfile", ",", 
      RowBox[{"x_String", "/;", 
       RowBox[{"x", "\[Equal]", "pat1"}]}]}], "]"}], "]"}], "]"}]}]], "Input",\

 Background->None],

Cell[BoxData["73"], "Output",
 CellChangeTimes->{3.5381208093869658`*^9},
 Background->None]
}, Open  ]],

Cell["\<\
We then select all the rows after the Record Type ORIGIN, except the last row \
which has a \"\\\\\" character. The result is given below:\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DNAseqence", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"myGenBankfile", "[", 
     RowBox[{"[", "i", "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"OriginRowNumber", "+", "1"}], ",", 
      RowBox[{
       RowBox[{"Length", "[", "myGenBankfile", "]"}], "-", "1"}]}], "}"}]}], 
   "]"}]}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"        1 cgggcgcaca gccggcgcgg aggccccaca gccccgccgg \
gacccgaggc caagcgaggg\"\>", 
   ",", "\<\"       61 gctgccagtg tcccgggacc caccgcgtcc gccccagccc cgggtccccg \
cgcccacccc\"\>", 
   ",", "\<\"      121 atggcgacgg acgcggcgct acgccggctt ctgaggctgc accgcacgga \
gatcgcggtg\"\>", 
   ",", "\<\"      181 gccgtggaca gcgccttccc actgctgcac gcgctggctg accacgacgt \
ggtccccgag\"\>", 
   ",", "\<\"      241 gacaagtttc aggagacgct tcatctgaag gaaaaggagg gctgccccca \
ggccttccac\"\>", 
   ",", "\<\"      301 gccctcctgt cctggctgct gacccaggac tccacagcca tcctggactt \
ctggagggtg\"\>", 
   ",", "\<\"      361 ctgttcaagg actacaacct ggagcgctat ggccggctgc agcccatcct \
ggacagcttc\"\>", 
   ",", "\<\"      421 cccaaagatg tggacctcag ccagccccgg aaggggagga agcccccggc \
cgtccccaag\"\>", 
   ",", "\<\"      481 gctttggtac cgccacccag actccccacc aagaggaagg cctcagaaga \
ggctcgagct\"\>", 
   ",", "\<\"      541 gccgcgccag cagccctgac tccaaggggc accgccagcc caggctctca \
actgaaggcc\"\>", 
   ",", "\<\"      601 aagcccccca agaagccgga gagcagcgca gagcagcagc gccttccact \
cgggaacggg\"\>", 
   ",", "\<\"      661 attcagacca tgtcagcttc agtccagaga gctgtggcca tgtcctccgg \
ggacgtcccg\"\>", 
   ",", "\<\"      721 ggagcccgag gggccgtgga ggggatcctc atccagcagg tgtttgagtc \
aggcggctcc\"\>", 
   ",", "\<\"      781 aagaagtgca tccaggttgg tggggagttc tacactccca gcaagttcga \
agactccggc\"\>", 
   ",", "\<\"      841 agtgggaaga acaaggcccg cagcagcagt ggcccgaagc ctctggttcg \
agccaaggga\"\>", 
   ",", "\<\"      901 gcccagggcg ctgcccccgg tggaggtgag gctaggctgg gccagcaggg \
cagcgttccc\"\>", 
   ",", "\<\"      961 gcccctctgg ccctccccag tgacccccag ctccaccaga agaatgagga \
cgagtgtgcc\"\>", 
   ",", "\<\"     1021 gtgtgtcggg acggcgggga gctcatctgc tgtgacggct gccctcgggc \
cttccacctg\"\>", 
   ",", "\<\"     1081 gcctgcctgt cccctccgct ccgggagatc cccagtggga cctggaggtg \
ctccagctgc\"\>", 
   ",", "\<\"     1141 ctgcaggcaa cagtccagga ggtgcagccc cgggcagagg agccccggcc \
ccaggagcca\"\>", 
   ",", "\<\"     1201 cccgtggaga ccccgctccc cccggggctt aggtcggcgg gagaggaggt \
aagaggtcca\"\>", 
   ",", "\<\"     1261 cctggggaac ccctagccgg catggacacg actcttgtct acaagcacct \
gccggctccg\"\>", 
   ",", "\<\"     1321 ccttctgcag ccccgctgcc agggctggac tcctcggccc tgcaccccct \
actgtgtgtg\"\>", 
   ",", "\<\"     1381 ggtcctgagg gtcagcagaa cctggctcct ggtgcgcgtt gcggggtgtg \
cggagatggt\"\>", 
   ",", "\<\"     1441 acggacgtgc tgcggtgtac tcactgcgcc gctgccttcc actggcgctg \
ccacttccca\"\>", 
   ",", "\<\"     1501 gccggcacct cccggcccgg gacgggcctg cgctgcagat cctgctcagg \
agacgtgacc\"\>", 
   ",", "\<\"     1561 ccagcccctg tggagggggt gctggccccc agccccgccc gcctggcccc \
tgggcctgcc\"\>", 
   ",", "\<\"     1621 aaggatgaca ctgccagtca cgagcccgct ctgcacaggg atgacctgga \
gtcccttctg\"\>", 
   ",", "\<\"     1681 agcgagcaca ccttcgatgg catcctgcag tgggccatcc agagcatggc \
ccgtccggcg\"\>", 
   ",", "\<\"     1741 gcccccttcc cctcctgacc ccagatggcc gggacatgca gctctgatga \
gagagtgctg\"\>", 
   ",", "\<\"     1801 agaaggacac ctccttcctc agtcctggaa gccggccggc tgggatcaag \
aaggggacag\"\>", 
   ",", "\<\"     1861 cgccacctct tgtcagtgct cggctgtaaa cagctctgtg tttctgggga \
caccagccat\"\>", 
   ",", "\<\"     1921 catgtgcctg gaaattaaac cctgccccac ttctctactc tggaagtccc \
cgggagcctc\"\>", 
   ",", "\<\"     1981 tccttgcctg gtgacctact aaaaatataa aaattagctg ggtgtggtgg \
tgggtgcctg\"\>", 
   ",", "\<\"     2041 taatcccagc tacatgggag cctgaggcat gagaatcact tgaactcggg \
aggtggaggt\"\>", 
   ",", "\<\"     2101 tgcagtgagc tgagattgcg ccactgcact ccagtctggt cggcaagagt \
gagactccgt\"\>", 
   ",", "\<\"     2161 ctcaaaaaca aaacaaaaaa accacataac ataaatttat catctcgacc \
acttttcagt\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.538120828974028*^9},
 Background->None]
}, Open  ]],

Cell["\<\
To extract the string data from DNAsequence, we convert each row into a \
Stream , use ReadList, with the Null string as a record separator, drop the \
first element which is the position number of the base in that record, and \
then use StringJoin to obtain the final  base sequence for our mRNA\
\>", "Text",
 Background->None],

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"DNAseqString", "=", "\"\<\>\""}], ";", 
    RowBox[{"i", "=", "1"}]}], ",", 
   RowBox[{"i", "<", 
    RowBox[{
     RowBox[{"Length", "[", "DNAseqence", "]"}], "+", "1"}]}], ",", 
   RowBox[{
    RowBox[{"s", "=", 
     RowBox[{"StringToStream", "[", 
      RowBox[{"DNAseqence", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";", 
    RowBox[{"DNAseqString", "=", 
     RowBox[{"DNAseqString", "<>", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"ReadList", "[", 
          RowBox[{"s", ",", "Word", ",", 
           RowBox[{"RecordSeparators", "\[Rule]", 
            RowBox[{"{", "\"\< \>\"", "}"}]}]}], "]"}], ",", "1"}], "]"}], 
       "]"}]}]}], ";", 
    RowBox[{"i", "++"}]}]}], "]"}]], "Input",
 Background->None],

Cell["Here is the  sequence", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData["DNAseqString"], "Input",
 Background->None],

Cell[BoxData["\<\"\
cgggcgcacagccggcgcggaggccccacagccccgccgggacccgaggccaagcgaggggctgccagtgtcccggga\
cccaccgcgtccgccccagccccgggtccccgcgcccaccccatggcgacggacgcggcgctacgccggcttctgagg\
ctgcaccgcacggagatcgcggtggccgtggacagcgccttcccactgctgcacgcgctggctgaccacgacgtggtc\
cccgaggacaagtttcaggagacgcttcatctgaaggaaaaggagggctgcccccaggccttccacgccctcctgtcc\
tggctgctgacccaggactccacagccatcctggacttctggagggtgctgttcaaggactacaacctggagcgctat\
ggccggctgcagcccatcctggacagcttccccaaagatgtggacctcagccagccccggaaggggaggaagcccccg\
gccgtccccaaggctttggtaccgccacccagactccccaccaagaggaaggcctcagaagaggctcgagctgccgcg\
ccagcagccctgactccaaggggcaccgccagcccaggctctcaactgaaggccaagccccccaagaagccggagagc\
agcgcagagcagcagcgccttccactcgggaacgggattcagaccatgtcagcttcagtccagagagctgtggccatg\
tcctccggggacgtcccgggagcccgaggggccgtggaggggatcctcatccagcaggtgtttgagtcaggcggctcc\
aagaagtgcatccaggttggtggggagttctacactcccagcaagttcgaagactccggcagtgggaagaacaaggcc\
cgcagcagcagtggcccgaagcctctggttcgagccaagggagcccagggcgctgcccccggtggaggtgaggctagg\
ctgggccagcagggcagcgttcccgcccctctggccctccccagtgacccccagctccaccagaagaatgaggacgag\
tgtgccgtgtgtcgggacggcggggagctcatctgctgtgacggctgccctcgggccttccacctggcctgcctgtcc\
cctccgctccgggagatccccagtgggacctggaggtgctccagctgcctgcaggcaacagtccaggaggtgcagccc\
cgggcagaggagccccggccccaggagccacccgtggagaccccgctccccccggggcttaggtcggcgggagaggag\
gtaagaggtccacctggggaacccctagccggcatggacacgactcttgtctacaagcacctgccggctccgccttct\
gcagccccgctgccagggctggactcctcggccctgcaccccctactgtgtgtgggtcctgagggtcagcagaacctg\
gctcctggtgcgcgttgcggggtgtgcggagatggtacggacgtgctgcggtgtactcactgcgccgctgccttccac\
tggcgctgccacttcccagccggcacctcccggcccgggacgggcctgcgctgcagatcctgctcaggagacgtgacc\
ccagcccctgtggagggggtgctggcccccagccccgcccgcctggcccctgggcctgccaaggatgacactgccagt\
cacgagcccgctctgcacagggatgacctggagtcccttctgagcgagcacaccttcgatggcatcctgcagtgggcc\
atccagagcatggcccgtccggcggcccccttcccctcctgaccccagatggccgggacatgcagctctgatgagaga\
gtgctgagaaggacacctccttcctcagtcctggaagccggccggctgggatcaagaaggggacagcgccacctcttg\
tcagtgctcggctgtaaacagctctgtgtttctggggacaccagccatcatgtgcctggaaattaaaccctgccccac\
ttctctactctggaagtccccgggagcctctccttgcctggtgacctactaaaaatataaaaattagctgggtgtggt\
ggtgggtgcctgtaatcccagctacatgggagcctgaggcatgagaatcacttgaactcgggaggtggaggttgcagt\
gagctgagattgcgccactgcactccagtctggtcggcaagagtgagactccgtctcaaaaacaaaacaaaaaaacca\
cataacataaatttatcatctcgaccacttttcagt\"\>"], "Output",
 CellChangeTimes->{3.538121146332562*^9},
 Background->None]
}, Open  ]],

Cell["\<\
We can use the same ideas to extract the protein sequence that this gene \
translates. Again if we inspect the original data file we see that  protein \
sequence begins with the row that has the record type \"/translation=.....\". \
We extract the contents of that row using theSelect function as done \
previously\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pat2", "=", 
  RowBox[{"First", "[", 
   RowBox[{"Select", "[", 
    RowBox[{"myGenBankfile", ",", 
     RowBox[{
      RowBox[{"StringMatchQ", "[", 
       RowBox[{"#", ",", "\"\<*translation*\>\""}], "]"}], "&"}]}], "]"}], 
   "]"}]}]], "Input",
 Background->None],

Cell[BoxData["\<\"                     \
/translation=\\\"MATDAALRRLLRLHRTEIAVAVDSAFPLLHALADHDVVPEDKFQ\"\>"], "Output",\

 CellChangeTimes->{3.5381212456721973`*^9},
 Background->None]
}, Open  ]],

Cell["\<\
W also note that the row after the sequence ends has the record type \"BASE \
....\". We extract out its contents as well\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pat3", "=", 
  RowBox[{"First", "[", 
   RowBox[{"Select", "[", 
    RowBox[{"myGenBankfile", ",", 
     RowBox[{
      RowBox[{"StringMatchQ", "[", 
       RowBox[{"#", ",", "\"\<ORIGIN*\>\""}], "]"}], "&"}]}], "]"}], 
   "]"}]}]], "Input",
 Background->None],

Cell[BoxData["\<\"ORIGIN      \"\>"], "Output",
 CellChangeTimes->{3.538121337793981*^9},
 Background->None]
}, Open  ]],

Cell["The begin and end row numbers are then found as before", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"proteinSeqStart", "=", 
  RowBox[{"First", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Position", "[", 
     RowBox[{"myGenBankfile", ",", 
      RowBox[{"x_String", "/;", 
       RowBox[{"x", "\[Equal]", "pat2"}]}]}], "]"}], "]"}], "]"}]}], "\n", 
 RowBox[{"proteinSeqEnd", "=", 
  RowBox[{
   RowBox[{"First", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Position", "[", 
      RowBox[{"myGenBankfile", ",", 
       RowBox[{"x_String", "/;", 
        RowBox[{"x", "\[Equal]", "pat3"}]}]}], "]"}], "]"}], "]"}], "-", 
   "1"}]}]}], "Input",
 Background->None],

Cell[BoxData["63"], "Output",
 CellChangeTimes->{{3.538121330308601*^9, 3.538121341762855*^9}},
 Background->None],

Cell[BoxData["72"], "Output",
 CellChangeTimes->{{3.538121330308601*^9, 3.5381213417728567`*^9}},
 Background->None]
}, Open  ]],

Cell["\<\
We use this information to extract our all the rows with the protein sequence \
data\
\>", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"proteinSeq", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"myGenBankfile", "[", 
     RowBox[{"[", "i", "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "proteinSeqStart", ",", "proteinSeqEnd"}], "}"}]}], 
   "]"}]}]], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"                     \
/translation=\\\"MATDAALRRLLRLHRTEIAVAVDSAFPLLHALADHDVVPEDKFQ\"\>", 
   ",", "\<\"                     \
ETLHLKEKEGCPQAFHALLSWLLTQDSTAILDFWRVLFKDYNLERYGRLQPILDSFPK\"\>", 
   ",", "\<\"                     \
DVDLSQPRKGRKPPAVPKALVPPPRLPTKRKASEEARAAAPAALTPRGTASPGSQLKA\"\>", 
   ",", "\<\"                     \
KPPKKPESSAEQQRLPLGNGIQTMSASVQRAVAMSSGDVPGARGAVEGILIQQVFESG\"\>", 
   ",", "\<\"                     \
GSKKCIQVGGEFYTPSKFEDSGSGKNKARSSSGPKPLVRAKGAQGAAPGGGEARLGQQ\"\>", 
   ",", "\<\"                     \
GSVPAPLALPSDPQLHQKNEDECAVCRDGGELICCDGCPRAFHLACLSPPLREIPSGT\"\>", 
   ",", "\<\"                     \
WRCSSCLQATVQEVQPRAEEPRPQEPPVETPLPPGLRSAGEEVRGPPGEPLAGMDTTL\"\>", 
   ",", "\<\"                     \
VYKHLPAPPSAAPLPGLDSSALHPLLCVGPEGQQNLAPGARCGVCGDGTDVLRCTHCA\"\>", 
   ",", "\<\"                     \
AAFHWRCHFPAGTSRPGTGLRCRSCSGDVTPAPVEGVLAPSPARLAPGPAKDDTASHE\"\>", 
   ",", "\<\"                     PALHRDDLESLLSEHTFDGILQWAIQSMARPAAPFPS\\\"\"\
\>"}], "}"}]], "Output",
 CellChangeTimes->{3.538121391192997*^9},
 Background->None]
}, Open  ]],

Cell[TextData[{
 "Our final task is to create a single string for the data. This can be done \
using ",
 StyleBox["StringJoin",
  FontWeight->"Bold"],
 "; then we use ",
 StyleBox["StringReplace",
  FontWeight->"Bold"],
 " to remove extraneous characters and blank space"
}], "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"s1", "=", 
  RowBox[{"StringReplace", "[", 
   RowBox[{
    RowBox[{"StringJoin", "[", "proteinSeq", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<\\\"\>\"", "->", "\"\<\>\""}], ",", 
      RowBox[{"\"\< \>\"", "\[Rule]", "\"\<\>\""}], ",", 
      RowBox[{"\"\</translation=\>\"", "->", "\"\<\>\""}]}], "}"}]}], 
   "]"}]}]], "Input",
 Background->None],

Cell[BoxData["\<\"\
MATDAALRRLLRLHRTEIAVAVDSAFPLLHALADHDVVPEDKFQETLHLKEKEGCPQAFHALLSWLLTQDSTAILDFW\
RVLFKDYNLERYGRLQPILDSFPKDVDLSQPRKGRKPPAVPKALVPPPRLPTKRKASEEARAAAPAALTPRGTASPGS\
QLKAKPPKKPESSAEQQRLPLGNGIQTMSASVQRAVAMSSGDVPGARGAVEGILIQQVFESGGSKKCIQVGGEFYTPS\
KFEDSGSGKNKARSSSGPKPLVRAKGAQGAAPGGGEARLGQQGSVPAPLALPSDPQLHQKNEDECAVCRDGGELICCD\
GCPRAFHLACLSPPLREIPSGTWRCSSCLQATVQEVQPRAEEPRPQEPPVETPLPPGLRSAGEEVRGPPGEPLAGMDT\
TLVYKHLPAPPSAAPLPGLDSSALHPLLCVGPEGQQNLAPGARCGVCGDGTDVLRCTHCAAAFHWRCHFPAGTSRPGT\
GLRCRSCSGDVTPAPVEGVLAPSPARLAPGPAKDDTASHEPALHRDDLESLLSEHTFDGILQWAIQSMARPAAPFPS\
\"\>"], "Output",
 CellChangeTimes->{3.538121410783848*^9},
 Background->None]
}, Open  ]],

Cell["\<\
Since GenBank files always have this structure we can use the ideas given \
above to create a general function that takes as its argument a GenBank file \
name and process all the steps together to produce a list: the first entry \
being the DNA sequence, the second being the protein sequence:\
\>", "Text",
 Background->None],

Cell[BoxData[
 RowBox[{
  RowBox[{"extractGenBankData", ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "myGenBankfile", ",", "OriginRowNumber", ",", "DNAseqence", ",", "s", 
       ",", "DNAseqString", ",", "proteinseqString", ",", "proteinSeqStart", 
       ",", "proteinSeqEnd", ",", "proteinSeq"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"myGenBankfile", "=", 
       RowBox[{"ReadList", "[", 
        RowBox[{
         RowBox[{"Experimental`FileBrowse", "[", "False", "]"}], ",", "Word", 
         ",", " ", 
         RowBox[{"WordSeparators", "\[Rule]", 
          RowBox[{"{", "\"\<\\r\>\"", "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"OriginRowNumber", "=", 
       RowBox[{"First", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Position", "[", 
          RowBox[{"myGenBankfile", ",", 
           RowBox[{"x_String", "/;", 
            RowBox[{"x", "\[Equal]", 
             RowBox[{"First", "[", 
              RowBox[{"Select", "[", 
               RowBox[{"myGenBankfile", ",", 
                RowBox[{
                 RowBox[{"StringMatchQ", "[", 
                  RowBox[{"#", ",", "\"\<ORIGIN*\>\""}], "]"}], "&"}]}], 
               "]"}], "]"}]}]}]}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"DNAseqence", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"myGenBankfile", "[", 
          RowBox[{"[", "i", "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"OriginRowNumber", "+", "1"}], ",", 
           RowBox[{"Length", "[", "myGenBankfile", "]"}]}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"DNAseqString", "=", "\"\<\>\""}], ";", 
         RowBox[{"i", "=", "1"}]}], ",", 
        RowBox[{"i", "<", 
         RowBox[{
          RowBox[{"Length", "[", "DNAseqence", "]"}], "+", "1"}]}], ",", 
        RowBox[{
         RowBox[{"s", "=", 
          RowBox[{"StringToStream", "[", 
           RowBox[{"DNAseqence", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";", 
         RowBox[{"DNAseqString", "=", 
          RowBox[{"DNAseqString", "<>", 
           RowBox[{"StringJoin", "[", 
            RowBox[{"Drop", "[", 
             RowBox[{
              RowBox[{"ReadList", "[", 
               RowBox[{"s", ",", "Word", ",", 
                RowBox[{"RecordSeparators", "\[Rule]", 
                 RowBox[{"{", "\"\< \>\"", "}"}]}]}], "]"}], ",", "1"}], 
             "]"}], "]"}]}]}], ";", 
         RowBox[{"i", "++"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"proteinSeqStart", "=", 
       RowBox[{"First", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Position", "[", 
          RowBox[{"myGenBankfile", ",", 
           RowBox[{"x_String", "/;", 
            RowBox[{"x", "\[Equal]", 
             RowBox[{"First", "[", 
              RowBox[{"Select", "[", 
               RowBox[{"myGenBankfile", ",", 
                RowBox[{
                 RowBox[{"StringMatchQ", "[", 
                  RowBox[{"#", ",", "\"\<*translation*\>\""}], "]"}], "&"}]}],
                "]"}], "]"}]}]}]}], "]"}], "]"}], "]"}]}], ";", "\n", 
      RowBox[{"proteinSeqEnd", "=", 
       RowBox[{"First", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Position", "[", 
           RowBox[{"myGenBankfile", ",", 
            RowBox[{"x_String", "/;", 
             RowBox[{"x", "\[Equal]", 
              RowBox[{"First", "[", 
               RowBox[{"Select", "[", 
                RowBox[{"myGenBankfile", ",", 
                 RowBox[{
                  RowBox[{"StringMatchQ", "[", 
                   RowBox[{"#", ",", "\"\<ORIGIN*\>\""}], "]"}], "&"}]}], 
                "]"}], "]"}]}]}]}], "]"}], "]"}], "-", "1"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"proteinSeq", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"myGenBankfile", "[", 
          RowBox[{"[", "i", "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "proteinSeqStart", ",", "proteinSeqEnd"}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"proteinseqString", "=", 
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", "proteinSeq", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<\\\"\>\"", "->", "\"\<\>\""}], ",", 
           RowBox[{"\"\< \>\"", "\[Rule]", "\"\<\>\""}], ",", 
           RowBox[{"\"\</translation=\>\"", "->", "\"\<\>\""}]}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"DNAseqString", ",", "proteinseqString"}], "}"}]}]}], "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 Background->None],

Cell["Lt us try it out on our earlier file", "Text",
 Background->None],

Cell[CellGroupData[{

Cell[BoxData["extractGenBankData"], "Input",
 Background->None],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Experimental`FileBrowse", "::", "obs"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(Experimental`FileBrowse\\)\[NoBreak] has been \
superseded by \[NoBreak]\\!\\(SystemDialogInput\\)\[NoBreak], and is now \
obsolete. It will not be included in future versions of Mathematica.\"\>"}]], \
"Message", "MSG",
 CellChangeTimes->{3.538121423502756*^9},
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"\
cgggcgcacagccggcgcggaggccccacagccccgccgggacccgaggccaagcgaggggctgccagtgtcccggga\
cccaccgcgtccgccccagccccgggtccccgcgcccaccccatggcgacggacgcggcgctacgccggcttctgagg\
ctgcaccgcacggagatcgcggtggccgtggacagcgccttcccactgctgcacgcgctggctgaccacgacgtggtc\
cccgaggacaagtttcaggagacgcttcatctgaaggaaaaggagggctgcccccaggccttccacgccctcctgtcc\
tggctgctgacccaggactccacagccatcctggacttctggagggtgctgttcaaggactacaacctggagcgctat\
ggccggctgcagcccatcctggacagcttccccaaagatgtggacctcagccagccccggaaggggaggaagcccccg\
gccgtccccaaggctttggtaccgccacccagactccccaccaagaggaaggcctcagaagaggctcgagctgccgcg\
ccagcagccctgactccaaggggcaccgccagcccaggctctcaactgaaggccaagccccccaagaagccggagagc\
agcgcagagcagcagcgccttccactcgggaacgggattcagaccatgtcagcttcagtccagagagctgtggccatg\
tcctccggggacgtcccgggagcccgaggggccgtggaggggatcctcatccagcaggtgtttgagtcaggcggctcc\
aagaagtgcatccaggttggtggggagttctacactcccagcaagttcgaagactccggcagtgggaagaacaaggcc\
cgcagcagcagtggcccgaagcctctggttcgagccaagggagcccagggcgctgcccccggtggaggtgaggctagg\
ctgggccagcagggcagcgttcccgcccctctggccctccccagtgacccccagctccaccagaagaatgaggacgag\
tgtgccgtgtgtcgggacggcggggagctcatctgctgtgacggctgccctcgggccttccacctggcctgcctgtcc\
cctccgctccgggagatccccagtgggacctggaggtgctccagctgcctgcaggcaacagtccaggaggtgcagccc\
cgggcagaggagccccggccccaggagccacccgtggagaccccgctccccccggggcttaggtcggcgggagaggag\
gtaagaggtccacctggggaacccctagccggcatggacacgactcttgtctacaagcacctgccggctccgccttct\
gcagccccgctgccagggctggactcctcggccctgcaccccctactgtgtgtgggtcctgagggtcagcagaacctg\
gctcctggtgcgcgttgcggggtgtgcggagatggtacggacgtgctgcggtgtactcactgcgccgctgccttccac\
tggcgctgccacttcccagccggcacctcccggcccgggacgggcctgcgctgcagatcctgctcaggagacgtgacc\
ccagcccctgtggagggggtgctggcccccagccccgcccgcctggcccctgggcctgccaaggatgacactgccagt\
cacgagcccgctctgcacagggatgacctggagtcccttctgagcgagcacaccttcgatggcatcctgcagtgggcc\
atccagagcatggcccgtccggcggcccccttcccctcctgaccccagatggccgggacatgcagctctgatgagaga\
gtgctgagaaggacacctccttcctcagtcctggaagccggccggctgggatcaagaaggggacagcgccacctcttg\
tcagtgctcggctgtaaacagctctgtgtttctggggacaccagccatcatgtgcctggaaattaaaccctgccccac\
ttctctactctggaagtccccgggagcctctccttgcctggtgacctactaaaaatataaaaattagctgggtgtggt\
ggtgggtgcctgtaatcccagctacatgggagcctgaggcatgagaatcacttgaactcgggaggtggaggttgcagt\
gagctgagattgcgccactgcactccagtctggtcggcaagagtgagactccgtctcaaaaacaaaacaaaaaaacca\
cataacataaatttatcatctcgaccacttttcagttcagtggcattcacatctcatgtaa\"\>", 
   ",", "\<\"\
MATDAALRRLLRLHRTEIAVAVDSAFPLLHALADHDVVPEDKFQETLHLKEKEGCPQAFHALLSWLLTQDSTAILDFW\
RVLFKDYNLERYGRLQPILDSFPKDVDLSQPRKGRKPPAVPKALVPPPRLPTKRKASEEARAAAPAALTPRGTASPGS\
QLKAKPPKKPESSAEQQRLPLGNGIQTMSASVQRAVAMSSGDVPGARGAVEGILIQQVFESGGSKKCIQVGGEFYTPS\
KFEDSGSGKNKARSSSGPKPLVRAKGAQGAAPGGGEARLGQQGSVPAPLALPSDPQLHQKNEDECAVCRDGGELICCD\
GCPRAFHLACLSPPLREIPSGTWRCSSCLQATVQEVQPRAEEPRPQEPPVETPLPPGLRSAGEEVRGPPGEPLAGMDT\
TLVYKHLPAPPSAAPLPGLDSSALHPLLCVGPEGQQNLAPGARCGVCGDGTDVLRCTHCAAAFHWRCHFPAGTSRPGT\
GLRCRSCSGDVTPAPVEGVLAPSPARLAPGPAKDDTASHEPALHRDDLESLLSEHTFDGILQWAIQSMARPAAPFPS\
\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.538121434321919*^9},
 Background->None]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["10. Exercises", "Section 1",
 Background->None,
 CellTags->"mycell"],

Cell[CellGroupData[{

Cell["Exercise 1: String Manipulation", "Subsection",
 ShowGroupOpener->True,
 Background->None],

Cell[TextData[{
 StyleBox["Consider string ",
  FontWeight->"Plain"],
 "\"acttcAtagCGgTTaaAag\",  please first replace the string characters \"",
 StyleBox["A",
  FontWeight->"Bold"],
 "\" and \"T\" with their lower case counterpart, then determine the number \
of occurrences of \"a\" using function ",
 StyleBox["Length ",
  FontWeight->"Bold"],
 StyleBox["and find out all the positions of \"a\"",
  FontVariations->{"CompatibilityType"->0}],
 StyleBox[", ",
  FontWeight->"Bold"],
 StyleBox["reverse the string and then label the upper case letter(s) in the \
resultant string as red and label all the lower case letters as blue, finally \
use function ",
  FontVariations->{"CompatibilityType"->0}],
 StyleBox["ToUpperCase ",
  FontWeight->"Bold"],
 StyleBox["to change all the lower case letters to their upper case ",
  FontVariations->{"CompatibilityType"->0}],
 "counterpart ",
 "and label the whole string as blue",
 StyleBox[".",
  FontVariations->{"CompatibilityType"->0}]
}], "Text",
 FontSize->14,
 Background->None]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.5381266320583572`*^9, 3.538126690121303*^9}},
 Background->None],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"string", " ", "=", " ", 
  "\"\<acttcAtagCGgTTaaAag\>\""}], "\[IndentingNewLine]", 
 RowBox[{"string", " ", "=", " ", 
  RowBox[{"StringReplace", "[", 
   RowBox[{"string", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<A\>\"", "\[Rule]", "\"\<a\>\""}], ",", 
      RowBox[{"\"\<T\>\"", "\[Rule]", "\"\<t\>\""}]}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", 
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Characters", "[", "string", "]"}], ",", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#", "\[Equal]", "\"\<a\>\""}], ")"}], "&"}]}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Union", "[", 
  RowBox[{"Flatten", "[", 
   RowBox[{"StringPosition", "[", 
    RowBox[{"string", ",", "\"\<a\>\""}], "]"}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"string", "=", 
  RowBox[{"StringJoin", "[", 
   RowBox[{"Reverse", "[", 
    RowBox[{"Characters", "[", "string", "]"}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"CellPrint", "[", 
  RowBox[{"Cell", "[", 
   RowBox[{
    RowBox[{"BoxData", "[", 
     RowBox[{"GridBox", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Characters", "[", "string", "]"}], "/.", 
          RowBox[{
           RowBox[{"x_String", "?", "UpperCaseQ"}], ":>", 
           RowBox[{"StyleBox", "[", 
            RowBox[{"x", ",", 
             RowBox[{"FontColor", "\[Rule]", 
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}]}]}], "]"}]}]}], "/.", 
         
         RowBox[{
          RowBox[{"x_String", "?", "LowerCaseQ"}], ":>", 
          RowBox[{"StyleBox", "[", 
           RowBox[{"x", ",", 
            RowBox[{"FontColor", "\[Rule]", 
             RowBox[{"RGBColor", "[", 
              RowBox[{"0", ",", "0", ",", "1"}], "]"}]}]}], "]"}]}]}], "}"}], 
       ",", 
       RowBox[{"ColumnSpacings", "\[Rule]", "0"}]}], "]"}], "]"}], ",", 
    "\"\<Output\>\""}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"CellPrint", "[", 
  RowBox[{"Cell", "[", 
   RowBox[{
    RowBox[{"BoxData", "[", 
     RowBox[{"GridBox", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Characters", "[", 
          RowBox[{"ToUpperCase", "[", "string", "]"}], "]"}], "/.", 
         RowBox[{
          RowBox[{"x_String", "?", "UpperCaseQ"}], ":>", 
          RowBox[{"StyleBox", "[", 
           RowBox[{"x", ",", 
            RowBox[{"FontColor", "\[Rule]", 
             RowBox[{"RGBColor", "[", 
              RowBox[{"0", ",", "0", ",", "1"}], "]"}]}]}], "]"}]}]}], "}"}], 
       ",", 
       RowBox[{"ColumnSpacings", "\[Rule]", "0"}]}], "]"}], "]"}], ",", 
    "\"\<Output\>\""}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.538126702024407*^9, 3.538126732004971*^9}, {
  3.538138434095489*^9, 3.538138437919743*^9}, {3.538138564845051*^9, 
  3.5381386658827877`*^9}, {3.538138734625826*^9, 3.538138767770755*^9}, {
  3.5381388518526707`*^9, 3.5381389296279783`*^9}, {3.5381390310861883`*^9, 
  3.538139036705736*^9}, {3.5381391174809227`*^9, 3.538139135018339*^9}, {
  3.538139238438222*^9, 3.538139264004277*^9}, {3.53813933504174*^9, 
  3.53813935515656*^9}, {3.5381393896372623`*^9, 3.5381393985636063`*^9}, {
  3.538139450054916*^9, 3.53813958541461*^9}},
 Background->None],

Cell[BoxData["\<\"acttcAtagCGgTTaaAag\"\>"], "Output",
 CellChangeTimes->{{3.538139571461576*^9, 3.538139580649066*^9}},
 Background->None],

Cell[BoxData["\<\"acttcatagCGgttaaaag\"\>"], "Output",
 CellChangeTimes->{{3.538139571461576*^9, 3.538139580656706*^9}},
 Background->None],

Cell[BoxData["7"], "Output",
 CellChangeTimes->{{3.538139571461576*^9, 3.5381395806641912`*^9}},
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "6", ",", "8", ",", "15", ",", "16", ",", "17", ",", "18"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.538139571461576*^9, 3.538139580671795*^9}},
 Background->None],

Cell[BoxData["\<\"gaaaattgGCgatacttca\"\>"], "Output",
 CellChangeTimes->{{3.538139571461576*^9, 3.538139580679141*^9}},
 Background->None],

Cell[BoxData[GridBox[{
   {
    StyleBox["g",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["a",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["a",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["a",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["a",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["t",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["t",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["g",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["G",
     FontColor->RGBColor[1, 0, 0]], 
    StyleBox["C",
     FontColor->RGBColor[1, 0, 0]], 
    StyleBox["g",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["a",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["t",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["a",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["c",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["t",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["t",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["c",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["a",
     FontColor->RGBColor[0, 0, 1]]}
  },
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.4]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.53813958069127*^9},
 Background->None],

Cell[BoxData[GridBox[{
   {
    StyleBox["G",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["A",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["A",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["A",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["A",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["T",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["T",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["G",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["G",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["C",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["G",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["A",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["T",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["A",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["C",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["T",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["T",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["C",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["A",
     FontColor->RGBColor[0, 0, 1]]}
  },
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.4]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.5381395807768927`*^9},
 Background->None]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Exercise 2: Generating random mRNA sequences and make comparison\
\>", "Subsection",
 ShowGroupOpener->True,
 Background->None],

Cell[TextData[{
 "Generate two random mRNA sequences of length 30.  Genearte the sequences of \
their corresponding DNA. Show frequency distribution of bases in these two \
DNA sequences using both ",
 ButtonBox["PieChart",
  BaseStyle->"RefGuideLink"],
 " and ",
 ButtonBox["BarChart",
  BaseStyle->"RefGuideLink"],
 ". Generate cartoons of these two DNA strands. Use codon rules to translate \
these two DNA strings to create their corresponding  sequences of amino acids \
and try to write out the full names of all these relevant amino acids."
}], "Text",
 FontSize->14,
 Background->None]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"bases", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\"", ",", "\"\<u\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"randomRNA", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"StringJoin", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"bases", "[", 
      RowBox[{"[", 
       RowBox[{"Random", "[", 
        RowBox[{"Integer", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"{", "n", "}"}]}], "]"}], "]"}]}], "\n", 
 RowBox[{"RNATable", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"RNAsequence", "[", "i", "]"}], "=", 
     RowBox[{"randomRNA", "[", "30", "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "2"}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DNATable", "=", 
   RowBox[{"StringReplace", "[", 
    RowBox[{"RNATable", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<u\>\"", "\[Rule]", "\"\<t\>\""}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numOfOcc", "[", 
    RowBox[{"sequence_String", ",", "base_String"}], "]"}], ":=", 
   RowBox[{"Length", "[", 
    RowBox[{"Select", "[", 
     RowBox[{
      RowBox[{"Characters", "[", "sequence", "]"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#", "\[Equal]", "base"}], ")"}], "&"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"numOfOcc", "[", 
       RowBox[{
        RowBox[{"DNATable", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "]"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<a\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\""}], 
      "}"}]}], "]"}], ",", 
   RowBox[{"ChartLabels", "->", 
    RowBox[{"{", 
     RowBox[{
     "\"\<a\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\""}], 
     "}"}]}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "250"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PieChart", "[", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"numOfOcc", "[", 
        RowBox[{
         RowBox[{"DNATable", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", "#"}], "]"}], "&"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<a\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\""}], 
       "}"}]}], "]"}], ",", 
    RowBox[{"ChartLabels", "->", 
     RowBox[{"{", 
      RowBox[{
      "\"\<a\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\""}], 
      "}"}]}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "250"}]}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DNASplit1", "=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"DNATable", "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", "\"\<\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DNASplit2", "=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"DNATable", "[", 
      RowBox[{"[", "2", "]"}], "]"}], ",", "\"\<\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cDNASplit1", "=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"StringReplace", "[", 
      RowBox[{
       RowBox[{"DNATable", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<t\>\""}], ",", 
         RowBox[{"\"\<t\>\"", "\[Rule]", "\"\<a\>\""}], ",", 
         RowBox[{"\"\<c\>\"", "\[Rule]", "\"\<g\>\""}], ",", 
         RowBox[{"\"\<g\>\"", "\[Rule]", "\"\<c\>\""}]}], "}"}]}], "]"}], 
     ",", "\"\<\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cDNASplit2", "=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"StringReplace", "[", 
      RowBox[{
       RowBox[{"DNATable", "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<t\>\""}], ",", 
         RowBox[{"\"\<t\>\"", "\[Rule]", "\"\<a\>\""}], ",", 
         RowBox[{"\"\<c\>\"", "\[Rule]", "\"\<g\>\""}], ",", 
         RowBox[{"\"\<g\>\"", "\[Rule]", "\"\<c\>\""}]}], "}"}]}], "]"}], 
     ",", "\"\<\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sub1", "=", 
   RowBox[{"GridBox", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"DNASplit1", ",", " ", 
       RowBox[{"Table", "[", 
        RowBox[{"\"\<|\>\"", ",", " ", 
         RowBox[{"{", 
          RowBox[{"Length", "[", "DNASplit1", "]"}], "}"}]}], "]"}], ",", 
       "cDNASplit1"}], "}"}], ",", " ", 
     RowBox[{"GridBaseline", " ", "->", " ", "Bottom"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sub2", "=", 
   RowBox[{"GridBox", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"DNASplit2", ",", " ", 
       RowBox[{"Table", "[", 
        RowBox[{"\"\<|\>\"", ",", " ", 
         RowBox[{"{", 
          RowBox[{"Length", "[", "DNASplit2", "]"}], "}"}]}], "]"}], ",", 
       "cDNASplit2"}], "}"}], ",", " ", 
     RowBox[{"GridBaseline", " ", "->", " ", "Bottom"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DisplayForm", "[", 
   RowBox[{"FrameBox", "[", 
    RowBox[{"GridBox", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "sub1", "}"}], ",", 
        RowBox[{"{", "sub2", "}"}]}], "}"}], ",", 
      RowBox[{"RowLines", " ", "->", " ", "True"}]}], "]"}], "]"}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CodonRules", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<tca\>\"", "->", "\"\<S\>\""}], ",", 
     RowBox[{"\"\<tcc\>\"", "->", "\"\<S\>\""}], ",", 
     RowBox[{"\"\<tcg\>\"", "->", "\"\<S\>\""}], ",", 
     RowBox[{"\"\<tct\>\"", "->", "\"\<S\>\""}], ",", 
     RowBox[{"\"\<ttc\>\"", "->", "\"\<F\>\""}], ",", "   ", 
     RowBox[{"\"\<ttt\>\"", "->", "\"\<F\>\""}], ",", 
     RowBox[{"\"\<tta\>\"", "->", "\"\<L\>\""}], ",", 
     RowBox[{"\"\<ttg\>\"", "->", "\"\<L\>\""}], ",", 
     RowBox[{"\"\<tac\>\"", "->", "\"\<Y\>\""}], ",", 
     RowBox[{"\"\<tat\>\"", "->", "\"\<Y\>\""}], ",", 
     RowBox[{"\"\<taa\>\"", "->", "\"\<_\>\""}], ",", 
     RowBox[{"\"\<tag\>\"", "->", "\"\<_\>\""}], ",", 
     RowBox[{"\"\<tgc\>\"", "->", "\"\<C\>\""}], ",", 
     RowBox[{"\"\<tgt\>\"", "->", "\"\<C\>\""}], ",", 
     RowBox[{"\"\<tga\>\"", "->", "\"\<_\>\""}], ",", 
     RowBox[{"\"\<tgg\>\"", "->", "\"\<W\>\""}], ",", 
     RowBox[{"\"\<cta\>\"", "\[Rule]", "\"\<L\>\""}], ",", 
     RowBox[{"\"\<ctc\>\"", "->", "\"\<L\>\""}], ",", 
     RowBox[{"\"\<ctg\>\"", "->", "\"\<L\>\""}], ",", 
     RowBox[{"\"\<ctt\>\"", "->", "\"\<L\>\""}], ",", 
     RowBox[{"\"\<cca\>\"", "->", "\"\<P\>\""}], ",", 
     RowBox[{"\"\<ccc\>\"", "->", "\"\<P\>\""}], ",", 
     RowBox[{"\"\<ccg\>\"", "->", "\"\<P\>\""}], ",", 
     RowBox[{"\"\<cct\>\"", "->", "\"\<P\>\""}], ",", 
     RowBox[{"\"\<cac\>\"", "->", "\"\<H\>\""}], ",", 
     RowBox[{"\"\<cat\>\"", "->", "\"\<H\>\""}], ",", 
     RowBox[{"\"\<caa\>\"", "->", "\"\<Q\>\""}], ",", 
     RowBox[{"\"\<cag\>\"", "->", "\"\<Q\>\""}], ",", 
     RowBox[{"\"\<cga\>\"", "->", "\"\<R\>\""}], ",", 
     RowBox[{"\"\<cgc\>\"", "->", "\"\<R\>\""}], ",", 
     RowBox[{"\"\<cgg\>\"", "->", "\"\<R\>\""}], ",", 
     RowBox[{"\"\<cgt\>\"", "->", "\"\<R\>\""}], ",", 
     RowBox[{"\"\<ata\>\"", "->", "\"\<I\>\""}], ",", 
     RowBox[{"\"\<att\>\"", "->", "\"\<I\>\""}], ",", 
     RowBox[{"\"\<atc\>\"", "->", "\"\<I\>\""}], ",", 
     RowBox[{"\"\<atg\>\"", "->", "\"\<M\>\""}], ",", 
     RowBox[{"\"\<aca\>\"", "->", "\"\<T\>\""}], ",", 
     RowBox[{"\"\<acc\>\"", "->", "\"\<T\>\""}], ",", 
     RowBox[{"\"\<acg\>\"", "->", "\"\<T\>\""}], ",", 
     RowBox[{"\"\<act\>\"", "->", "\"\<T\>\""}], ",", 
     RowBox[{"\"\<aac\>\"", "->", "\"\<N\>\""}], ",", 
     RowBox[{"\"\<aat\>\"", "->", "\"\<N\>\""}], ",", 
     RowBox[{"\"\<aaa\>\"", "->", "\"\<K\>\""}], ",", 
     RowBox[{"\"\<aag\>\"", "->", "\"\<K\>\""}], ",", 
     RowBox[{"\"\<agc\>\"", "->", "\"\<S\>\""}], ",", 
     RowBox[{"\"\<agt\>\"", "->", "\"\<S\>\""}], ",", 
     RowBox[{"\"\<aga\>\"", "->", "\"\<R\>\""}], ",", 
     RowBox[{"\"\<agg\>\"", "->", "\"\<R\>\""}], ",", 
     RowBox[{"\"\<gta\>\"", "->", "\"\<V\>\""}], ",", 
     RowBox[{"\"\<gtc\>\"", "->", "\"\<V\>\""}], ",", 
     RowBox[{"\"\<gtg\>\"", "->", "\"\<V\>\""}], ",", 
     RowBox[{"\"\<gtt\>\"", "->", "\"\<V\>\""}], ",", 
     RowBox[{"\"\<gca\>\"", "->", "\"\<A\>\""}], ",", 
     RowBox[{"\"\<gcc\>\"", "->", "\"\<A\>\""}], ",", 
     RowBox[{"\"\<gcg\>\"", "->", "\"\<A\>\""}], ",", 
     RowBox[{"\"\<gct\>\"", "->", "\"\<A\>\""}], ",", 
     RowBox[{"\"\<gac\>\"", "->", "\"\<D\>\""}], ",", 
     RowBox[{"\"\<gat\>\"", "->", "\"\<D\>\""}], ",", 
     RowBox[{"\"\<gaa\>\"", "\[Rule]", "\"\<E\>\""}], ",", 
     RowBox[{"\"\<gag\>\"", "->", "\"\<E\>\""}], ",", 
     RowBox[{"\"\<gga\>\"", "->", "\"\<G\>\""}], ",", 
     RowBox[{"\"\<ggc\>\"", "->", "\"\<G\>\""}], ",", 
     RowBox[{"\"\<ggg\>\"", "->", "\"\<G\>\""}], ",", 
     RowBox[{"\"\<ggt\>\"", "->", "\"\<G\>\""}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"StringJoin", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"Characters", "[", 
       RowBox[{"DNATable", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", "3"}], "]"}], "/.", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x_", ",", "y_", ",", "z_"}], "}"}], "\[RuleDelayed]", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"x", ",", "y", ",", "z"}], "]"}]}]}], "/.", "CodonRules"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"StringJoin", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"Characters", "[", 
       RowBox[{"DNATable", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", "3"}], "]"}], "/.", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x_", ",", "y_", ",", "z_"}], "}"}], "\[RuleDelayed]", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"x", ",", "y", ",", "z"}], "]"}]}]}], "/.", "CodonRules"}], 
  "]"}]}], "Input",
 CellChangeTimes->CompressedData["
1:eJwdzl1IWnEABXCztMEi3IvVaK0cOAjGpHLgIM0c9rGxLVfRQFqJQnTXFMwS
2aKPUUn0kIytmDBqsgiqNdmE2F7KhlaCPbgwYZCSsYyaK7mONqt7/g+H38uB
c4o0epWOzWKxBEzgB0NK0a2Oybf800p4S3lQC0Xc4gfwniarAQpGB7RQ+NtI
wTejDgO89JZrgrO7VcQh//xzuDDHf0H6A3Q/LPmrnYCuav4RPPn5JwkNMb/b
w2ifiqzAzZG4Dz4su74Bs5c+x+Ghe/8IUmn2FPSJ69hexrhZfBlSgT7iZHqx
BEZqy2WQt9ergDbr6xp4HHxaDy/QIWKH0qOGL5U/iPkV11rhFW8pkS3xWWCb
1dwDx9+9H4ShxdufoDT6ZRHS+1/dUKDLDMDlridBuM3LDsO1fwU78FeOYg+2
d9IH5IfDmCD7wf5T+Ig7kb7KqGr6lgWX8zauQou9QQg5FudNaLqREsHH6jMp
TFAOGXQVritgc0RyH47pX4VpRl24MQpzy3n/4SE1TEzaxjOSjJUXv3Og49nM
R2tLTG68e8cJzwEARyT8
  "],
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"agccgacccgcuaauaggaguuggagucac\"\>", 
   ",", "\<\"uagucuacuccgcuucacgacagaauuuaa\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.5383064425032*^9, 3.538306546215043*^9, 3.538306590513774*^9, {
   3.5383067214577217`*^9, 3.538306782730871*^9}, {3.53830684282163*^9, 
   3.538306929087927*^9}, {3.538306981097436*^9, 3.538307005052463*^9}, 
   3.5383070611726437`*^9, {3.538307130358212*^9, 3.538307161850799*^9}, 
   3.538307379543079*^9, 3.538307496115568*^9, 3.538307581952874*^9, {
   3.538307618239127*^9, 3.538307660452306*^9}, {3.538307698721698*^9, 
   3.538307719323298*^9}, 3.538401253572339*^9, {3.538401319917903*^9, 
   3.538401327071398*^9}, 3.540274543553195*^9, 3.540274580833859*^9},
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"agccgacccgctaataggagttggagtcac\"\>", 
   ",", "\<\"tagtctactccgcttcacgacagaatttaa\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.5383064425032*^9, 3.538306546215043*^9, 3.538306590513774*^9, {
   3.5383067214577217`*^9, 3.538306782730871*^9}, {3.53830684282163*^9, 
   3.538306929087927*^9}, {3.538306981097436*^9, 3.538307005052463*^9}, 
   3.5383070611726437`*^9, {3.538307130358212*^9, 3.538307161850799*^9}, 
   3.538307379543079*^9, 3.538307496115568*^9, 3.538307581952874*^9, {
   3.538307618239127*^9, 3.538307660452306*^9}, {3.538307698721698*^9, 
   3.538307719323298*^9}, 3.538401253572339*^9, {3.538401319917903*^9, 
   3.538401327071398*^9}, 3.540274543553195*^9, 3.540274580843322*^9},
 Background->None],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], PointBox[{{0.4545454545454546, 0.}}]}, 
   {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
    EdgeForm[Opacity[0.7]], {}, 
    {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
     EdgeForm[Opacity[0.7]], 
     {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
      EdgeForm[Opacity[0.7]], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.5454545454545454, 0.}, {1.4545454545454546`, 8.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{15.79647495361781, 
           69.76122448979594}, {-65.39608549286802, 63.630285923599985`}}],
         StatusArea[#, 8]& ,
         TagBoxNote->"8"],
        StyleBox["8", {
          GrayLevel[0]}, StripOnInput -> False]],
       Annotation[#, 
        Style[8, {
          GrayLevel[0]}], "Tooltip"]& ]}, 
     {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
      EdgeForm[Opacity[0.7]], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{1.5454545454545454`, 0.}, {2.4545454545454546`, 5.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{74.05769944341374, 
           128.02244897959184`}, {-17.38619621169252, 63.630285923599985`}}],
         StatusArea[#, 5]& ,
         TagBoxNote->"5"],
        StyleBox["5", {
          GrayLevel[0]}, StripOnInput -> False]],
       Annotation[#, 
        Style[5, {
          GrayLevel[0]}], "Tooltip"]& ]}, 
     {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
      EdgeForm[Opacity[0.7]], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{2.5454545454545454`, 0.}, {3.4545454545454546`, 8.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{132.31892393320965`, 
           186.28367346938776`}, {-65.39608549286802, 63.630285923599985`}}],
         StatusArea[#, 8]& ,
         TagBoxNote->"8"],
        StyleBox["8", {
          GrayLevel[0]}, StripOnInput -> False]],
       Annotation[#, 
        Style[8, {
          GrayLevel[0]}], "Tooltip"]& ]}, 
     {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
      EdgeForm[Opacity[0.7]], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{3.5454545454545454`, 0.}, {4.454545454545454, 9.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{190.58014842300557`, 
           244.5448979591837}, {-81.39938191992653, 63.630285923599985`}}],
         StatusArea[#, 9]& ,
         TagBoxNote->"9"],
        StyleBox["9", {
          GrayLevel[0]}, StripOnInput -> False]],
       Annotation[#, 
        Style[9, {
          GrayLevel[0]}], 
        "Tooltip"]& ]}}, {}, {}}, {}, {{{{{{{}, {}}, {}}, {{{}, {}}, {}}, \
{{{}, {}}, {}}, {{{}, {}}, {}}}, {}}, {}}, {}}, GraphicsGroupBox[
    {GrayLevel[0], 
     StyleBox[
      GraphicsGroupBox[{
        LineBox[{{{0.5454545454545454, 0.}, 
           Offset[{0, -4}, {0.5454545454545454, 0.}]}, {{4.454545454545454, 
           0.}, Offset[{0, -4}, {4.454545454545454, 0.}]}}], InsetBox[
         PaneBox["\<\"a\"\>"], Offset[{0, -2}, {1., 0.}], 
         ImageScaled[{Rational[1, 2], 1}]], InsetBox[
         PaneBox["\<\"t\"\>"], Offset[{0, -2}, {2., 0.}], 
         ImageScaled[{Rational[1, 2], 1}]], InsetBox[
         PaneBox["\<\"c\"\>"], Offset[{0, -2}, {3., 0.}], 
         ImageScaled[{Rational[1, 2], 1}]], InsetBox[
         PaneBox["\<\"g\"\>"], Offset[{0, -2}, {4., 0.}], 
         ImageScaled[{Rational[1, 2], 1}]]}],
      Antialiasing->False]}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesOrigin->{0.4545454545454546, 0},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  ImageSize->250,
  PlotRangePadding->Scaled[0.02],
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{
  3.5383064425032*^9, 3.538306546215043*^9, 3.538306590513774*^9, {
   3.5383067214577217`*^9, 3.538306782730871*^9}, {3.53830684282163*^9, 
   3.538306929087927*^9}, {3.538306981097436*^9, 3.538307005052463*^9}, 
   3.5383070611726437`*^9, {3.538307130358212*^9, 3.538307161850799*^9}, 
   3.538307379543079*^9, 3.538307496115568*^9, 3.538307581952874*^9, {
   3.538307618239127*^9, 3.538307660452306*^9}, {3.538307698721698*^9, 
   3.538307719323298*^9}, 3.538401253572339*^9, {3.538401319917903*^9, 
   3.538401327071398*^9}, 3.540274543553195*^9, 3.5402745808547783`*^9},
 Background->None],

Cell[BoxData[
 GraphicsBox[{{{}, {}}, {}, 
   DynamicModuleBox[{DynamicChart`click$672$703 = False, 
    DynamicChart`click$676$703 = False, DynamicChart`click$680$703 = False, 
    DynamicChart`click$684$703 = False}, {
     {RGBColor[0.5, 0.5, 1.], EdgeForm[GrayLevel[0.5]], {
       {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
        {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
         EdgeForm[GrayLevel[0.5]], GeometricTransformationBox[
          TagBox[
           TagBox[
            TooltipBox[
             TagBox[{
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 1., {1.2566370614359172`, 
                  3.141592653589793}]},
                
                ImageSizeCache->{{23.585786437626894`, 
                 157.31591299986783`}, {-103.4142135623731, \
-0.5857864376268935}}], 
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 1., {1.2566370614359172`, 
                  3.141592653589793}]},
                
                ImageSizeCache->{{23.585786437626894`, 
                 157.31591299986783`}, {-103.4142135623731, \
-0.5857864376268935}}]},
              StatusArea[#, 9]& ,
              TagBoxNote->"9"],
             StyleBox["9", {
               GrayLevel[0]}, StripOnInput -> False]],
            Annotation[#, 
             Style[9, {
               GrayLevel[0]}], "Tooltip"]& ],
           
           EventHandlerTag[{
            "MouseClicked" :> FEPrivate`Set[DynamicChart`click$672$703, 
               FEPrivate`Not[DynamicChart`click$672$703]], PassEventsDown -> 
             True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
          Dynamic[If[
           DynamicChart`click$672$703, {{{1., 0.}, {0., 
             1.}}, {-0.11755705045849461`, 0.1618033988749895}}, {{1, 0}, {0, 
            1}}, {{1, 0}, {0, 1}}]]]}, 
        {RGBColor[0.7333333333333333, 1., 0.8337224383916991], EdgeForm[
         GrayLevel[0.5]], GeometricTransformationBox[
          TagBox[
           TagBox[
            TooltipBox[
             TagBox[{
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 1., {-0.6283185307179586, 
                  1.2566370614359172`}]},
                
                ImageSizeCache->{{123.5857864376269, 
                 226.4142135623731}, {-98.51986519188846, 
                 58.192738791620414`}}], 
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 1., {-0.6283185307179586, 
                  1.2566370614359172`}]},
                
                ImageSizeCache->{{123.5857864376269, 
                 226.4142135623731}, {-98.51986519188846, 
                 58.192738791620414`}}]},
              StatusArea[#, 9]& ,
              TagBoxNote->"9"],
             StyleBox["9", {
               GrayLevel[0]}, StripOnInput -> False]],
            Annotation[#, 
             Style[9, {
               GrayLevel[0]}], "Tooltip"]& ],
           
           EventHandlerTag[{
            "MouseClicked" :> FEPrivate`Set[DynamicChart`click$676$703, 
               FEPrivate`Not[DynamicChart`click$676$703]], PassEventsDown -> 
             True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
          Dynamic[If[
           DynamicChart`click$676$703, {{{1., 0.}, {0., 1.}}, {
             0.1902113032590307, 0.06180339887498948}}, {{1, 0}, {0, 1}}, {{1,
             0}, {0, 1}}]]]}, 
        {RGBColor[1, 0.860624, 0.662562], EdgeForm[GrayLevel[0.5]], 
         GeometricTransformationBox[
          TagBox[
           TagBox[
            TooltipBox[
             TagBox[{
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 
                  1., {-2.3038346126325155`, -0.6283185307179586}]},
                
                ImageSizeCache->{{56.67272580174104, 
                 207.31591299986786`}, {-3.4142135623731065`, 
                 99.4142135623731}}], 
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 
                  1., {-2.3038346126325155`, -0.6283185307179586}]},
                
                ImageSizeCache->{{56.67272580174104, 
                 207.31591299986786`}, {-3.4142135623731065`, 
                 99.4142135623731}}]},
              StatusArea[#, 8]& ,
              TagBoxNote->"8"],
             StyleBox["8", {
               GrayLevel[0]}, StripOnInput -> False]],
            Annotation[#, 
             Style[8, {
               GrayLevel[0]}], "Tooltip"]& ],
           
           EventHandlerTag[{
            "MouseClicked" :> FEPrivate`Set[DynamicChart`click$680$703, 
               FEPrivate`Not[DynamicChart`click$680$703]], PassEventsDown -> 
             True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
          Dynamic[If[
           DynamicChart`click$680$703, {{{1., 0.}, {0., 1.}}, {
             0.02090569265353065, -0.19890437907365469`}}, {{1, 0}, {0, 
            1}}, {{1, 0}, {0, 1}}]]]}, 
        {RGBColor[1, 0.696086, 0.721935], EdgeForm[GrayLevel[0.5]], 
         GeometricTransformationBox[
          TagBox[
           TagBox[
            TooltipBox[
             TagBox[{
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 
                  1., {-3.141592653589793, -2.3038346126325155`}]},
                
                ImageSizeCache->{{23.585786437626904`, 
                 126.41421356237309`}, {-3.4142135623730923`, 
                 73.7286961101125}}], 
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 
                  1., {-3.141592653589793, -2.3038346126325155`}]},
                
                ImageSizeCache->{{23.585786437626904`, 
                 126.41421356237309`}, {-3.4142135623730923`, 
                 73.7286961101125}}]},
              StatusArea[#, 4]& ,
              TagBoxNote->"4"],
             StyleBox["4", {
               GrayLevel[0]}, StripOnInput -> False]],
            Annotation[#, 
             Style[4, {
               GrayLevel[0]}], "Tooltip"]& ],
           
           EventHandlerTag[{
            "MouseClicked" :> FEPrivate`Set[DynamicChart`click$684$703, 
               FEPrivate`Not[DynamicChart`click$684$703]], PassEventsDown -> 
             True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
          Dynamic[If[
           DynamicChart`click$684$703, {{{1., 0.}, {0., 
             1.}}, {-0.18270909152852022`, -0.08134732861516002}}, {{1, 0}, {
            0, 1}}, {{1, 0}, {0, 1}}]]]}}, {}}, {}}, {{{
        GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {{}, InsetBox[
                StyleBox["\<\"a\"\>",
                 StripOnInput->False,
                 LineColor->GrayLevel[0],
                 FrontFaceColor->GrayLevel[0],
                 BackFaceColor->GrayLevel[0],
                 GraphicsColor->GrayLevel[0],
                 
                 FontColor->GrayLevel[
                  0]], {-0.3918568348616487, 0.5393446629166316}]}},
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {
              GrayLevel[0]}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {
              GrayLevel[0]}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$672$703, 
              FEPrivate`Not[DynamicChart`click$672$703]], PassEventsDown -> 
            True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
         Dynamic[If[
          DynamicChart`click$672$703, {{{1., 0.}, {0., 
            1.}}, {-0.11755705045849461`, 0.1618033988749895}}, {{1, 0}, {0, 
           1}}, {{1, 0}, {0, 1}}]]], GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {{}, InsetBox[
                StyleBox["\<\"t\"\>",
                 StripOnInput->False,
                 LineColor->GrayLevel[0],
                 FrontFaceColor->GrayLevel[0],
                 BackFaceColor->GrayLevel[0],
                 GraphicsColor->GrayLevel[0],
                 
                 FontColor->GrayLevel[
                  0]], {0.6340376775301023, 0.20601132958329826`}]}},
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {
              GrayLevel[0]}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {
              GrayLevel[0]}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$676$703, 
              FEPrivate`Not[DynamicChart`click$676$703]], PassEventsDown -> 
            True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
         Dynamic[If[
          DynamicChart`click$676$703, {{{1., 0.}, {0., 1.}}, {
            0.1902113032590307, 0.06180339887498948}}, {{1, 0}, {0, 1}}, {{1, 
           0}, {0, 1}}]]], GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {{}, InsetBox[
                StyleBox["\<\"c\"\>",
                 StripOnInput->False,
                 LineColor->GrayLevel[0],
                 FrontFaceColor->GrayLevel[0],
                 BackFaceColor->GrayLevel[0],
                 GraphicsColor->GrayLevel[0],
                 
                 FontColor->GrayLevel[
                  0]], {0.06968564217843548, -0.6630145969121822}]}},
             StatusArea[#, 8]& ,
             TagBoxNote->"8"],
            StyleBox["8", {
              GrayLevel[0]}, StripOnInput -> False]],
           Annotation[#, 
            Style[8, {
              GrayLevel[0]}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$680$703, 
              FEPrivate`Not[DynamicChart`click$680$703]], PassEventsDown -> 
            True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
         Dynamic[If[
          DynamicChart`click$680$703, {{{1., 0.}, {0., 1.}}, {
            0.02090569265353065, -0.19890437907365469`}}, {{1, 0}, {0, 1}}, {{
           1, 0}, {0, 1}}]]], GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {{}, InsetBox[
                StyleBox["\<\"g\"\>",
                 StripOnInput->False,
                 LineColor->GrayLevel[0],
                 FrontFaceColor->GrayLevel[0],
                 BackFaceColor->GrayLevel[0],
                 GraphicsColor->GrayLevel[0],
                 
                 FontColor->GrayLevel[
                  0]], {-0.6090303050950673, -0.2711577620505333}]}},
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox["4", {
              GrayLevel[0]}, StripOnInput -> False]],
           Annotation[#, 
            Style[4, {
              GrayLevel[0]}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$684$703, 
              FEPrivate`Not[DynamicChart`click$684$703]], PassEventsDown -> 
            True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
         Dynamic[If[
          DynamicChart`click$684$703, {{{1., 0.}, {0., 
            1.}}, {-0.18270909152852022`, -0.08134732861516002}}, {{1, 0}, {0,
            1}}, {{1, 0}, {0, 1}}]]]}, {}}, {}}},
    DynamicModuleValues:>{}], {}, {{{}, {}, {}, {}}, {}}},
  ContentSelectable->False,
  ImageSize->250,
  PlotRange->{{-1.2, 1.2}, {-1.2, 1.2}},
  PlotRangePadding->Scaled[0.02]]], "Output",
 CellChangeTimes->{
  3.5383064425032*^9, 3.538306546215043*^9, 3.538306590513774*^9, {
   3.5383067214577217`*^9, 3.538306782730871*^9}, {3.53830684282163*^9, 
   3.538306929087927*^9}, {3.538306981097436*^9, 3.538307005052463*^9}, 
   3.5383070611726437`*^9, {3.538307130358212*^9, 3.538307161850799*^9}, 
   3.538307379543079*^9, 3.538307496115568*^9, 3.538307581952874*^9, {
   3.538307618239127*^9, 3.538307660452306*^9}, {3.538307698721698*^9, 
   3.538307719323298*^9}, 3.538401253572339*^9, {3.538401319917903*^9, 
   3.538401327071398*^9}, 3.540274543553195*^9, 3.540274580884575*^9},
 Background->None],

Cell[BoxData[
 TagBox[
  FrameBox[GridBox[{
     {GridBox[{
        {"a", "g", "c", "c", "g", "a", "c", "c", "c", "g", "c", "t", "a", "a",
          "t", "a", "g", "g", "a", "g", "t", "t", "g", "g", "a", "g", "t", 
         "c", "a", "c"},
        {"|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|",
          "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", 
         "|", "|", "|"},
        {"t", "c", "g", "g", "c", "t", "g", "g", "g", "c", "g", "a", "t", "t",
          "a", "t", "c", "c", "t", "c", "a", "a", "c", "c", "t", "c", "a", 
         "g", "t", "g"}
       },
       BaselinePosition->Bottom]},
     {GridBox[{
        {"t", "a", "g", "t", "c", "t", "a", "c", "t", "c", "c", "g", "c", "t",
          "t", "c", "a", "c", "g", "a", "c", "a", "g", "a", "a", "t", "t", 
         "t", "a", "a"},
        {"|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|",
          "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", "|", 
         "|", "|", "|"},
        {"a", "t", "c", "a", "g", "a", "t", "g", "a", "g", "g", "c", "g", "a",
          "a", "g", "t", "g", "c", "t", "g", "t", "c", "t", "t", "a", "a", 
         "a", "t", "t"}
       },
       BaselinePosition->Bottom]}
    },
    GridBoxDividers->{
     "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, {True}, False}, "RowsIndexed" -> {}}]],
  DisplayForm]], "Output",
 CellChangeTimes->{
  3.5383064425032*^9, 3.538306546215043*^9, 3.538306590513774*^9, {
   3.5383067214577217`*^9, 3.538306782730871*^9}, {3.53830684282163*^9, 
   3.538306929087927*^9}, {3.538306981097436*^9, 3.538307005052463*^9}, 
   3.5383070611726437`*^9, {3.538307130358212*^9, 3.538307161850799*^9}, 
   3.538307379543079*^9, 3.538307496115568*^9, 3.538307581952874*^9, {
   3.538307618239127*^9, 3.538307660452306*^9}, {3.538307698721698*^9, 
   3.538307719323298*^9}, 3.538401253572339*^9, {3.538401319917903*^9, 
   3.538401327071398*^9}, 3.540274543553195*^9, 3.540274580909395*^9},
 Background->None],

Cell[BoxData["\<\"SRPANRSWSH\"\>"], "Output",
 CellChangeTimes->{
  3.5383064425032*^9, 3.538306546215043*^9, 3.538306590513774*^9, {
   3.5383067214577217`*^9, 3.538306782730871*^9}, {3.53830684282163*^9, 
   3.538306929087927*^9}, {3.538306981097436*^9, 3.538307005052463*^9}, 
   3.5383070611726437`*^9, {3.538307130358212*^9, 3.538307161850799*^9}, 
   3.538307379543079*^9, 3.538307496115568*^9, 3.538307581952874*^9, {
   3.538307618239127*^9, 3.538307660452306*^9}, {3.538307698721698*^9, 
   3.538307719323298*^9}, 3.538401253572339*^9, {3.538401319917903*^9, 
   3.538401327071398*^9}, 3.540274543553195*^9, 3.540274580918232*^9},
 Background->None],

Cell[BoxData["\<\"_STPLHDRI_\"\>"], "Output",
 CellChangeTimes->{
  3.5383064425032*^9, 3.538306546215043*^9, 3.538306590513774*^9, {
   3.5383067214577217`*^9, 3.538306782730871*^9}, {3.53830684282163*^9, 
   3.538306929087927*^9}, {3.538306981097436*^9, 3.538307005052463*^9}, 
   3.5383070611726437`*^9, {3.538307130358212*^9, 3.538307161850799*^9}, 
   3.538307379543079*^9, 3.538307496115568*^9, 3.538307581952874*^9, {
   3.538307618239127*^9, 3.538307660452306*^9}, {3.538307698721698*^9, 
   3.538307719323298*^9}, 3.538401253572339*^9, {3.538401319917903*^9, 
   3.538401327071398*^9}, 3.540274543553195*^9, 3.540274580926365*^9},
 Background->None]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercise 3: Reading and analyzing GenBank data file", "Subsection",
 ShowGroupOpener->True,
 Background->None],

Cell[TextData[{
 "Read data file from GenBank for  Saccharomyces cerevisiae TCP1-beta gene \
(The nucleotide ID for  file is U49845)\nand extract its gene sequence.  Show \
frequency distribution of bases using both PieChart and BarChart. Find all \
the positions of pattern \"ctcc\" in the sequence, calculate the nummber of \
occurences and then highlight them. (See the examples in ",
 ButtonBox["Advanced Documentation: String Patterns",
  BaseStyle->"RefGuideLink"],
 " to find out how to highlight patterns) "
}], "Text",
 FontSize->14,
 Background->None]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "myGenBankfile", ",", "OriginRowNumber", ",", "DNAsequence", ",", "s", 
       ",", "proteinseqString", ",", "proteinSeqStart", ",", "proteinSeqEnd", 
       ",", "proteinSeq"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"myGenBankfile", "=", 
       RowBox[{"ReadList", "[", 
        RowBox[{
        "\"\</home/jhofman/Desktop/CompBio/lab2/U49845.txt\>\"", ",", "Word", 
         ",", " ", 
         RowBox[{"WordSeparators", "\[Rule]", 
          RowBox[{"{", "\"\<\\r\>\"", "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"OriginRowNumber", "=", 
       RowBox[{"First", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Position", "[", 
          RowBox[{"myGenBankfile", ",", 
           RowBox[{"x_String", "/;", 
            RowBox[{"x", "\[Equal]", 
             RowBox[{"First", "[", 
              RowBox[{"Select", "[", 
               RowBox[{"myGenBankfile", ",", 
                RowBox[{
                 RowBox[{"StringMatchQ", "[", 
                  RowBox[{"#", ",", "\"\<ORIGIN*\>\""}], "]"}], "&"}]}], 
               "]"}], "]"}]}]}]}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"DNAseqence", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"myGenBankfile", "[", 
          RowBox[{"[", "i", "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"OriginRowNumber", "+", "1"}], ",", 
           RowBox[{"Length", "[", "myGenBankfile", "]"}]}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"DNAseqString", "=", "\"\<\>\""}], ";", 
         RowBox[{"i", "=", "1"}]}], ",", 
        RowBox[{"i", "<", 
         RowBox[{
          RowBox[{"Length", "[", "DNAseqence", "]"}], "+", "1"}]}], ",", 
        RowBox[{
         RowBox[{"s", "=", 
          RowBox[{"StringToStream", "[", 
           RowBox[{"DNAseqence", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";", 
         RowBox[{"DNAseqString", "=", 
          RowBox[{"DNAseqString", "<>", 
           RowBox[{"StringJoin", "[", 
            RowBox[{"Drop", "[", 
             RowBox[{
              RowBox[{"ReadList", "[", 
               RowBox[{"s", ",", "Word", ",", 
                RowBox[{"RecordSeparators", "\[Rule]", 
                 RowBox[{"{", "\"\< \>\"", "}"}]}]}], "]"}], ",", "1"}], 
             "]"}], "]"}]}]}], ";", 
         RowBox[{"i", "++"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "DNAseqString"}]}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numOfOcc", "[", 
    RowBox[{"sequence_String", ",", "base_String"}], "]"}], ":=", 
   RowBox[{"Length", "[", 
    RowBox[{"Select", "[", 
     RowBox[{
      RowBox[{"Characters", "[", "sequence", "]"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#", "\[Equal]", "base"}], ")"}], "&"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"numOfOcc", "[", 
       RowBox[{"DNAseqString", ",", "#"}], "]"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<a\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\""}], 
      "}"}]}], "]"}], ",", 
   RowBox[{"ChartLabels", "->", 
    RowBox[{"{", 
     RowBox[{
     "\"\<a\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\""}], 
     "}"}]}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "250"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PieChart", "[", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"numOfOcc", "[", 
        RowBox[{"DNAseqString", ",", "#"}], "]"}], "&"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<a\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\""}], 
       "}"}]}], "]"}], ",", 
    RowBox[{"ChartLabels", "->", 
     RowBox[{"{", 
      RowBox[{
      "\"\<a\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", ",", "\"\<g\>\""}], 
      "}"}]}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "250"}]}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"StringPosition", "[", 
  RowBox[{"DNAseqString", ",", "\"\<ctcc\>\""}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Length", "[", 
   RowBox[{
    StyleBox["StringPosition", "Text"], "[", 
    RowBox[{"DNAseqString", ",", "\"\<ctcc\>\""}], "]"}], "]"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{"StringReplace", "[", 
  RowBox[{"DNAseqString", ",", 
   RowBox[{
    RowBox[{"x", ":", 
     RowBox[{"(", "\"\<ctcc\>\"", ")"}]}], "\[RuleDelayed]", 
    RowBox[{
    "\"\<\\!\\(\\*StyleBox[\\\"\>\"", "<>", "x", "<>", 
     "\"\<\\\",FontColor->RGBColor[1,0,0],FontSize->18,FontWeight->\\\"Bold\\\
\"]\\)\>\""}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.538308414794201*^9, 3.5383084215706787`*^9}, {
  3.538308546816613*^9, 3.538308560700062*^9}, {3.538308614911519*^9, 
  3.5383088288828278`*^9}, {3.5383089003421383`*^9, 3.5383089241597157`*^9}, {
  3.5383089908347197`*^9, 3.538309040733389*^9}, {3.538309150039672*^9, 
  3.538309161688746*^9}, {3.538309344076507*^9, 3.538309409430572*^9}, {
  3.538483591779376*^9, 3.538483592422876*^9}, {3.5402748379170628`*^9, 
  3.540274848603383*^9}},
 Background->None],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], PointBox[{{0.4545454545454546, 0.}}]}, 
   {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
    EdgeForm[Opacity[0.7]], {}, 
    {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
     EdgeForm[Opacity[0.7]], 
     {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
      EdgeForm[Opacity[0.7]], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.5454545454545454, 0.}, {1.4545454545454546`, 
            1510.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{32.417996289424856`, 
           82.59795918367348}, {-68.38508000509162, 58.12370811485178}}],
         StatusArea[#, 1510]& ,
         TagBoxNote->"1510"],
        StyleBox["1510", {
          GrayLevel[0]}, StripOnInput -> False]],
       Annotation[#, 
        Style[1510, {
          GrayLevel[0]}], "Tooltip"]& ]}, 
     {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
      EdgeForm[Opacity[0.7]], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{1.5454545454545454`, 0.}, {2.4545454545454546`, 
            1609.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{86.51595547309834, 
           136.69591836734696`}, {-76.61380187520712, 58.12370811485178}}],
         StatusArea[#, 1609]& ,
         TagBoxNote->"1609"],
        StyleBox["1609", {
          GrayLevel[0]}, StripOnInput -> False]],
       Annotation[#, 
        Style[1609, {
          GrayLevel[0]}], "Tooltip"]& ]}, 
     {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
      EdgeForm[Opacity[0.7]], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{2.5454545454545454`, 0.}, {3.4545454545454546`, 
            1074.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{140.6139146567718, 
           190.79387755102044`}, {-32.145456415492085`, 58.12370811485177}}],
         StatusArea[#, 1074]& ,
         TagBoxNote->"1074"],
        StyleBox["1074", {
          GrayLevel[0]}, StripOnInput -> False]],
       Annotation[#, 
        Style[1074, {
          GrayLevel[0]}], "Tooltip"]& ]}, 
     {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
      EdgeForm[Opacity[0.7]], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{3.5454545454545454`, 0.}, {4.454545454545454, 835.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{194.71187384044532`, 
           244.89183673469392`}, {-12.280158163395079`, 58.12370811485177}}],
         StatusArea[#, 835]& ,
         TagBoxNote->"835"],
        StyleBox["835", {
          GrayLevel[0]}, StripOnInput -> False]],
       Annotation[#, 
        Style[835, {
          GrayLevel[0]}], 
        "Tooltip"]& ]}}, {}, {}}, {}, {{{{{{{}, {}}, {}}, {{{}, {}}, {}}, \
{{{}, {}}, {}}, {{{}, {}}, {}}}, {}}, {}}, {}}, GraphicsGroupBox[
    {GrayLevel[0], 
     StyleBox[
      GraphicsGroupBox[{
        LineBox[{{{0.5454545454545454, 0.}, 
           Offset[{0, -4}, {0.5454545454545454, 0.}]}, {{4.454545454545454, 
           0.}, Offset[{0, -4}, {4.454545454545454, 0.}]}}], InsetBox[
         PaneBox["\<\"a\"\>"], Offset[{0, -2}, {1., 0.}], 
         ImageScaled[{Rational[1, 2], 1}]], InsetBox[
         PaneBox["\<\"t\"\>"], Offset[{0, -2}, {2., 0.}], 
         ImageScaled[{Rational[1, 2], 1}]], InsetBox[
         PaneBox["\<\"c\"\>"], Offset[{0, -2}, {3., 0.}], 
         ImageScaled[{Rational[1, 2], 1}]], InsetBox[
         PaneBox["\<\"g\"\>"], Offset[{0, -2}, {4., 0.}], 
         ImageScaled[{Rational[1, 2], 1}]]}],
      Antialiasing->False]}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesOrigin->{0.4545454545454546, 0},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  ImageSize->250,
  PlotRangePadding->Scaled[0.02],
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{
  3.538308924834662*^9, {3.538308995977552*^9, 3.538309041485478*^9}, 
   3.538309162441115*^9, 3.538309413321035*^9, 3.538483594963237*^9, {
   3.54027484951725*^9, 3.540274874279511*^9}},
 Background->None],

Cell[BoxData[
 GraphicsBox[{{{}, {}}, {}, 
   DynamicModuleBox[{DynamicChart`click$882$913 = False, 
    DynamicChart`click$886$913 = False, DynamicChart`click$890$913 = False, 
    DynamicChart`click$894$913 = False}, {
     {RGBColor[0.5, 0.5, 1.], EdgeForm[GrayLevel[0.5]], {
       {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
        {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
         EdgeForm[GrayLevel[0.5]], GeometricTransformationBox[
          TagBox[
           TagBox[
            TooltipBox[
             TagBox[{
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 1., {1.2546376389037994`, 
                  3.141592653589793}]},
                
                ImageSizeCache->{{23.585786437626894`, 
                 157.50600748827597`}, {-103.4142135623731, \
-0.5857864376268935}}], 
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 1., {1.2546376389037994`, 
                  3.141592653589793}]},
                
                ImageSizeCache->{{23.585786437626894`, 
                 157.50600748827597`}, {-103.4142135623731, \
-0.5857864376268935}}]},
              StatusArea[#, 1510]& ,
              TagBoxNote->"1510"],
             StyleBox["1510", {
               GrayLevel[0]}, StripOnInput -> False]],
            Annotation[#, 
             Style[1510, {
               GrayLevel[0]}], "Tooltip"]& ],
           
           EventHandlerTag[{
            "MouseClicked" :> FEPrivate`Set[DynamicChart`click$882$913, 
               FEPrivate`Not[DynamicChart`click$882$913]], PassEventsDown -> 
             True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
          Dynamic[If[
           DynamicChart`click$882$913, {{{1., 0.}, {0., 
             1.}}, {-0.11739523506011405`, 0.1619208411081803}}, {{1, 0}, {0, 
            1}}, {{1, 0}, {0, 1}}]]]}, 
        {RGBColor[0.7333333333333333, 1., 0.8337224383916991], EdgeForm[
         GrayLevel[0.5]], GeometricTransformationBox[
          TagBox[
           TagBox[
            TooltipBox[
             TagBox[{
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 1., {-0.7560316449569715, 
                  1.2546376389037994`}]},
                
                ImageSizeCache->{{123.5857864376269, 
                 226.4142135623731}, {-98.45788957750413, 
                 68.01817571393885}}], 
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 1., {-0.7560316449569715, 
                  1.2546376389037994`}]},
                
                ImageSizeCache->{{123.5857864376269, 
                 226.4142135623731}, {-98.45788957750413, 
                 68.01817571393885}}]},
              StatusArea[#, 1609]& ,
              TagBoxNote->"1609"],
             StyleBox["1609", {
               GrayLevel[0]}, StripOnInput -> False]],
            Annotation[#, 
             Style[1609, {
               GrayLevel[0]}], "Tooltip"]& ],
           
           EventHandlerTag[{
            "MouseClicked" :> FEPrivate`Set[DynamicChart`click$886$913, 
               FEPrivate`Not[DynamicChart`click$886$913]], PassEventsDown -> 
             True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
          Dynamic[If[
           DynamicChart`click$886$913, {{{1., 0.}, {0., 1.}}, {
             0.1938169255299701, 0.04934571286454409}}, {{1, 0}, {0, 1}}, {{1,
             0}, {0, 1}}]]]}, 
        {RGBColor[1, 0.860624, 0.662562], EdgeForm[GrayLevel[0.5]], 
         GeometricTransformationBox[
          TagBox[
           TagBox[
            TooltipBox[
             TagBox[{
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 
                  1., {-2.098144019640916, -0.7560316449569715}]},
                
                ImageSizeCache->{{73.26147279990295, 
                 199.17063167862273`}, {-3.4142135623731065`, 
                 99.4142135623731}}], 
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 
                  1., {-2.098144019640916, -0.7560316449569715}]},
                
                ImageSizeCache->{{73.26147279990295, 
                 199.17063167862273`}, {-3.4142135623731065`, 
                 99.4142135623731}}]},
              StatusArea[#, 1074]& ,
              TagBoxNote->"1074"],
             StyleBox["1074", {
               GrayLevel[0]}, StripOnInput -> False]],
            Annotation[#, 
             Style[1074, {
               GrayLevel[0]}], "Tooltip"]& ],
           
           EventHandlerTag[{
            "MouseClicked" :> FEPrivate`Set[DynamicChart`click$890$913, 
               FEPrivate`Not[DynamicChart`click$890$913]], PassEventsDown -> 
             True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
          Dynamic[If[
           DynamicChart`click$890$913, {{{1., 0.}, {0., 1.}}, {
             0.0286428714472762, -0.19793833866953317`}}, {{1, 0}, {0, 1}}, {{
            1, 0}, {0, 1}}]]]}, 
        {RGBColor[1, 0.696086, 0.721935], EdgeForm[GrayLevel[0.5]], 
         GeometricTransformationBox[
          TagBox[
           TagBox[
            TooltipBox[
             TagBox[{
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 
                  1., {-3.141592653589793, -2.098144019640916}]},
                
                ImageSizeCache->{{23.585786437626904`, 
                 126.41421356237309`}, {-3.4142135623730923`, 
                 85.82869994568729}}], 
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 
                  1., {-3.141592653589793, -2.098144019640916}]},
                
                ImageSizeCache->{{23.585786437626904`, 
                 126.41421356237309`}, {-3.4142135623730923`, 
                 85.82869994568729}}]},
              StatusArea[#, 835]& ,
              TagBoxNote->"835"],
             StyleBox["835", {
               GrayLevel[0]}, StripOnInput -> False]],
            Annotation[#, 
             Style[835, {
               GrayLevel[0]}], "Tooltip"]& ],
           
           EventHandlerTag[{
            "MouseClicked" :> FEPrivate`Set[DynamicChart`click$894$913, 
               FEPrivate`Not[DynamicChart`click$894$913]], PassEventsDown -> 
             True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
          Dynamic[If[
           DynamicChart`click$894$913, {{{1., 0.}, {0., 
             1.}}, {-0.1733922222233304, -0.09967515875309763}}, {{1, 0}, {0, 
            1}}, {{1, 0}, {0, 1}}]]]}}, {}}, {}}, {{{
        GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {{}, InsetBox[
                StyleBox["\<\"a\"\>",
                 StripOnInput->False,
                 LineColor->GrayLevel[0],
                 FrontFaceColor->GrayLevel[0],
                 BackFaceColor->GrayLevel[0],
                 GraphicsColor->GrayLevel[0],
                 
                 FontColor->GrayLevel[
                  0]], {-0.3913174502003801, 0.5397361370272676}]}},
             StatusArea[#, 1510]& ,
             TagBoxNote->"1510"],
            StyleBox["1510", {
              GrayLevel[0]}, StripOnInput -> False]],
           Annotation[#, 
            Style[1510, {
              GrayLevel[0]}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$882$913, 
              FEPrivate`Not[DynamicChart`click$882$913]], PassEventsDown -> 
            True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
         Dynamic[If[
          DynamicChart`click$882$913, {{{1., 0.}, {0., 
            1.}}, {-0.11739523506011405`, 0.1619208411081803}}, {{1, 0}, {0, 
           1}}, {{1, 0}, {0, 1}}]]], GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {{}, InsetBox[
                StyleBox["\<\"t\"\>",
                 StripOnInput->False,
                 LineColor->GrayLevel[0],
                 FrontFaceColor->GrayLevel[0],
                 BackFaceColor->GrayLevel[0],
                 GraphicsColor->GrayLevel[0],
                 
                 FontColor->GrayLevel[
                  0]], {0.6460564184332336, 0.16448570954848027`}]}},
             StatusArea[#, 1609]& ,
             TagBoxNote->"1609"],
            StyleBox["1609", {
              GrayLevel[0]}, StripOnInput -> False]],
           Annotation[#, 
            Style[1609, {
              GrayLevel[0]}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$886$913, 
              FEPrivate`Not[DynamicChart`click$886$913]], PassEventsDown -> 
            True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
         Dynamic[
         If[DynamicChart`click$886$913, {{{1., 0.}, {0., 1.}}, {
            0.1938169255299701, 0.04934571286454409}}, {{1, 0}, {0, 1}}, {{1, 
           0}, {0, 1}}]]], GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {{}, InsetBox[
                StyleBox["\<\"c\"\>",
                 StripOnInput->False,
                 LineColor->GrayLevel[0],
                 FrontFaceColor->GrayLevel[0],
                 BackFaceColor->GrayLevel[0],
                 GraphicsColor->GrayLevel[0],
                 
                 FontColor->GrayLevel[
                  0]], {0.09547623815758732, -0.6597944622317772}]}},
             StatusArea[#, 1074]& ,
             TagBoxNote->"1074"],
            StyleBox["1074", {
              GrayLevel[0]}, StripOnInput -> False]],
           Annotation[#, 
            Style[1074, {
              GrayLevel[0]}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$890$913, 
              FEPrivate`Not[DynamicChart`click$890$913]], PassEventsDown -> 
            True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
         Dynamic[If[
          DynamicChart`click$890$913, {{{1., 0.}, {0., 1.}}, {
            0.0286428714472762, -0.19793833866953317`}}, {{1, 0}, {0, 1}}, {{
           1, 0}, {0, 1}}]]], GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {{}, InsetBox[
                StyleBox["\<\"g\"\>",
                 StripOnInput->False,
                 LineColor->GrayLevel[0],
                 FrontFaceColor->GrayLevel[0],
                 BackFaceColor->GrayLevel[0],
                 GraphicsColor->GrayLevel[0],
                 
                 FontColor->GrayLevel[
                  0]], {-0.5779740740777679, -0.33225052917699205`}]}},
             StatusArea[#, 835]& ,
             TagBoxNote->"835"],
            StyleBox["835", {
              GrayLevel[0]}, StripOnInput -> False]],
           Annotation[#, 
            Style[835, {
              GrayLevel[0]}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$894$913, 
              FEPrivate`Not[DynamicChart`click$894$913]], PassEventsDown -> 
            True, PassEventsDown -> Automatic, PassEventsUp -> True}]], 
         Dynamic[If[
          DynamicChart`click$894$913, {{{1., 0.}, {0., 
            1.}}, {-0.1733922222233304, -0.09967515875309763}}, {{1, 0}, {0, 
           1}}, {{1, 0}, {0, 1}}]]]}, {}}, {}}},
    DynamicModuleValues:>{}], {}, {{{}, {}, {}, {}}, {}}},
  ContentSelectable->False,
  ImageSize->250,
  PlotRange->{{-1.2, 1.2}, {-1.2, 1.2}},
  PlotRangePadding->Scaled[0.02]]], "Output",
 CellChangeTimes->{
  3.538308924834662*^9, {3.538308995977552*^9, 3.538309041485478*^9}, 
   3.538309162441115*^9, 3.538309413321035*^9, 3.538483594963237*^9, {
   3.54027484951725*^9, 3.540274874475075*^9}},
 Background->None],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"23", ",", "26"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"454", ",", "457"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"470", ",", "473"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"489", ",", "492"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"735", ",", "738"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1333", ",", "1336"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1573", ",", "1576"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1643", ",", "1646"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1718", ",", "1721"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1784", ",", "1787"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2066", ",", "2069"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2123", ",", "2126"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2146", ",", "2149"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2602", ",", "2605"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2860", ",", "2863"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2965", ",", "2968"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3350", ",", "3353"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3540", ",", "3543"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3556", ",", "3559"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3651", ",", "3654"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4488", ",", "4491"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4863", ",", "4866"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4965", ",", "4968"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.538308924834662*^9, {3.538308995977552*^9, 3.538309041485478*^9}, 
   3.538309162441115*^9, 3.538309413321035*^9, 3.538483594963237*^9, {
   3.54027484951725*^9, 3.540274874511149*^9}},
 Background->None],

Cell[BoxData["24"], "Output",
 CellChangeTimes->{
  3.538308924834662*^9, {3.538308995977552*^9, 3.538309041485478*^9}, 
   3.538309162441115*^9, 3.538309413321035*^9, 3.538483594963237*^9, {
   3.54027484951725*^9, 3.540274874523449*^9}},
 Background->None],

Cell[BoxData["\<\"gatc\\!\\(\\*StyleBox[\\\"ctcc\\\",FontColor->RGBColor[1,0,\
0],FontSize->18,FontWeight->\\\"Bold\\\"]\\)atatacaacggtat\\!\\(\\*StyleBox[\\\
\"ctcc\\\",FontColor->RGBColor[1,0,0],FontSize->18,FontWeight->\\\"Bold\\\"]\\\
)acctcaggtttagatctcaacaacggaaccattgccgacatgagacagttaggtatcgtcgagagttacaagctaaa\
acgagcagtagtcagctctgcatctgaagccgctgaagttctactaagggtggataacatcatccgtgcaagaccaag\
aaccgccaatagacaacatatgtaacatatttaggatatacctcgaaaataataaaccgccacactgtcattattata\
attagaaacagaacgcaaaaattatccactatataattcaaagacgcgaaaaaaaaagaacaacgcgtcatagaactt\
ttggcaattcgcgtcacaaataaattttggcaacttatgtttcctcttcgagcagtactcgagccctgtctcaagaat\
gtaataatacccatcgtaggtatggttaaagatagcat\\!\\(\\*StyleBox[\\\"ctcc\\\",\
FontColor->RGBColor[1,0,0],FontSize->18,FontWeight->\\\"Bold\\\"]\\)\
acaacctcaaag\\!\\(\\*StyleBox[\\\"ctcc\\\",FontColor->RGBColor[1,0,0],\
FontSize->18,FontWeight->\\\"Bold\\\"]\\)ttgccgagagtcgcc\\!\\(\\*StyleBox[\\\"\
ctcc\\\",FontColor->RGBColor[1,0,0],FontSize->18,FontWeight->\\\"Bold\\\"]\\)\
tttgtcgagtaattttcacttttcatatgagaacttattttcttattctttactctcacatcctgtagtgattgacac\
tgcaacagccaccatcactagaagaacagaacaattacttaatagaaaaattatatcttcctcgaaacgatttcctgc\
ttccaacatctacgtatatcaagaagcattcacttaccatgacacagcttcagatttcattattgctgacagctacta\
tatcacta\\!\\(\\*StyleBox[\\\"ctcc\\\",FontColor->RGBColor[1,0,0],FontSize->\
18,FontWeight->\\\"Bold\\\"]\\)\
atctagtagtggccacgccctatgaggcatatcctatcggaaaacaataccccccagtggcaagagtcaatgaatcgt\
ttacatttcaaatttccaatgatacctataaatcgtctgtagacaagacagctcaaataacatacaattgcttcgact\
taccgagctggctttcgtttgactctagttctagaacgttctcaggtgaaccttcttctgacttactatctgatgcga\
acaccacgttgtatttcaatgtaatactcgagggtacggactctgccgacagcacgtctttgaacaatacataccaat\
ttgttgttacaaaccgtccatccatctcgctatcgtcagatttcaatctattggcgttgttaaaaaactatggttata\
ctaacggcaaaaacgctctgaaactagatcctaatgaagtcttcaacgtgacttttgaccgttcaatgttcactaacg\
aagaatccattgtgtcgtattacggacgttctcagttgtataatgcgccgttacccaattggctgttcttcgattctg\
gcgagttgaagtttactgggacggcaccggtgataaactcggcgattg\\!\\(\\*StyleBox[\\\"ctcc\\\"\
,FontColor->RGBColor[1,0,0],FontSize->18,FontWeight->\\\"Bold\\\"]\\)\
agaaacaagctacagttttgtcatcatcgctacagacattgaaggattttctgccgttgaggtagaattcgaattagt\
catcggggctcaccagttaactacctctattcaaaatagtttgataatcaacgttactgacacaggtaacgtttcata\
tgacttacctctaaactatgtttatctcgatgacgatcctatttcttctgataaattgggttctataaacttattgga\
tg\\!\\(\\*StyleBox[\\\"ctcc\\\",FontColor->RGBColor[1,0,0],FontSize->18,\
FontWeight->\\\"Bold\\\"]\\)\
agactgggtggcattagataatgctaccatttccgggtctgtcccagatgaattactcggtaagaa\\!\\(\\*\
StyleBox[\\\"ctcc\\\",FontColor->RGBColor[1,0,0],FontSize->18,FontWeight->\\\"\
Bold\\\"]\\)\
aatcctgccaatttttctgtgtccatttatgatacttatggtgatgtgatttatttcaacttcgaagttgt\\!\\(\
\\*StyleBox[\\\"ctcc\\\",FontColor->RGBColor[1,0,0],FontSize->18,FontWeight->\
\\\"Bold\\\"]\\)\
acaacggatttgtttgccattagttctcttcccaatattaacgctacaaggggtgaatggtt\\!\\(\\*\
StyleBox[\\\"ctcc\\\",FontColor->RGBColor[1,0,0],FontSize->18,FontWeight->\\\"\
Bold\\\"]\\)\
tactattttttgccttctcagtttacagactacgtgaatacaaacgtttcattagagtttactaattcaagccaagac\
catgactgggtgaaattccaatcatctaatttaacattagctggagaagtgcccaagaatttcgacaagctttcatta\
ggtttgaaagcgaaccaaggttcacaatctcaagagctatattttaacatcattggcatggattcaaagataactcac\
tcaaaccacagtgcgaatgcaacgtccacaagaagttctcacca\\!\\(\\*StyleBox[\\\"ctcc\\\",\
FontColor->RGBColor[1,0,0],FontSize->18,FontWeight->\\\"Bold\\\"]\\)\
acctcaacaagttcttacacatcttctacttacactgcaaaaatttcttctac\\!\\(\\*StyleBox[\\\"\
ctcc\\\",FontColor->RGBColor[1,0,0],FontSize->18,FontWeight->\\\"Bold\\\"]\\)\
gctgctgctacttcttctg\\!\\(\\*StyleBox[\\\"ctcc\\\",FontColor->RGBColor[1,0,0],\
FontSize->18,FontWeight->\\\"Bold\\\"]\\)\
agcagcgctgccagcagccaataaaacttcatctcacaataaaaaagcagtagcaattgcgtgcggtgttgctatccc\
attaggcgttatcctagtagctctcatttgcttcctaatattctggagacgcagaagggaaaatccagacgatgaaaa\
cttaccgcatgctattagtggacctgatttgaataatcctgcaaataaaccaaatcaagaaaacgctacacctttgaa\
caacccctttgatgatgatgcttcctcgtacgatgatacttcaatagcaagaagattggctgctttgaacactttgaa\
attggataaccactctgccactgaatctgatatttccagcgtggatgaaaagagagattctctatcaggtatgaatac\
atacaatgatcagttccaatcccaaagtaaagaagaattattagcaaaacccccagtacagc\\!\\(\\*\
StyleBox[\\\"ctcc\\\",FontColor->RGBColor[1,0,0],FontSize->18,FontWeight->\\\"\
Bold\\\"]\\)\
agagagcccgttctttgacccacagaataggtcttcttctgtgtatatggatagtgaaccagcagtaaataaatcctg\
gcgatatactggcaacctgtcaccagtctctgatattgtcagagacagttacggatcacaaaaaactgttgatacaga\
aaaacttttcgatttagaagcaccagagaaggaaaaacgtacgtcaagggatgtcactatgtcttcactggacccttg\
gaacagcaatattagccctt\\!\\(\\*StyleBox[\\\"ctcc\\\",FontColor->RGBColor[1,0,0],\
FontSize->18,FontWeight->\\\"Bold\\\"]\\)\
cgtaagaaaatcagtaacaccatcaccatataacgtaacgaagcatcgtaaccgccacttacaaaatattcaagactc\
tcaaagcggtaaaaacggaatca\\!\\(\\*StyleBox[\\\"ctcc\\\",FontColor->RGBColor[1,0,\
0],FontSize->18,FontWeight->\\\"Bold\\\"]\\)\
cacaacaatgtcaacttcatcttctgacgattttgttccggttaaagatggtgaaaatttttgctgggtccatagcat\
ggaaccagacagaagaccaagtaagaaaaggttagtagatttttcaaataagagtaatgtcaatgttggtcaagttaa\
ggacattcacggacgcatcccagaaatgctgtgattatacgcaacgatattttgcttaattttattttcctgttttat\
tttttattagtggtttacagataccctatattttatttagtttttatacttagagacatttaattttaattccattct\
tcaaatttcatttttgcacttaaaacaaagatccaaaaatgctctcgccctcttcatattgagaataca\\!\\(\\*\
StyleBox[\\\"ctcc\\\",FontColor->RGBColor[1,0,0],FontSize->18,FontWeight->\\\"\
Bold\\\"]\\)\
attcaaaattttgtcgtcaccgctgattaatttttcactaaactgatgaataatcaaaggccccacgtcagaaccgac\
taaagaagtgagttttattttaggaggttgaaaaccattattgtctggtaaattttcatcttcttgacatttaaccca\
gtttgaatccctttcaatttctgctttttc\\!\\(\\*StyleBox[\\\"ctcc\\\",FontColor->\
RGBColor[1,0,0],FontSize->18,FontWeight->\\\"Bold\\\"]\\)aaactatcgacc\\!\\(\\*\
StyleBox[\\\"ctcc\\\",FontColor->RGBColor[1,0,0],FontSize->18,FontWeight->\\\"\
Bold\\\"]\\)\
tgtttctgtccaacttatgtcctagttccaattcgatcgcattaataactgcttcaaatgttattgtgtcatcgttga\
ctttaggtaattt\\!\\(\\*StyleBox[\\\"ctcc\\\",FontColor->RGBColor[1,0,0],\
FontSize->18,FontWeight->\\\"Bold\\\"]\\)\
aaatgcataatcaaactatttaaggaagatcggaattcgtcgaacacttcagtttccgtaatgatctgatcgtcttta\
tccacatgttgtaattcactaaaatctaaaacgtatttttcaatgcataaatcgttctttttattaataatgcagatg\
gaaaatctgtaaacgtgcgttaatttagaaagaacatccagtataagttcttctatatagtcaattaaagcaggatgc\
ctattaatgggaacgaactgcggcaagttgaatgactggtaagtagtgtagtcgaatgactgaggtgggtatacattt\
ctataaaataaaatcaaattaatgtagcattttaagtataccctcagccacttctctacccatctattcataaagctg\
acgcaacgattactattttttttttcttcttggatctcagtcgtcgcaaaaacgtataccttctttttccgacctttt\
ttttagctttctggaaaagtttatattagttaaacagggtctagtcttagtgtgaaagctagtggtttcgattgactg\
atattaagaaagtggaaattaaattagtagtgtagacgtatatgcatatgtatttctcgcctgtttatgtttctacgt\
acttttgatttatagcaaggggaaaagaaatacatactattttttggtaaaggtgaaagcataatgtaaaagctagaa\
taaaatggacgaaataaagagaggcttagttcatcttttttccaaaaagcacccaatgataataactaaaatgaaaag\
gatttgccatctgtcagcaacatcagttgtgtgagcaataataaaatcatcac\\!\\(\\*StyleBox[\\\"\
ctcc\\\",FontColor->RGBColor[1,0,0],FontSize->18,FontWeight->\\\"Bold\\\"]\\)\
gttgcctttagcgcgtttgtcgtttgtatcttccgtaattttagtcttatcaatgggaatcataaattttccaatgaa\
ttagcaatttcgtccaattctttttgagcttcttcatatttgctttggaattcttcgcacttcttttcccattcatct\
ctttcttcttccaaagcaacgatccttctacccatttgctcagagttcaaatcggcctctttcagtttatccattgct\
tccttcagtttggcttcactgtcttctagctgttgttctagatcctggtttttcttggtgtagttctcattattagat\
ctcaagttattggagtcttcagccaattgctttgtatcagacaattgactctctaactt\\!\\(\\*StyleBox[\
\\\"ctcc\\\",FontColor->RGBColor[1,0,0],FontSize->18,FontWeight->\\\"Bold\\\"]\
\\)acttcactgtcgagttgctcgtttttagcggacaaagatttaatctcgttttctttttcagtgttagattgctct\
aattctttgagctgttctctcag\\!\\(\\*StyleBox[\\\"ctcc\\\",FontColor->RGBColor[1,0,\
0],FontSize->18,FontWeight->\\\"Bold\\\"]\\)\
tcatatttttcttgccatgactcagattctaattttaagctattcaatttctctttgatc\"\>"], "Output",
 CellChangeTimes->{
  3.538308924834662*^9, {3.538308995977552*^9, 3.538309041485478*^9}, 
   3.538309162441115*^9, 3.538309413321035*^9, 3.538483594963237*^9, {
   3.54027484951725*^9, 3.540274874534133*^9}},
 Background->None]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercise 4: Sickle Cell Anemia Gene (optional)", "Subsection",
 ShowGroupOpener->True,
 Background->None],

Cell[TextData[{
 StyleBox["Now let's look at a real case. S",
  FontWeight->"Plain"],
 "ickle cell anemia (For a detailed introduction, please see ",
 ButtonBox["http://www.ornl.gov/sci/techresources/Human_Genome/posters/\
chromosome/hbb.shtml",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://www.ornl.gov/sci/techresources/Human_Genome/posters/\
chromosome/hbb.shtml"], None}],
 ") is most commonly caused by a single mutation in the hemoglobin gene \
sequence resulting a variant Hb S.  In this variant, the hydrophobic amino \
acid valine takes the place of hydrophilic glutamic acid at the sixth amino \
acid position of the HBB polypeptide chain. Now your task is to s",
 StyleBox["earch out the HBB gene (nucleotide ID : ",
  FontWeight->"Plain"],
 "28302128",
 StyleBox[") in ",
  FontWeight->"Plain"],
 "GenBank database and try to get a text file about its mRNA. Extract out its \
gene sequence and find out the nucleotide position where single mutation will \
happen in the case of sickle blood cell , mutate it and label it as red. Use \
condon rules to translate the HBB sequence (without mutation) into its \
corresponding  sequence of amino acids and compare it with the real \
translation sequence which you can extract from the data text file, explain \
why there exists very large difference."
}], "Text",
 FontSize->14,
 Background->None]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "OriginRowNumber", ",", "DNAsequence", ",", "s", ",", "proteinseqString",
       ",", "proteinSeqStart", ",", "proteinSeqEnd", ",", "proteinSeq"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"myGenBankfile", "=", 
      RowBox[{"ReadList", "[", 
       RowBox[{
       "\"\</home/jhofman/Desktop/CompBio/lab2/28302128.txt\>\"", ",", "Word",
         ",", " ", 
        RowBox[{"WordSeparators", "\[Rule]", 
         RowBox[{"{", "\"\<\\r\>\"", "}"}]}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"OriginRowNumber", "=", 
      RowBox[{"First", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Position", "[", 
         RowBox[{"myGenBankfile", ",", 
          RowBox[{"x_String", "/;", 
           RowBox[{"x", "\[Equal]", 
            RowBox[{"First", "[", 
             RowBox[{"Select", "[", 
              RowBox[{"myGenBankfile", ",", 
               RowBox[{
                RowBox[{"StringMatchQ", "[", 
                 RowBox[{"#", ",", "\"\<ORIGIN*\>\""}], "]"}], "&"}]}], "]"}],
              "]"}]}]}]}], "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"DNAseqence", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"myGenBankfile", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"OriginRowNumber", "+", "1"}], ",", 
          RowBox[{"Length", "[", "myGenBankfile", "]"}]}], "}"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"DNAseqString", "=", "\"\<\>\""}], ";", 
        RowBox[{"i", "=", "1"}]}], ",", 
       RowBox[{"i", "<", 
        RowBox[{
         RowBox[{"Length", "[", "DNAseqence", "]"}], "+", "1"}]}], ",", 
       RowBox[{
        RowBox[{"s", "=", 
         RowBox[{"StringToStream", "[", 
          RowBox[{"DNAseqence", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";", 
        RowBox[{"DNAseqString", "=", 
         RowBox[{"DNAseqString", "<>", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"Drop", "[", 
            RowBox[{
             RowBox[{"ReadList", "[", 
              RowBox[{"s", ",", "Word", ",", 
               RowBox[{"RecordSeparators", "\[Rule]", 
                RowBox[{"{", "\"\< \>\"", "}"}]}]}], "]"}], ",", "1"}], "]"}],
            "]"}]}]}], ";", 
        RowBox[{"i", "++"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     "DNAseqString"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"DNAseqString", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"position", "=", 
  RowBox[{
   RowBox[{"First", "[", 
    RowBox[{
     StyleBox["StringPosition", "Text"], "[", 
     RowBox[{"DNAseqString", ",", "\"\<ctgactcctgaggagaagtct\>\""}], "]"}], 
    "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"anemia", " ", "=", 
   RowBox[{"StringReplace", "[", 
    RowBox[{"DNAseqString", ",", 
     RowBox[{
     "\"\<ctgactcctgaggagaagtct\>\"", "\[Rule]", 
      "\"\<ctgactcctgtggagaagtct\>\""}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CodonRules", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<tca\>\"", "->", "\"\<S\>\""}], ",", 
     RowBox[{"\"\<tcc\>\"", "->", "\"\<S\>\""}], ",", 
     RowBox[{"\"\<tcg\>\"", "->", "\"\<S\>\""}], ",", 
     RowBox[{"\"\<tct\>\"", "->", "\"\<S\>\""}], ",", 
     RowBox[{"\"\<ttc\>\"", "->", "\"\<F\>\""}], ",", "   ", 
     RowBox[{"\"\<ttt\>\"", "->", "\"\<F\>\""}], ",", 
     RowBox[{"\"\<tta\>\"", "->", "\"\<L\>\""}], ",", 
     RowBox[{"\"\<ttg\>\"", "->", "\"\<L\>\""}], ",", 
     RowBox[{"\"\<tac\>\"", "->", "\"\<Y\>\""}], ",", 
     RowBox[{"\"\<tat\>\"", "->", "\"\<Y\>\""}], ",", 
     RowBox[{"\"\<taa\>\"", "->", "\"\<_\>\""}], ",", 
     RowBox[{"\"\<tag\>\"", "->", "\"\<_\>\""}], ",", 
     RowBox[{"\"\<tgc\>\"", "->", "\"\<C\>\""}], ",", 
     RowBox[{"\"\<tgt\>\"", "->", "\"\<C\>\""}], ",", 
     RowBox[{"\"\<tga\>\"", "->", "\"\<_\>\""}], ",", 
     RowBox[{"\"\<tgg\>\"", "->", "\"\<W\>\""}], ",", 
     RowBox[{"\"\<cta\>\"", "\[Rule]", "\"\<L\>\""}], ",", 
     RowBox[{"\"\<ctc\>\"", "->", "\"\<L\>\""}], ",", 
     RowBox[{"\"\<ctg\>\"", "->", "\"\<L\>\""}], ",", 
     RowBox[{"\"\<ctt\>\"", "->", "\"\<L\>\""}], ",", 
     RowBox[{"\"\<cca\>\"", "->", "\"\<P\>\""}], ",", 
     RowBox[{"\"\<ccc\>\"", "->", "\"\<P\>\""}], ",", 
     RowBox[{"\"\<ccg\>\"", "->", "\"\<P\>\""}], ",", 
     RowBox[{"\"\<cct\>\"", "->", "\"\<P\>\""}], ",", 
     RowBox[{"\"\<cac\>\"", "->", "\"\<H\>\""}], ",", 
     RowBox[{"\"\<cat\>\"", "->", "\"\<H\>\""}], ",", 
     RowBox[{"\"\<caa\>\"", "->", "\"\<Q\>\""}], ",", 
     RowBox[{"\"\<cag\>\"", "->", "\"\<Q\>\""}], ",", 
     RowBox[{"\"\<cga\>\"", "->", "\"\<R\>\""}], ",", 
     RowBox[{"\"\<cgc\>\"", "->", "\"\<R\>\""}], ",", 
     RowBox[{"\"\<cgg\>\"", "->", "\"\<R\>\""}], ",", 
     RowBox[{"\"\<cgt\>\"", "->", "\"\<R\>\""}], ",", 
     RowBox[{"\"\<ata\>\"", "->", "\"\<I\>\""}], ",", 
     RowBox[{"\"\<att\>\"", "->", "\"\<I\>\""}], ",", 
     RowBox[{"\"\<atc\>\"", "->", "\"\<I\>\""}], ",", 
     RowBox[{"\"\<atg\>\"", "->", "\"\<M\>\""}], ",", 
     RowBox[{"\"\<aca\>\"", "->", "\"\<T\>\""}], ",", 
     RowBox[{"\"\<acc\>\"", "->", "\"\<T\>\""}], ",", 
     RowBox[{"\"\<acg\>\"", "->", "\"\<T\>\""}], ",", 
     RowBox[{"\"\<act\>\"", "->", "\"\<T\>\""}], ",", 
     RowBox[{"\"\<aac\>\"", "->", "\"\<N\>\""}], ",", 
     RowBox[{"\"\<aat\>\"", "->", "\"\<N\>\""}], ",", 
     RowBox[{"\"\<aaa\>\"", "->", "\"\<K\>\""}], ",", 
     RowBox[{"\"\<aag\>\"", "->", "\"\<K\>\""}], ",", 
     RowBox[{"\"\<agc\>\"", "->", "\"\<S\>\""}], ",", 
     RowBox[{"\"\<agt\>\"", "->", "\"\<S\>\""}], ",", 
     RowBox[{"\"\<aga\>\"", "->", "\"\<R\>\""}], ",", 
     RowBox[{"\"\<agg\>\"", "->", "\"\<R\>\""}], ",", 
     RowBox[{"\"\<gta\>\"", "->", "\"\<V\>\""}], ",", 
     RowBox[{"\"\<gtc\>\"", "->", "\"\<V\>\""}], ",", 
     RowBox[{"\"\<gtg\>\"", "->", "\"\<V\>\""}], ",", 
     RowBox[{"\"\<gtt\>\"", "->", "\"\<V\>\""}], ",", 
     RowBox[{"\"\<gca\>\"", "->", "\"\<A\>\""}], ",", 
     RowBox[{"\"\<gcc\>\"", "->", "\"\<A\>\""}], ",", 
     RowBox[{"\"\<gcg\>\"", "->", "\"\<A\>\""}], ",", 
     RowBox[{"\"\<gct\>\"", "->", "\"\<A\>\""}], ",", 
     RowBox[{"\"\<gac\>\"", "->", "\"\<D\>\""}], ",", 
     RowBox[{"\"\<gat\>\"", "->", "\"\<D\>\""}], ",", 
     RowBox[{"\"\<gaa\>\"", "\[Rule]", "\"\<E\>\""}], ",", 
     RowBox[{"\"\<gag\>\"", "->", "\"\<E\>\""}], ",", 
     RowBox[{"\"\<gga\>\"", "->", "\"\<G\>\""}], ",", 
     RowBox[{"\"\<ggc\>\"", "->", "\"\<G\>\""}], ",", 
     RowBox[{"\"\<ggg\>\"", "->", "\"\<G\>\""}], ",", 
     RowBox[{"\"\<ggt\>\"", "->", "\"\<G\>\""}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"StringJoin", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Partition", "[", 
      RowBox[{
       RowBox[{"Characters", "[", "DNAseqString", "]"}], ",", "3"}], "]"}], "/.", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x_", ",", "y_", ",", "z_"}], "}"}], "\[RuleDelayed]", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"x", ",", "y", ",", "z"}], "]"}]}]}], "/.", "CodonRules"}], 
   "]"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pat2", "=", 
   RowBox[{"First", "[", 
    RowBox[{"Select", "[", 
     RowBox[{"myGenBankfile", ",", 
      RowBox[{
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"#", ",", "\"\<*translation*\>\""}], "]"}], "&"}]}], "]"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"pat3", "=", 
   RowBox[{"First", "[", 
    RowBox[{"Select", "[", 
     RowBox[{"myGenBankfile", ",", 
      RowBox[{
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"#", ",", "\"\<*misc_feature    54..56*\>\""}], "]"}], 
       "&"}]}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"proteinSeqStart", "=", 
   RowBox[{"First", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Position", "[", 
      RowBox[{"myGenBankfile", ",", 
       RowBox[{"x_String", "/;", 
        RowBox[{"x", "\[Equal]", "pat2"}]}]}], "]"}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"proteinSeqEnd", "=", 
   RowBox[{
    RowBox[{"First", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Position", "[", 
       RowBox[{"myGenBankfile", ",", 
        RowBox[{"x_String", "/;", 
         RowBox[{"x", "\[Equal]", "pat3"}]}]}], "]"}], "]"}], "]"}], "-", 
    "1"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"proteinSeq", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"myGenBankfile", "[", 
      RowBox[{"[", "i", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "proteinSeqStart", ",", "proteinSeqEnd"}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"StringReplace", "[", 
  RowBox[{
   RowBox[{"StringJoin", "[", "proteinSeq", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<\\\"\>\"", "\[Rule]", "\"\<\>\""}], ",", 
     RowBox[{"\"\< \>\"", "\[Rule]", "\"\<\>\""}], ",", 
     RowBox[{"\"\</translation=\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.538309767541193*^9, 3.538309786762656*^9}, {
  3.538398977533113*^9, 3.538399007255492*^9}, {3.538399051541176*^9, 
  3.5383990949847918`*^9}, {3.538399140343047*^9, 3.538399166793951*^9}, {
  3.538399310244884*^9, 3.5383993156133537`*^9}, {3.538399356106469*^9, 
  3.53839935985038*^9}, {3.5383994272674847`*^9, 3.538399468275502*^9}, {
  3.538399501475622*^9, 3.53839951847959*^9}, {3.538399548678424*^9, 
  3.5383995532884007`*^9}},
 Background->None],

Cell[BoxData["\<\"\
acatttgcttctgacacaactgtgttcactagcaacctcaaacagacaccatggtgcatctgactcctgaggagaagt\
ctgccgttactgccctgtggggcaaggtgaacgtggatgaagttggtggtgaggccctgggcaggctgctggtggtct\
acccttggacccagaggttctttgagtcctttggggatctgtccactcctgatgctgttatgggcaaccctaaggtga\
aggctcatggcaagaaagtgctcggtgcctttagtgatggcctggctcacctggacaacctcaagggcacctttgcca\
cactgagtgagctgcactgtgacaagctgcacgtggatcctgagaacttcaggctcctgggcaacgtgctggtctgtg\
tgctggcccatcactttggcaaagaattcaccccaccagtgcaggctgcctatcagaaagtggtggctggtgtggcta\
atgccctggcccacaagtatcactaagctcgctttcttgctgtccaatttctattaaaggttcctttgttccctaagt\
ccaactactaaactgggggatattatgaagggccttgagcatctggattctgcctaataaaaaacatttattttcatt\
gc\"\>"], "Output",
 CellChangeTimes->{
  3.5383098277836103`*^9, 3.5383099178622637`*^9, {3.538310417736554*^9, 
   3.538310463411592*^9}, {3.538310507296502*^9, 3.538310524690867*^9}, {
   3.538310555616658*^9, 3.538310565255834*^9}, {3.538310614498911*^9, 
   3.5383106312736263`*^9}, {3.538310714992447*^9, 3.538310731243391*^9}, {
   3.5383989247395906`*^9, 3.538398930914823*^9}, {3.538398999213943*^9, 
   3.5383990080753393`*^9}, {3.5383990626915827`*^9, 3.5383990958968287`*^9}, 
   3.538399168167952*^9, 3.538399316683279*^9, 3.538399360865941*^9, {
   3.538399434167815*^9, 3.538399469152152*^9}, {3.538399505303125*^9, 
   3.538399519344871*^9}, 3.538399553964973*^9},
 Background->None],

Cell[BoxData["60"], "Output",
 CellChangeTimes->{
  3.5383098277836103`*^9, 3.5383099178622637`*^9, {3.538310417736554*^9, 
   3.538310463411592*^9}, {3.538310507296502*^9, 3.538310524690867*^9}, {
   3.538310555616658*^9, 3.538310565255834*^9}, {3.538310614498911*^9, 
   3.5383106312736263`*^9}, {3.538310714992447*^9, 3.538310731243391*^9}, {
   3.5383989247395906`*^9, 3.538398930914823*^9}, {3.538398999213943*^9, 
   3.5383990080753393`*^9}, {3.5383990626915827`*^9, 3.5383990958968287`*^9}, 
   3.538399168167952*^9, 3.538399316683279*^9, 3.538399360865941*^9, {
   3.538399434167815*^9, 3.538399469152152*^9}, {3.538399505303125*^9, 
   3.538399519344871*^9}, 3.538399553972932*^9},
 Background->None],

Cell[BoxData["\<\"\
acatttgcttctgacacaactgtgttcactagcaacctcaaacagacaccatggtgcatctgactcctgtggagaagt\
ctgccgttactgccctgtggggcaaggtgaacgtggatgaagttggtggtgaggccctgggcaggctgctggtggtct\
acccttggacccagaggttctttgagtcctttggggatctgtccactcctgatgctgttatgggcaaccctaaggtga\
aggctcatggcaagaaagtgctcggtgcctttagtgatggcctggctcacctggacaacctcaagggcacctttgcca\
cactgagtgagctgcactgtgacaagctgcacgtggatcctgagaacttcaggctcctgggcaacgtgctggtctgtg\
tgctggcccatcactttggcaaagaattcaccccaccagtgcaggctgcctatcagaaagtggtggctggtgtggcta\
atgccctggcccacaagtatcactaagctcgctttcttgctgtccaatttctattaaaggttcctttgttccctaagt\
ccaactactaaactgggggatattatgaagggccttgagcatctggattctgcctaataaaaaacatttattttcatt\
gc\"\>"], "Output",
 CellChangeTimes->{
  3.5383098277836103`*^9, 3.5383099178622637`*^9, {3.538310417736554*^9, 
   3.538310463411592*^9}, {3.538310507296502*^9, 3.538310524690867*^9}, {
   3.538310555616658*^9, 3.538310565255834*^9}, {3.538310614498911*^9, 
   3.5383106312736263`*^9}, {3.538310714992447*^9, 3.538310731243391*^9}, {
   3.5383989247395906`*^9, 3.538398930914823*^9}, {3.538398999213943*^9, 
   3.5383990080753393`*^9}, {3.5383990626915827`*^9, 3.5383990958968287`*^9}, 
   3.538399168167952*^9, 3.538399316683279*^9, 3.538399360865941*^9, {
   3.538399434167815*^9, 3.538399469152152*^9}, {3.538399505303125*^9, 
   3.538399519344871*^9}, 3.538399553976424*^9},
 Background->None],

Cell[BoxData["\<\"TFASDTTVFTSNLKQTPWCI_LLRRSLPLLPCGAR_\
TWMKLVVRPWAGCWWSTLGPRGSLSPLGICPLLMLLWATLR_RLMARKCSVPLVMAWLTWTTSRAPLPH_\
VSCTVTSCTWILRTSGSWATCWSVCWPITLAKNSPHQCRLPIRKWWLVWLMPWPTSITKLAFLLSNFY_\
RFLCSLSPTTKLGDIMKGLEHLDSA__KTFIFI\"\>"], "Output",
 CellChangeTimes->{
  3.5383098277836103`*^9, 3.5383099178622637`*^9, {3.538310417736554*^9, 
   3.538310463411592*^9}, {3.538310507296502*^9, 3.538310524690867*^9}, {
   3.538310555616658*^9, 3.538310565255834*^9}, {3.538310614498911*^9, 
   3.5383106312736263`*^9}, {3.538310714992447*^9, 3.538310731243391*^9}, {
   3.5383989247395906`*^9, 3.538398930914823*^9}, {3.538398999213943*^9, 
   3.5383990080753393`*^9}, {3.5383990626915827`*^9, 3.5383990958968287`*^9}, 
   3.538399168167952*^9, 3.538399316683279*^9, 3.538399360865941*^9, {
   3.538399434167815*^9, 3.538399469152152*^9}, {3.538399505303125*^9, 
   3.538399519344871*^9}, 3.538399553981037*^9},
 Background->None],

Cell[BoxData["\<\"\
MVHLTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAH\
LDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKYH\"\>"], \
"Output",
 CellChangeTimes->{
  3.5383098277836103`*^9, 3.5383099178622637`*^9, {3.538310417736554*^9, 
   3.538310463411592*^9}, {3.538310507296502*^9, 3.538310524690867*^9}, {
   3.538310555616658*^9, 3.538310565255834*^9}, {3.538310614498911*^9, 
   3.5383106312736263`*^9}, {3.538310714992447*^9, 3.538310731243391*^9}, {
   3.5383989247395906`*^9, 3.538398930914823*^9}, {3.538398999213943*^9, 
   3.5383990080753393`*^9}, {3.5383990626915827`*^9, 3.5383990958968287`*^9}, 
   3.538399168167952*^9, 3.538399316683279*^9, 3.538399360865941*^9, {
   3.538399434167815*^9, 3.538399469152152*^9}, {3.538399505303125*^9, 
   3.538399519344871*^9}, 3.538399553987159*^9},
 Background->None]
}, Open  ]]
},
WindowToolbars->"EditBar",
CellGrouping->Manual,
WindowSize->{1366, 744},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"8.0 for Linux x86 (64-bit) (October 10, 2011)",
StyleDefinitions->FrontEnd`FileName[{"Creative"}, "PastelColor.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "mycell"->{
  Cell[164980, 4763, 74, 2, 24, "Section 1",
   CellTags->"mycell"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"mycell", 261297, 7101}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 189, 7, 68, "Title"],
Cell[771, 31, 532, 13, 39, "Author"],
Cell[1306, 46, 839, 24, 41, "Author"],
Cell[CellGroupData[{
Cell[2170, 74, 148, 6, 78, "Section"],
Cell[2321, 82, 140, 5, 32, "Text"],
Cell[CellGroupData[{
Cell[2486, 91, 99, 2, 32, "Input"],
Cell[2588, 95, 112, 2, 32, "Output"]
}, Open  ]],
Cell[2715, 100, 532, 18, 53, "Text"],
Cell[CellGroupData[{
Cell[3272, 122, 263, 8, 32, "Input"],
Cell[3538, 132, 112, 2, 32, "Output"]
}, Open  ]],
Cell[3665, 137, 535, 17, 51, "Text"],
Cell[4203, 156, 228, 6, 32, "Text"],
Cell[CellGroupData[{
Cell[4456, 166, 119, 3, 32, "Input"],
Cell[4578, 171, 130, 2, 32, "Output"]
}, Open  ]],
Cell[4723, 176, 227, 7, 32, "Text"],
Cell[CellGroupData[{
Cell[4975, 187, 195, 6, 32, "Input"],
Cell[5173, 195, 128, 2, 32, "Output"]
}, Open  ]],
Cell[5316, 200, 261, 8, 32, "Text"],
Cell[CellGroupData[{
Cell[5602, 212, 153, 4, 32, "Input"],
Cell[5758, 218, 185, 5, 32, "Output"]
}, Open  ]],
Cell[5958, 226, 224, 7, 32, "Text"],
Cell[CellGroupData[{
Cell[6207, 237, 103, 2, 39, "Subsection"],
Cell[6313, 241, 174, 4, 30, "Text"],
Cell[6490, 247, 1212, 19, 185, "Input"],
Cell[7705, 268, 259, 7, 32, "Text"],
Cell[CellGroupData[{
Cell[7989, 279, 182, 5, 32, "Input"],
Cell[8174, 286, 1206, 17, 166, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[9441, 310, 86, 1, 68, "Section"],
Cell[9530, 313, 472, 11, 46, "Text"],
Cell[CellGroupData[{
Cell[10027, 328, 124, 3, 33, "Input"],
Cell[10154, 333, 441, 8, 48, "Output"]
}, Open  ]],
Cell[10610, 344, 262, 8, 28, "Text"],
Cell[CellGroupData[{
Cell[10897, 356, 93, 2, 33, "Input"],
Cell[10993, 360, 114, 2, 48, "Output"]
}, Open  ]],
Cell[11122, 365, 592, 12, 46, "Text"],
Cell[CellGroupData[{
Cell[11739, 381, 148, 4, 33, "Input"],
Cell[11890, 387, 582, 15, 48, "Output"]
}, Open  ]],
Cell[12487, 405, 112, 3, 28, "Text"],
Cell[CellGroupData[{
Cell[12624, 412, 158, 4, 33, "Input"],
Cell[12785, 418, 1419, 33, 48, "Output"]
}, Open  ]],
Cell[14219, 454, 264, 7, 28, "Text"],
Cell[CellGroupData[{
Cell[14508, 465, 305, 8, 33, "Input"],
Cell[14816, 475, 218, 5, 48, "Output"]
}, Open  ]],
Cell[15049, 483, 789, 26, 46, "Text"],
Cell[CellGroupData[{
Cell[15863, 513, 234, 7, 33, "Input"],
Cell[16100, 522, 270, 6, 48, "Output"]
}, Open  ]],
Cell[16385, 531, 381, 11, 28, "Text"],
Cell[16769, 544, 685, 25, 46, "Text"],
Cell[CellGroupData[{
Cell[17479, 573, 128, 3, 33, "Input"],
Cell[17610, 578, 220, 5, 48, "Output"]
}, Open  ]],
Cell[17845, 586, 391, 8, 46, "Text"],
Cell[CellGroupData[{
Cell[18261, 598, 86, 1, 39, "Subsection"],
Cell[18350, 601, 618, 16, 46, "Text"],
Cell[CellGroupData[{
Cell[18993, 621, 3577, 68, 148, "Input"],
Cell[22573, 691, 3828, 68, 106, "Output"]
}, Open  ]],
Cell[26416, 762, 509, 12, 46, "Text"],
Cell[CellGroupData[{
Cell[26950, 778, 343, 10, 33, "Input"],
Cell[27296, 790, 7793, 124, 277, "Output"]
}, Open  ]],
Cell[35104, 917, 130, 4, 28, "Text"],
Cell[CellGroupData[{
Cell[35259, 925, 433, 13, 33, "Input"],
Cell[35695, 940, 466, 7, 87, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[36222, 954, 69, 1, 68, "Section"],
Cell[36294, 957, 1169, 32, 82, "Text"],
Cell[CellGroupData[{
Cell[37488, 993, 304, 8, 33, "Input"],
Cell[37795, 1003, 196, 5, 48, "Output"]
}, Open  ]],
Cell[38006, 1011, 138, 4, 28, "Text"],
Cell[CellGroupData[{
Cell[38169, 1019, 279, 9, 33, "Input"],
Cell[38451, 1030, 89, 2, 48, "Output"]
}, Open  ]],
Cell[38555, 1035, 125, 4, 28, "Text"],
Cell[38683, 1041, 381, 12, 33, "Input"],
Cell[39067, 1055, 161, 4, 28, "Text"],
Cell[CellGroupData[{
Cell[39253, 1063, 115, 3, 33, "Input"],
Cell[39371, 1068, 91, 2, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[39499, 1075, 98, 1, 39, "Subsection"],
Cell[39600, 1078, 330, 6, 46, "Text"],
Cell[CellGroupData[{
Cell[39955, 1088, 141, 4, 33, "Input"],
Cell[40099, 1094, 647, 12, 51, "Message"]
}, Open  ]],
Cell[40761, 1109, 276, 5, 46, "Text"],
Cell[CellGroupData[{
Cell[41062, 1118, 295, 10, 33, "Input"],
Cell[41360, 1130, 164, 4, 48, "Output"]
}, Open  ]],
Cell[41539, 1137, 150, 4, 28, "Text"],
Cell[CellGroupData[{
Cell[41714, 1145, 565, 18, 33, "Input"],
Cell[42282, 1165, 5503, 119, 253, 2008, 59, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[47800, 1287, 345, 8, 46, "Text"],
Cell[48148, 1297, 1304, 36, 91, "Input"],
Cell[49455, 1335, 236, 5, 28, "Text"],
Cell[CellGroupData[{
Cell[49716, 1344, 129, 3, 33, "Input"],
Cell[49848, 1349, 652, 12, 51, "Message"],
Cell[50503, 1363, 5505, 119, 253, 2008, 59, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[56069, 1489, 80, 1, 68, "Section"],
Cell[56152, 1492, 425, 11, 46, "Text"],
Cell[CellGroupData[{
Cell[56602, 1507, 185, 5, 33, "Input"],
Cell[56790, 1514, 183, 5, 48, "Output"]
}, Open  ]],
Cell[56988, 1522, 152, 4, 28, "Text"],
Cell[CellGroupData[{
Cell[57165, 1530, 128, 3, 33, "Input"],
Cell[57296, 1535, 419, 8, 48, "Output"]
}, Open  ]],
Cell[57730, 1546, 549, 13, 46, "Text"],
Cell[CellGroupData[{
Cell[58304, 1563, 190, 4, 33, "Input"],
Cell[58497, 1569, 344, 11, 48, "Output"]
}, Open  ]],
Cell[58856, 1583, 275, 8, 28, "Text"],
Cell[CellGroupData[{
Cell[59156, 1595, 234, 7, 32, "Input"],
Cell[59393, 1604, 145, 4, 32, "Output"]
}, Open  ]],
Cell[59553, 1611, 243, 9, 30, "Text"],
Cell[CellGroupData[{
Cell[59821, 1624, 194, 5, 32, "Input"],
Cell[60018, 1631, 145, 4, 32, "Output"]
}, Open  ]],
Cell[60178, 1638, 88, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[60291, 1643, 300, 8, 32, "Input"],
Cell[60594, 1653, 171, 4, 32, "Output"]
}, Open  ]],
Cell[60780, 1660, 210, 6, 31, "Text"],
Cell[60993, 1668, 277, 7, 30, "Text"],
Cell[CellGroupData[{
Cell[61295, 1679, 136, 3, 32, "Input"],
Cell[61434, 1684, 144, 3, 32, "Output"]
}, Open  ]],
Cell[61593, 1690, 82, 1, 30, "Text"],
Cell[61678, 1693, 323, 8, 32, "Input"],
Cell[62004, 1703, 311, 8, 32, "Text"],
Cell[CellGroupData[{
Cell[62340, 1715, 381, 11, 32, "Input"],
Cell[62724, 1728, 656, 21, 32, "Output"]
}, Open  ]],
Cell[63395, 1752, 184, 6, 30, "Text"],
Cell[CellGroupData[{
Cell[63604, 1762, 143, 3, 32, "Input"],
Cell[63750, 1767, 134, 2, 32, "Output"]
}, Open  ]],
Cell[63899, 1772, 107, 3, 30, "Text"],
Cell[CellGroupData[{
Cell[64031, 1779, 144, 3, 33, "Input"],
Cell[64178, 1784, 144, 3, 48, "Output"]
}, Open  ]],
Cell[64337, 1790, 88, 1, 28, "Text"],
Cell[CellGroupData[{
Cell[64450, 1795, 58, 1, 33, "Input"],
Cell[64511, 1798, 144, 3, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64692, 1806, 79, 1, 39, "Subsection"],
Cell[64774, 1809, 251, 5, 28, "Text"],
Cell[CellGroupData[{
Cell[65050, 1818, 130, 3, 33, "Input"],
Cell[65183, 1823, 143, 3, 48, "Output"]
}, Open  ]],
Cell[65341, 1829, 164, 4, 28, "Text"],
Cell[CellGroupData[{
Cell[65530, 1837, 122, 3, 33, "Input"],
Cell[65655, 1842, 143, 3, 48, "Output"]
}, Open  ]],
Cell[65813, 1848, 372, 11, 46, "Text"],
Cell[CellGroupData[{
Cell[66210, 1863, 125, 3, 33, "Input"],
Cell[66338, 1868, 606, 10, 48, "Output"]
}, Open  ]],
Cell[66959, 1881, 72, 1, 28, "Text"],
Cell[CellGroupData[{
Cell[67056, 1886, 125, 3, 33, "Input"],
Cell[67184, 1891, 608, 10, 48, "Output"]
}, Open  ]],
Cell[67807, 1904, 254, 7, 28, "Text"],
Cell[CellGroupData[{
Cell[68086, 1915, 305, 8, 33, "Input"],
Cell[68394, 1925, 1570, 30, 68, "Output"]
}, Open  ]],
Cell[69979, 1958, 79, 1, 28, "Text"],
Cell[CellGroupData[{
Cell[70083, 1963, 305, 8, 33, "Input"],
Cell[70391, 1973, 1570, 30, 68, "Output"]
}, Open  ]],
Cell[71976, 2006, 298, 10, 28, "Text"],
Cell[CellGroupData[{
Cell[72299, 2020, 190, 5, 33, "Input"],
Cell[72492, 2027, 143, 3, 48, "Output"]
}, Open  ]],
Cell[72650, 2033, 132, 4, 28, "Text"],
Cell[CellGroupData[{
Cell[72807, 2041, 53, 1, 33, "Input"],
Cell[72863, 2044, 143, 3, 48, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[73067, 2054, 71, 1, 68, "Section"],
Cell[73141, 2057, 70, 1, 28, "Text"],
Cell[73214, 2060, 201, 7, 33, "Input"],
Cell[73418, 2069, 173, 6, 28, "Text"],
Cell[CellGroupData[{
Cell[73616, 2079, 156, 5, 33, "Input"],
Cell[73775, 2086, 89, 2, 48, "Output"]
}, Open  ]],
Cell[73879, 2091, 170, 6, 28, "Text"],
Cell[CellGroupData[{
Cell[74074, 2101, 218, 7, 33, "Input"],
Cell[74295, 2110, 97, 2, 48, "Output"]
}, Open  ]],
Cell[74407, 2115, 289, 9, 28, "Text"],
Cell[CellGroupData[{
Cell[74721, 2128, 309, 10, 33, "Input"],
Cell[75033, 2140, 302, 6, 48, "Output"]
}, Open  ]],
Cell[75350, 2149, 149, 6, 28, "Text"],
Cell[CellGroupData[{
Cell[75524, 2159, 354, 11, 33, "Input"],
Cell[75881, 2172, 106, 2, 48, "Output"]
}, Open  ]],
Cell[76002, 2177, 303, 8, 28, "Text"],
Cell[76308, 2187, 430, 13, 33, "Input"],
Cell[76741, 2202, 130, 4, 28, "Text"],
Cell[CellGroupData[{
Cell[76896, 2210, 82, 2, 33, "Input"],
Cell[76981, 2214, 148, 3, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77166, 2222, 79, 1, 39, "Subsection"],
Cell[77248, 2225, 388, 9, 46, "Text"],
Cell[77639, 2236, 602, 19, 33, "Input"],
Cell[CellGroupData[{
Cell[78266, 2259, 262, 8, 33, "Input"],
Cell[78531, 2269, 272, 6, 48, "Output"]
}, Open  ]],
Cell[78818, 2278, 157, 5, 28, "Text"],
Cell[CellGroupData[{
Cell[79000, 2287, 193, 6, 33, "Input"],
Cell[79196, 2295, 97, 2, 48, "Output"]
}, Open  ]],
Cell[79308, 2300, 528, 14, 46, "Text"],
Cell[CellGroupData[{
Cell[79861, 2318, 816, 24, 53, "Input"],
Cell[80680, 2344, 91, 2, 48, "Output"]
}, Open  ]],
Cell[80786, 2349, 537, 11, 70, "Text"],
Cell[81326, 2362, 3182, 88, 166, "Input"],
Cell[84511, 2452, 90, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[84626, 2457, 107, 3, 32, "Input"],
Cell[84736, 2462, 158, 3, 32, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[84955, 2472, 75, 1, 78, "Section"],
Cell[85033, 2475, 629, 20, 51, "Text"],
Cell[CellGroupData[{
Cell[85687, 2499, 830, 23, 32, "Input"],
Cell[86520, 2524, 217, 7, 68, "Output"]
}, Open  ]],
Cell[86752, 2534, 203, 8, 32, "Text"],
Cell[CellGroupData[{
Cell[86980, 2546, 634, 18, 32, "Input"],
Cell[87617, 2566, 247, 9, 68, "Output"]
}, Open  ]],
Cell[87879, 2578, 175, 4, 30, "Text"],
Cell[88057, 2584, 1961, 53, 109, "Input"],
Cell[90021, 2639, 53, 1, 28, "Text"],
Cell[CellGroupData[{
Cell[90099, 2644, 82, 2, 33, "Input"],
Cell[90184, 2648, 658, 15, 68, "Output"]
}, Open  ]],
Cell[90857, 2666, 427, 7, 49, "Text"],
Cell[91287, 2675, 403, 11, 51, "Text"],
Cell[91693, 2688, 551, 18, 32, "Input"],
Cell[92247, 2708, 191, 7, 32, "Text"],
Cell[CellGroupData[{
Cell[92463, 2719, 164, 5, 32, "Input"],
Cell[92630, 2726, 220, 6, 32, "Output"]
}, Open  ]],
Cell[92865, 2735, 262, 7, 32, "Text"],
Cell[93130, 2744, 268, 7, 32, "Input"],
Cell[93401, 2753, 169, 6, 32, "Text"],
Cell[CellGroupData[{
Cell[93595, 2763, 110, 3, 32, "Input"],
Cell[93708, 2768, 220, 6, 32, "Output"]
}, Open  ]],
Cell[93943, 2777, 311, 8, 30, "Text"],
Cell[CellGroupData[{
Cell[94279, 2789, 685, 20, 52, "Input"],
Cell[94967, 2811, 324, 9, 68, "Output"]
}, Open  ]],
Cell[95306, 2823, 151, 6, 32, "Text"],
Cell[CellGroupData[{
Cell[95482, 2833, 530, 15, 52, "Input"],
Cell[96015, 2850, 322, 9, 68, "Output"]
}, Open  ]],
Cell[96352, 2862, 176, 4, 30, "Text"],
Cell[96531, 2868, 548, 16, 52, "Input"],
Cell[97082, 2886, 142, 4, 30, "Text"],
Cell[CellGroupData[{
Cell[97249, 2894, 343, 11, 32, "Input"],
Cell[97595, 2907, 758, 21, 134, "Output"]
}, Open  ]],
Cell[98368, 2931, 479, 8, 68, "Text"],
Cell[98850, 2941, 3416, 90, 242, "Input"],
Cell[102269, 3033, 76, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[102370, 3038, 128, 3, 32, "Input"],
Cell[102501, 3043, 3878, 81, 354, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[106428, 3130, 66, 1, 78, "Section"],
Cell[106497, 3133, 331, 10, 30, "Text"],
Cell[CellGroupData[{
Cell[106853, 3147, 263, 7, 32, "Input"],
Cell[107119, 3156, 209, 6, 32, "Output"]
}, Open  ]],
Cell[107343, 3165, 158, 5, 30, "Text"],
Cell[CellGroupData[{
Cell[107526, 3174, 392, 11, 32, "Input"],
Cell[107921, 3187, 139, 4, 32, "Output"]
}, Open  ]],
Cell[108075, 3194, 376, 11, 51, "Text"],
Cell[CellGroupData[{
Cell[108476, 3209, 88, 2, 32, "Input"],
Cell[108567, 3213, 102, 2, 32, "Output"]
}, Open  ]],
Cell[108684, 3218, 217, 5, 30, "Text"],
Cell[CellGroupData[{
Cell[108926, 3227, 355, 10, 32, "Input"],
Cell[109284, 3239, 582, 15, 32, "Output"]
}, Open  ]],
Cell[109881, 3257, 287, 14, 32, "Text"],
Cell[CellGroupData[{
Cell[110193, 3275, 581, 16, 32, "Input"],
Cell[110777, 3293, 218, 7, 32, "Output"]
}, Open  ]],
Cell[111010, 3303, 349, 12, 32, "Text"],
Cell[CellGroupData[{
Cell[111384, 3319, 709, 20, 52, "Input"],
Cell[112096, 3341, 486, 15, 32, "Output"]
}, Open  ]],
Cell[112597, 3359, 192, 4, 30, "Text"],
Cell[112792, 3365, 602, 19, 32, "Input"],
Cell[CellGroupData[{
Cell[113419, 3388, 109, 3, 32, "Input"],
Cell[113531, 3393, 148, 3, 32, "Output"]
}, Open  ]],
Cell[113694, 3399, 335, 8, 51, "Text"],
Cell[114032, 3409, 4418, 109, 337, "Input"],
Cell[118453, 3520, 76, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[118554, 3525, 110, 3, 32, "Input"],
Cell[118667, 3530, 1606, 51, 32, "Output"]
}, Open  ]],
Cell[120288, 3584, 74, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[120387, 3589, 50, 1, 32, "Input"],
Cell[120440, 3592, 150, 3, 32, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[120639, 3601, 69, 1, 78, "Section"],
Cell[120711, 3604, 208, 5, 30, "Text"],
Cell[CellGroupData[{
Cell[120944, 3613, 153, 4, 32, "Input"],
Cell[121100, 3619, 165, 4, 32, "Output"]
}, Open  ]],
Cell[121280, 3626, 463, 17, 53, "Text"],
Cell[CellGroupData[{
Cell[121768, 3647, 148, 4, 32, "Input"],
Cell[121919, 3653, 92, 2, 32, "Output"]
}, Open  ]],
Cell[122026, 3658, 189, 7, 30, "Text"],
Cell[CellGroupData[{
Cell[122240, 3669, 148, 4, 32, "Input"],
Cell[122391, 3675, 160, 5, 32, "Output"]
}, Open  ]],
Cell[122566, 3683, 128, 4, 30, "Text"],
Cell[CellGroupData[{
Cell[122719, 3691, 148, 4, 32, "Input"],
Cell[122870, 3697, 235, 8, 32, "Output"]
}, Open  ]],
Cell[123120, 3708, 166, 4, 30, "Text"],
Cell[123289, 3714, 257, 7, 32, "Input"],
Cell[CellGroupData[{
Cell[123571, 3725, 124, 3, 32, "Input"],
Cell[123698, 3730, 91, 2, 32, "Output"]
}, Open  ]],
Cell[123804, 3735, 235, 5, 30, "Text"],
Cell[124042, 3742, 339, 10, 32, "Input"],
Cell[CellGroupData[{
Cell[124406, 3756, 128, 3, 32, "Input"],
Cell[124537, 3761, 135, 4, 32, "Output"]
}, Open  ]],
Cell[124687, 3768, 479, 8, 68, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[125203, 3781, 140, 6, 78, "Section"],
Cell[125346, 3789, 1300, 28, 126, "Text"],
Cell[126649, 3819, 1572, 38, 133, "Text"],
Cell[CellGroupData[{
Cell[128246, 3861, 322, 9, 32, "Input"],
Cell[128571, 3872, 420, 9, 24, "Message"]
}, Open  ]],
Cell[129006, 3884, 88, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[129119, 3889, 266, 9, 32, "Input"],
Cell[129388, 3900, 1223, 31, 175, "Output"]
}, Open  ]],
Cell[130626, 3934, 284, 7, 68, "Text"],
Cell[130913, 3943, 119, 3, 30, "Text"],
Cell[CellGroupData[{
Cell[131057, 3950, 140, 4, 32, "Input"],
Cell[131200, 3956, 302, 10, 32, "Output"]
}, Open  ]],
Cell[131517, 3969, 170, 6, 32, "Text"],
Cell[CellGroupData[{
Cell[131712, 3979, 90, 2, 32, "Input"],
Cell[131805, 3983, 93, 2, 32, "Output"]
}, Open  ]],
Cell[131913, 3988, 255, 5, 30, "Text"],
Cell[CellGroupData[{
Cell[132193, 3997, 58, 1, 32, "Input"],
Cell[132254, 4000, 9074, 167, 1344, "Output"]
}, Open  ]],
Cell[141343, 4170, 436, 8, 49, "Text"],
Cell[CellGroupData[{
Cell[141804, 4182, 284, 9, 32, "Input"],
Cell[142091, 4193, 108, 2, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[142236, 4200, 299, 9, 32, "Input"],
Cell[142538, 4211, 92, 2, 32, "Output"]
}, Open  ]],
Cell[142645, 4216, 181, 4, 30, "Text"],
Cell[CellGroupData[{
Cell[142851, 4224, 384, 12, 32, "Input"],
Cell[143238, 4238, 3736, 77, 717, "Output"]
}, Open  ]],
Cell[146989, 4318, 339, 6, 49, "Text"],
Cell[147331, 4326, 855, 25, 52, "Input"],
Cell[148189, 4353, 56, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[148270, 4358, 57, 1, 32, "Input"],
Cell[148330, 4361, 2374, 31, 318, "Output"]
}, Open  ]],
Cell[150719, 4395, 357, 7, 49, "Text"],
Cell[CellGroupData[{
Cell[151101, 4406, 290, 9, 32, "Input"],
Cell[151394, 4417, 184, 4, 32, "Output"]
}, Open  ]],
Cell[151593, 4424, 164, 4, 30, "Text"],
Cell[CellGroupData[{
Cell[151782, 4432, 284, 9, 32, "Input"],
Cell[152069, 4443, 108, 2, 32, "Output"]
}, Open  ]],
Cell[152192, 4448, 89, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[152306, 4453, 592, 17, 52, "Input"],
Cell[152901, 4472, 114, 2, 32, "Output"],
Cell[153018, 4476, 116, 2, 32, "Output"]
}, Open  ]],
Cell[153149, 4481, 127, 4, 30, "Text"],
Cell[CellGroupData[{
Cell[153301, 4489, 292, 9, 32, "Input"],
Cell[153596, 4500, 1116, 23, 185, "Output"]
}, Open  ]],
Cell[154727, 4526, 302, 10, 32, "Text"],
Cell[CellGroupData[{
Cell[155054, 4540, 395, 11, 32, "Input"],
Cell[155452, 4553, 657, 10, 90, "Output"]
}, Open  ]],
Cell[156124, 4566, 337, 6, 49, "Text"],
Cell[156464, 4574, 4863, 120, 261, "Input"],
Cell[161330, 4696, 71, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[161426, 4701, 63, 1, 32, "Input"],
Cell[161492, 4704, 420, 9, 24, "Message"],
Cell[161915, 4715, 3016, 42, 394, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[164980, 4763, 74, 2, 24, "Section 1",
 CellTags->"mycell"],
Cell[CellGroupData[{
Cell[165079, 4769, 96, 2, 39, "Subsection"],
Cell[165178, 4773, 1030, 28, 77, "Text"]
}, Open  ]],
Cell[166223, 4804, 163, 3, 32, "Input"],
Cell[CellGroupData[{
Cell[166411, 4811, 3326, 85, 261, "Input"],
Cell[169740, 4898, 139, 2, 32, "Output"],
Cell[169882, 4902, 139, 2, 32, "Output"],
Cell[170024, 4906, 115, 2, 32, "Output"],
Cell[170142, 4910, 218, 6, 32, "Output"],
Cell[170363, 4918, 139, 2, 32, "Output"],
Cell[170505, 4922, 1400, 49, 32, "Output"],
Cell[171908, 4973, 1403, 49, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[173348, 5027, 137, 4, 39, "Subsection"],
Cell[173488, 5033, 593, 14, 74, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[174118, 5052, 10870, 277, 508, "Input"],
Cell[184991, 5331, 764, 13, 32, "Output"],
Cell[185758, 5346, 764, 13, 32, "Output"],
Cell[186525, 5361, 5479, 141, 181, "Output"],
Cell[192007, 5504, 14079, 338, 267, "Output"],
Cell[206089, 5844, 2030, 41, 147, "Output"],
Cell[208122, 5887, 658, 10, 32, "Output"],
Cell[208783, 5899, 658, 10, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[209478, 5914, 116, 2, 39, "Subsection"],
Cell[209597, 5918, 561, 11, 74, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[210195, 5934, 5429, 142, 318, "Input"],
Cell[215627, 6078, 5146, 136, 171, "Output"],
Cell[220776, 6216, 13768, 333, 267, "Output"],
Cell[234547, 6551, 1824, 55, 71, "Output"],
Cell[236374, 6608, 258, 5, 32, "Output"],
Cell[236635, 6615, 7778, 108, 698, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244450, 6728, 111, 2, 39, "Subsection"],
Cell[244564, 6732, 1367, 28, 137, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[245992, 6767, 9648, 229, 527, "Input"],
Cell[255643, 6998, 1359, 20, 109, "Output"],
Cell[257005, 7020, 709, 11, 32, "Output"],
Cell[257717, 7033, 1359, 20, 109, "Output"],
Cell[259079, 7055, 929, 14, 52, "Output"],
Cell[260011, 7071, 868, 14, 32, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
